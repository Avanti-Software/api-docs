{
  "openapi": "3.0.1",
  "info": {
    "title": "Avanti API Reference",
    "description": "Avanti API",
    "termsOfService": "https://www.avanti.ca/api-terms-of-use",
    "contact": {
      "name": "Avanti Care",
      "url": "https://avanti.ca",
      "email": "https://help.avanti.ca/support/tickets/new"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://myavanti.ca/avtesting-api"
    }
  ],
  "paths": {
    "/v1/AttendanceCodes": {
      "get": {
        "tags": [
          "Attendance Codes"
        ],
        "summary": "Get Attendance Codes",
        "description": "Returns a list of Attendance Codes used throughout Time & Attendance. \n\nThese are used to track absences in Avanti. ",
        "operationId": "Get-Attendance-Codes",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TextValuePair"
                  }
                },
                "examples": {
                  "Example": {
                    "value": [
                      {
                        "text": "ADMIN - Administration",
                        "value": "ADMIN"
                      },
                      {
                        "text": "BRVE - Bereavement Leave",
                        "value": "BRVE"
                      },
                      {
                        "text": "JURY - Jury Duty",
                        "value": "JURY"
                      },
                      {
                        "text": "LATE - Late Time",
                        "value": "LATE"
                      },
                      {
                        "text": "ORNT - Orientation Session",
                        "value": "ORNT"
                      },
                      {
                        "text": "PERS - Personal Time Off",
                        "value": "PERS"
                      },
                      {
                        "text": "READF - Reading Files",
                        "value": "READF"
                      },
                      {
                        "text": "TRAIN - Training Course",
                        "value": "TRAIN"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/AttendanceData": {
      "post": {
        "tags": [
          "Attendance Data"
        ],
        "summary": "List Payroll Data and Attendance Calendar Entries",
        "description": "This endpoint returns a list of payroll data and attendance calendar time entries with a date range with the earning code selected. Additionally, you can restrict the entries returned by employee number, attendance codes and employee number.\n\nThe API User must have role permissions to the employee and have access to the employee's pay group. Go to [Allow Employee Access](/docs/auth-users.md) for more information on setting up the user with the correct employee access. ",
        "operationId": "Get-List-of-AttendanceData",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttendanceDataRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AttendanceDataRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AttendanceDataRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/AttendanceDataRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./main.v1.json#/components/schemas/AttendanceData"
                }
              }
            }
          },
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Banks": {
      "get": {
        "tags": [
          "Banks"
        ],
        "summary": "List Banks",
        "description": "Returns a list of banks and their financial institution numbers. The format of Text in the response depends on the company web setting Lookup.Banks.",
        "operationId": "List-Banks",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TextValuePair"
                  }
                },
                "examples": {
                  "Example": {
                    "value": [
                      {
                        "text": "001 - Bank of Montreal",
                        "value": "001"
                      },
                      {
                        "text": "002 - The Bank of Nova Scotia",
                        "value": "002"
                      },
                      {
                        "text": "003 - Royal Bank of Canada",
                        "value": "003"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/BankTransits": {
      "get": {
        "tags": [
          "Bank Transit"
        ],
        "summary": "List Bank Transits",
        "operationId": "List-Bank-Transits",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BankTransit"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/BenefitGroups": {
      "get": {
        "tags": [
          "Benefit Groups"
        ],
        "summary": "List Benefit Groups",
        "description": "Returns a list of Benefit Groups used in Benefits Administration. The format of Text in the response depends on the company web setting Lookup.BenefitGroups.\n\nIn Avanti, Benefit Groups are the different groupings of employee benefit coverage and the applicable benefit codes for each group.",
        "operationId": "List-Benefit-Groups",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TextValuePair"
                  }
                },
                "examples": {
                  "Example": {
                    "value": [
                      {
                        "text": "01 - All Single Benefits",
                        "value": "01"
                      },
                      {
                        "text": "02 - All Family Benefits",
                        "value": "02"
                      },
                      {
                        "text": "03 - Only Mandatory Benefits",
                        "value": "03"
                      },
                      {
                        "text": "04 - No Benefits",
                        "value": "04"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ChangeLog": {
      "get": {
        "tags": [
          "Change Log"
        ],
        "summary": "Lists employee changes log",
        "operationId": "Lists-employee-changes-log",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "LogIndex"
            }
          },
          {
            "name": "ascending",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "paged",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Change Log"
        ],
        "summary": "Add a change log",
        "operationId": "Add-a-change-log",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeLog"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeLog"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeLog"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ChangeLog/{id}": {
      "put": {
        "tags": [
          "Change Log"
        ],
        "summary": "Update change log",
        "operationId": "Update-change-log",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeLog"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeLog"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeLog"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Change Log"
        ],
        "summary": "Delete a change log",
        "operationId": "Delete-a-change-log",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ChangeLog/{logIndex}": {
      "get": {
        "tags": [
          "Change Log"
        ],
        "summary": "Get change log item by LogIndex",
        "operationId": "Get-change-log-item-by-LogIndex",
        "parameters": [
          {
            "name": "LogIndex",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ChangeLog/Search": {
      "get": {
        "tags": [
          "Change Log"
        ],
        "summary": "Search change logs",
        "operationId": "Search-change-logs",
        "parameters": [
          {
            "name": "UserId",
            "in": "query",
            "schema": {
              "maxLength": 32,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "EmployeeNo",
            "in": "query",
            "schema": {
              "maxLength": 9,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "FileName",
            "in": "query",
            "schema": {
              "maxLength": 128,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "ColumnName",
            "in": "query",
            "schema": {
              "maxLength": 128,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "StartDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "EndDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "LogIndex"
            }
          },
          {
            "name": "ascending",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "paged",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/CompanyInfo/Logo": {
      "delete": {
        "tags": [
          "Company Info"
        ],
        "summary": "Delete Company Logo",
        "operationId": "Delete-Company-Logo",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": { }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Company Info"
        ],
        "summary": "Get Company Logo",
        "operationId": "Get-Company-Logo",
        "parameters": [
          {
            "name": "width",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "height",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": { }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Company Info"
        ],
        "summary": "Update Company Logo",
        "operationId": "Update-Company-Logo",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "logos": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                }
              },
              "encoding": {
                "logos": { }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": { }
            }
          }
        }
      }
    },
    "/v1/DataConnector/{slugId}": {
      "get": {
        "tags": [
          "Data Connector"
        ],
        "summary": "Get Data Connector",
        "operationId": "Get-Data-Connector",
        "parameters": [
          {
            "name": "slugId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Sort",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/DecliningBalances": {
      "post": {
        "tags": [
          "Declining Balances"
        ],
        "summary": "Declining Balances",
        "operationId": "Declining-Balances",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DecliningBalancesRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DecliningBalancesRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DecliningBalancesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/DefaultsGroup": {
      "get": {
        "tags": [
          "Defaults Group"
        ],
        "summary": "List Defaults Groups",
        "description": "Returns a list of the Employment Default Groups. The format of Text in the response depends on the company web setting Lookup.DefaultGroups.\n\nIn Avanti, these Default Groups can help quickly setup new employees based on common setup requirements. Default Groups can be set up to add earning and deduction/benefit codes, position, employee values, vacation groups, unions, and more. If a setup change is required, Default Groups can quickly update all employees within a group. ",
        "operationId": "List-Defaults-Groups",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TextValuePair"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Dependents": {
      "put": {
        "tags": [
          "Dependents"
        ],
        "summary": "Update Dependent",
        "description": "Update an existing dependent for an employee. \n",
        "operationId": "Create-a-Dependent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Dependent"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Dependent"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Dependent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": { }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Dependents"
        ],
        "summary": "Add Dependent",
        "description": "Creates a new dependent for an employee. \n\nDependents can be added to employee benefits. Additionally, they can be used to indicate beneficiaries. \n",
        "operationId": "Update-a-Dependent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Dependent"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Dependent"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Dependent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": { }
            }
          },
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Dependents"
        ],
        "summary": "Delete a Dependent",
        "description": "Deletes the employee's dependent.",
        "operationId": "Delete-a-Dependent",
        "parameters": [
          {
            "name": "empNo",
            "in": "query",
            "description": "The employee number of the employee assigned to the user. When testing using 'Send a Test Request', this must be blank or 000001005.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dependentNo",
            "in": "query",
            "description": "The number for the dependent. Each dependent for an employee will have a unique dependent number.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": { }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Dependents"
        ],
        "summary": "List Dependents",
        "operationId": "List-Dependents",
        "parameters": [
          {
            "name": "empNo",
            "in": "query",
            "description": "The employee number of the employee assigned to the user. When testing using 'Send a Test Request', this must be blank or 000001005.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Dependent"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/EmergencyContacts": {
      "get": {
        "tags": [
          "Emergency Contacts"
        ],
        "summary": "List Emergency Contacts",
        "description": "Returns a list of the employee's emergency contacts. \n\nEmergency contacts indicate who should be contacted in case of an emergency, as well as the details to contact them. ",
        "operationId": "List-Emergency-Contacts",
        "parameters": [
          {
            "name": "empNo",
            "in": "query",
            "description": "The employee number of the employee assigned to the user. When testing using 'Send a Test Request', this must be blank or 000001005.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmergencyContact"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Emergency Contacts"
        ],
        "summary": "Update Emergency Contact",
        "description": "Update an existing emergency contact for an employee. \n\nEmergency contacts indicate who should be contacted in case of an emergency, as well as the details to contact them. ",
        "operationId": "Create-Emergency-Contact",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmergencyContact"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EmergencyContact"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EmergencyContact"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": { }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Emergency Contacts"
        ],
        "summary": "Add Emergency Contact",
        "description": "Creates a new emergency contact for an employee. \n\nEmergency contacts indicate who should be contacted in case of an emergency, as well as the details to contact them. ",
        "operationId": "Update-Emergency-Contact",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmergencyContact"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EmergencyContact"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EmergencyContact"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Emergency Contacts"
        ],
        "summary": "Delete Emergency Contact",
        "description": "Deletes the employee's emergency contact.",
        "operationId": "Delete-Emergency-Contact",
        "parameters": [
          {
            "name": "empNo",
            "in": "query",
            "description": "The employee number of the employee assigned to the user. When testing using 'Send a Test Request', this must be blank or 000001005.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entryCount",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": { }
            }
          }
        }
      }
    },
    "/v1/EmployeeAddress": {
      "put": {
        "tags": [
          "Employee Address"
        ],
        "summary": "Update Employee Address",
        "description": "Updates the home address of an employee.",
        "operationId": "Update-Employee-Address",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeeAddress"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeeAddress"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeeAddress"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": { }
            }
          }
        }
      }
    },
    "/v1/EmployeeBasicInfo": {
      "put": {
        "tags": [
          "Employee Basic Info"
        ],
        "summary": "Update Employee Basic Info",
        "description": "Update the basic information for the employee, such as full name, birth date, language and SIN information.",
        "operationId": "Update-Employee-Basic-Info",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeeBasicInfo"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeeBasicInfo"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeeBasicInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": { }
            }
          }
        }
      }
    },
    "/v1/EmployeeBasicInfo/Photo": {
      "put": {
        "tags": [
          "Employee Basic Info"
        ],
        "summary": "Update an Employee Photo",
        "operationId": "Update-an-Employee-Photo",
        "parameters": [
          {
            "name": "empNo",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                }
              },
              "encoding": {
                "files": { }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": { }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Employee Basic Info"
        ],
        "summary": "Delete an Employee Photo",
        "operationId": "Delete-an-Employee-Photo",
        "parameters": [
          {
            "name": "empNo",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": { }
            }
          }
        }
      }
    },
    "/v1/EmployeeBenefitCodeV34V35Values": {
      "put": {
        "tags": [
          "Employee Benefit Codes"
        ],
        "summary": "Update V34 and V35 values",
        "description": "Updates the V34 and V35 values on the employee's Deduction/Benefit Code. These amounts can be included in formulas to calculate employee or employer amount during pay. ",
        "operationId": "Update-V34-and-V35-values",
        "parameters": [
          {
            "name": "deductCode",
            "in": "query",
            "description": "A three-digit ID for the deduction code greater than 499.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "V34",
            "in": "query",
            "description": "The employee's V34 amount.  ",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "V35",
            "in": "query",
            "description": "The employee's V35 amount. ",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "empNo",
            "in": "query",
            "description": "The employee number of the employee whose V34/V35 value is being updated. ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": { }
            }
          }
        }
      }
    },
    "/v1/EmployeeBenefitGroup": {
      "get": {
        "tags": [
          "Employee Benefit Group"
        ],
        "summary": "Get Employee Benefit Info",
        "operationId": "Get-Employee-Benefit-Info",
        "parameters": [
          {
            "name": "empNo",
            "in": "query",
            "description": "The employee number of the employee assigned to the user. When testing using 'Send a Test Request', this must be blank or 000001005.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeBenefit"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/EmployeeBenefits": {
      "get": {
        "tags": [
          "Employee Benefits"
        ],
        "summary": "List Employee Benefits",
        "description": "Returns all the most important details of your employee's benefits. \n\nName Format   \n\nThe employees, dependents and beneficiaries' names are all formatted based on the user's name format. These formats are returned as: \n\n  0 is the last name, then the first name\n\n  1 is the first name, then the last name\n\n  2 is the last name, then the preferred name\n\n  3 is the preferred name, then the last name\n\n  4 is the last name, then the first name's initial\n\n  5 is the first name's initial, then the last name\n\n  6 is the last name, then the preferred name's initial \n  \n  7 is the preferred name's initial, then the last name\n\n  8 is the preferred name, then the last name's initial\n\n  9 is the first name, and then the last name's initial\n      \n      ",
        "operationId": "List-Employee-Benefits",
        "parameters": [
          {
            "name": "empNo",
            "in": "query",
            "description": "The employee number of the employee assigned to the user. When testing using 'Send a Test Request', this must be blank or 000001005.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmployeeBenefitDetails"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/EmployeeCompensation/PayStatement": {
      "get": {
        "tags": [
          "Employee Compensation"
        ],
        "summary": "Get Employee Pay Statement",
        "operationId": "Get-Employee-Pay-Statement",
        "parameters": [
          {
            "name": "runNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "empNo",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayStatementDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "x-internal": false
      }
    },
    "/v1/EmployeeDefaultsGroup": {
      "get": {
        "tags": [
          "Employee Defaults Group"
        ],
        "summary": "Get Employee Defaults Group",
        "operationId": "Get-Employee-Defaults-Group",
        "parameters": [
          {
            "name": "empNo",
            "in": "query",
            "description": "The employee number of the employee assigned to the user. When testing using 'Send a Test Request', this must be blank or 000001005.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeDefaultsGroup"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/EmployeeEarningCodes": {
      "get": {
        "tags": [
          "Employee Earning Codes"
        ],
        "summary": "List Employee Earning Codes",
        "operationId": "List-Employee-Earning-Codes",
        "parameters": [
          {
            "name": "empNo",
            "in": "query",
            "description": "The employee number of the employee assigned to the user. When testing using 'Send a Test Request', this must be blank or 000001005.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TextValuePair"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/EmployeeEmails": {
      "put": {
        "tags": [
          "Employee Emails"
        ],
        "summary": "Update Employee Email",
        "operationId": "Update-Employee-Email",
        "parameters": [
          {
            "name": "empNo",
            "in": "query",
            "description": "The employee number of the employee assigned to the user. When testing using 'Send a Test Request', this must be blank or 000001005.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EmployeeEmail"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EmployeeEmail"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EmployeeEmail"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": { }
            }
          }
        }
      }
    },
    "/v1/EmployeeGLInfo": {
      "get": {
        "tags": [
          "Employee GL Info"
        ],
        "summary": "Get Employee GL Info",
        "operationId": "Get-Employee-GL-Info",
        "parameters": [
          {
            "name": "empno",
            "in": "query",
            "description": "The employee number of the employee assigned to the user. When testing using 'Send a Test Request', this must be blank or 000001005.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/EmployeeJobData": {
      "get": {
        "tags": [
          "Employee Job Data"
        ],
        "summary": "Get Employee Job Data",
        "operationId": "Get-Employee-Job-Data",
        "parameters": [
          {
            "name": "empNo",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/EmployeeJobInfo": {
      "get": {
        "tags": [
          "Employee Job Info"
        ],
        "summary": "Get Employee Job Info",
        "operationId": "Get-Employee-Job-Info",
        "parameters": [
          {
            "name": "empNo",
            "in": "query",
            "description": "The employee number of the employee assigned to the user. When testing using 'Send a Test Request', this must be blank or 000001005.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeJobInfo"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/EmployeePayInfo": {
      "get": {
        "tags": [
          "Employee Pay Info"
        ],
        "summary": "Get Employee Pay Info",
        "operationId": "Get-Employee-Pay-Info",
        "parameters": [
          {
            "name": "empNo",
            "in": "query",
            "description": "The employee number of the employee assigned to the user. When testing using 'Send a Test Request', this must be blank or 000001005.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/EmployeePhoneNumber": {
      "put": {
        "tags": [
          "Employee Phone Number"
        ],
        "summary": "Update Employee Phone Number",
        "operationId": "Update-Employee-Phone-Number",
        "parameters": [
          {
            "name": "empNo",
            "in": "query",
            "description": "The employee number of the employee assigned to the user. When testing using 'Send a Test Request', this must be blank or 000001005.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PhoneNumber"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PhoneNumber"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PhoneNumber"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": { }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Employee Phone Number"
        ],
        "summary": "Delete Employee Phone Number",
        "operationId": "Delete-Employee-Phone-Number",
        "parameters": [
          {
            "name": "empNo",
            "in": "query",
            "description": "The employee number of the employee assigned to the user. When testing using 'Send a Test Request', this must be blank or 000001005.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PhoneNumber"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PhoneNumber"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PhoneNumber"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": { }
            }
          }
        }
      }
    },
    "/v1/EmployeePositionRate": {
      "get": {
        "tags": [
          "Employee Position Rates"
        ],
        "summary": "List Employee Position Rates",
        "operationId": "List-Employee-Position-Rates",
        "parameters": [
          {
            "name": "empNo",
            "in": "query",
            "description": "The employee number of the employee assigned to the user. When testing using 'Send a Test Request', this must be blank or 000001005.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PositionRates"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/EmployeePositionRate/Description": {
      "get": {
        "tags": [
          "Employee Position Rates"
        ],
        "summary": "Get Employee Position Rate",
        "operationId": "Get-Employee-Position-Rate",
        "parameters": [
          {
            "name": "empNo",
            "in": "query",
            "description": "The employee number of the employee assigned to the user. When testing using 'Send a Test Request', this must be blank or 000001005.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/EmployeePositions": {
      "get": {
        "tags": [
          "Positions"
        ],
        "summary": "List Employee Positions",
        "description": "Returns a list of the employee's primary and secondary positions. The format of Text in the response depends on the company web setting Lookup.Positions.\n\nA position will only be included if it is active on the Employee Profile, with an effective date in the past and a expiry date in the future, if these are entered on the employee.",
        "operationId": "List-Employee-Positions",
        "parameters": [
          {
            "name": "empNo",
            "in": "query",
            "description": "The employee number of the employee. When testing using 'Send a Test Request', you can use employee number 000001005.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "location",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TextValuePair"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Employees/Details": {
      "get": {
        "tags": [
          "Employees"
        ],
        "summary": "Get Employee Info",
        "operationId": "Get-Employee-Info",
        "parameters": [
          {
            "name": "empNo",
            "in": "query",
            "description": "The employee number of the employee. When testing using 'Send a Test Request', you can use employee number 000001005.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TextValuePair"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Employees/Photo": {
      "get": {
        "tags": [
          "Employees"
        ],
        "summary": "Get Employee Raw Photo",
        "operationId": "Get-Employee-Raw-Photo",
        "parameters": [
          {
            "name": "empNo",
            "in": "query",
            "description": "The employee number of the employee. When testing using 'Send a Test Request', you can use employee number 000001005.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "width",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "height",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": { }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/EmployeeVacationInfo": {
      "get": {
        "tags": [
          "Employee Vacation Info"
        ],
        "summary": "Get Employee Vacation Info",
        "operationId": "Get-Employee-Vacation-Info",
        "parameters": [
          {
            "name": "empNo",
            "in": "query",
            "description": "The employee number of the employee assigned to the user. When testing using 'Send a Test Request', this must be blank or 000001005.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeVacationInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/EmploymentHistory": {
      "post": {
        "tags": [
          "Employment History"
        ],
        "summary": "Add Employment History",
        "operationId": "Add-Employment-History",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmploymentHistory"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EmploymentHistory"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EmploymentHistory"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": { }
            }
          },
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/EmploymentStatus": {
      "get": {
        "tags": [
          "Employment Status"
        ],
        "summary": "List Employment Statuses",
        "description": "Returns a list of the defined Employment Status codes. The format of Text in the response depends on the company web setting Lookup.EmploymentStatus.\n\nIn Avanti, these are used to manage and classify employees. For example, an employment status code may be used to indicate that an employee is on leave.",
        "operationId": "List-Employment-Statuses",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TextValuePair"
                  }
                },
                "examples": {
                  "Example": {
                    "value": [
                      {
                        "text": "01 - Working",
                        "value": "01"
                      },
                      {
                        "text": "02 - Training",
                        "value": "02"
                      },
                      {
                        "text": "03 - On Leave",
                        "value": "03"
                      },
                      {
                        "text": "04 - Vacation Leave",
                        "value": "04"
                      },
                      {
                        "text": "05 - Health/Medical Leave",
                        "value": "05"
                      },
                      {
                        "text": "07 - Accident Leave",
                        "value": "07"
                      },
                      {
                        "text": "08 - Discipline Leave",
                        "value": "08"
                      },
                      {
                        "text": "09 - Sabbatical Leave",
                        "value": "09"
                      },
                      {
                        "text": "10 - Maternity",
                        "value": "10"
                      },
                      {
                        "text": "11 - Terminated",
                        "value": "11"
                      },
                      {
                        "text": "12 - Retired",
                        "value": "12"
                      },
                      {
                        "text": "17 - Volunteers",
                        "value": "17"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/GLAccounts": {
      "get": {
        "tags": [
          "GLs"
        ],
        "summary": "List GL Accounts",
        "operationId": "List-GL-Accounts",
        "parameters": [
          {
            "name": "segmentNo",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "The number of entries returned.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of entries to skip.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Only pay statements that match the number entered will be returned. Pay Statements will match based on the values in the following fields:  PayEndingDate, ChequeNo, ChequeDate, Earnings, Deductions, Benefits, NetPay",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mask",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectAccount",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/GLAccounts/Description": {
      "get": {
        "tags": [
          "GLs"
        ],
        "summary": "Get GL Full Account Description",
        "operationId": "Get-GL-Full-Account-Description",
        "parameters": [
          {
            "name": "accountValues",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlAccountDescription"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/GLBenefitGroups": {
      "get": {
        "tags": [
          "GLs"
        ],
        "summary": "List GL Benefit Groups",
        "operationId": "List-GL-Benefit-Groups",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TextValuePair"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/GLGroups": {
      "get": {
        "tags": [
          "GLs"
        ],
        "summary": "List GL Groups",
        "description": "Returns a list of GL Groups. The format of Text in the response depends on the company web setting Lookup.GlEarnGroups.\n\nIn Avanti, GL Groups provide the ability to expense earning amounts to multiple G/L accounts.",
        "operationId": "List-GL-Groups",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TextValuePair"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/GLProjectAccounts": {
      "get": {
        "tags": [
          "GLs"
        ],
        "summary": "List GL Project and Phases",
        "description": "Returns a list of the Project and Phase Accounts. \n\n**GL Project Filter**\n\nProjects returned are filtered based on the account and name when using a filter. \n- Returns projects with the filter value at the beginning of the account. \n- Returns projects with the filter value anywhere in the name. \n\n\n",
        "operationId": "List-GL-Project-Accounts",
        "parameters": [
          {
            "name": "take",
            "in": "query",
            "description": "The number of accounts to display.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of accounts to skip.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filters projects based on the account number and description. Returns all projects like the value entered. ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "If provided, only project accounts with a matching type are returned.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mask",
            "in": "query",
            "description": "If provided, only project accounts matching the mask provided are returned.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "active",
            "in": "query",
            "description": "If True, only active project accounts are returned; if False, inactive accounts are returned. If blank, active and inactive accounts are returned.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GlProjectSegment"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "GLs"
        ],
        "summary": "Add GL Project Accounts",
        "description": "Create new Accounts for the Project Segment. This cannot create Major, Other, or Phase Segments.",
        "operationId": "Add-GL-Project-Account",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GlProjectSegmentRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GlProjectSegmentRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GlProjectSegmentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/GLProjectAccounts/{account}": {
      "delete": {
        "tags": [
          "GLs"
        ],
        "summary": "Delete GL Project Accounts",
        "description": "Permanently delete a GL Account for the Project Segment. This cannot delete Major, Other, or Phase Segments.",
        "operationId": "Delete-GL-Project-Account",
        "parameters": [
          {
            "name": "account",
            "in": "path",
            "description": "The project account you are deleting.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "account",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/v1/GLSegment": {
      "post": {
        "tags": [
          "GLs"
        ],
        "summary": "Add GL Account",
        "description": "Create new GL Accounts for Major, Other, or Phase Segments. This cannot create Project Accounts. ",
        "operationId": "Add-New-GL-Account-Data",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "./main.v1.json#/components/schemas/GlSegment"
              },
              "examples": {
                "example-1": {
                  "value": {
                    "segmentNo": 1,
                    "account": "2030",
                    "description": "EHT Payable",
                    "abbreviation": "EHTPay",
                    "type": "A",
                    "mask": "2030-####-#####-****-****",
                    "validationTypes": "A A",
                    "active": true,
                    "useProjectAccount": true,
                    "statAccount": "string",
                    "exportValue": "20300"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./main.v1.json#/components/schemas/GlSegment"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "GLs"
        ],
        "summary": "Update GL Account",
        "description": "Update GL Accounts for Major, Other, or Phase Segments. This cannot update Project Accounts. ",
        "operationId": "Update-GL-Account-Data",
        "requestBody": {
          "content": {
            "application/json": null
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": { }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "GLs"
        ],
        "summary": "Delete GL Account",
        "description": "Permanently delete GL Accounts for Major, Other, or Phase Segments. This cannot delete Project Accounts. ",
        "operationId": "Delete-GL-Account-Data",
        "parameters": [
          {
            "name": "segmentNo",
            "in": "query",
            "description": "The number of the GL segment with the account your deleting.  ",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "account",
            "in": "query",
            "description": "The GL account. ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/GLSetup": {
      "get": {
        "tags": [
          "GLs"
        ],
        "summary": "Get GL Setup",
        "operationId": "Get-GL-Setup",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlSetup"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/GridCodes": {
      "get": {
        "tags": [
          "Grid Codes"
        ],
        "summary": "List Grid Codes",
        "description": "Returns a list of the Rate Grid Codes. The format of Text in the response depends on the company web setting Lookup.GridCodes.\n\nRate Grids are defined rate structures that can be applied to employees based on position or earnings, such a shift premiums and travel rates. Additionally, future rates can be defined for each rate grid.",
        "operationId": "List-Grid-Codes",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TextValuePair"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/JobStatus": {
      "get": {
        "tags": [
          "Job Status"
        ],
        "summary": "List Job Statuses",
        "description": "Returns a list of Job Status. The format of Text in the response depends on the company web setting Lookup.JobStatus.\n\nThese are used to classify employees on their job status, such as Casual vs Contract workers.",
        "operationId": "List-Job-Statuses",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TextValuePair"
                  }
                },
                "examples": {
                  "Example": {
                    "value": [
                      {
                        "text": "C - Casual",
                        "value": "C"
                      },
                      {
                        "text": "F - Full time",
                        "value": "F"
                      },
                      {
                        "text": "P - Part time",
                        "value": "P"
                      },
                      {
                        "text": "T - Temporary",
                        "value": "T"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Locations": {
      "get": {
        "tags": [
          "Locations"
        ],
        "summary": "List Locations",
        "description": "Returns a list of the location codes. The format of Text in the response depends on the company web setting Lookup.Location.\n\nLocation codes are used throughout Avanti to identify employee locations, departments, zones, units, etc.",
        "operationId": "List-Locations",
        "parameters": [
          {
            "name": "activeStatus",
            "in": "query",
            "description": "If 0, returns All Locations. If 1, returns Active Locations. If 2, returns Inactive Locations. If blank, returns All Locations.",
            "schema": {
              "multipleOf": 1,
              "maximum": 2,
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TextValuePair"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/NewHire": {
      "post": {
        "tags": [
          "New Hire"
        ],
        "summary": "Add New Hire",
        "operationId": "Add-New-Hire",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewHire"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/NewHire"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/NewHire"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewHire"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewHire"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/NewHire/DefaultGroup": {
      "get": {
        "tags": [
          "New Hire"
        ],
        "summary": "Get Default Group Values and Setup",
        "operationId": "Get-Default-Group-Values-and-Setup",
        "parameters": [
          {
            "name": "defaultGroupCode",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultGroupSetupResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Notification/{id}": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Get a Notification",
        "description": "Returns the details of the notification for the employee attached to the Avanti User.",
        "operationId": "Get-a-Notification",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the notification you would like to get the data for.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notification"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Notifications": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "List Notifications",
        "description": "Returns a list of notifications for the employee attached to the Avanti User. \n\nIf no request parameters are sent, the 20 most recent notifications are returned.",
        "operationId": "List-Notifications",
        "parameters": [
          {
            "name": "types",
            "in": "query",
            "description": "The IDs of the notification types you would like to get the data for. If blank, notifications for all types are returned.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "notificationId",
            "in": "query",
            "description": "Used with the newer parameter to determine which notifications to return. \nReturns the notifications newer or older than the notificationId. \n\nIf blank, the most recent notifications are returned.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "newer",
            "in": "query",
            "description": "Used with the notificationId parameter to determine which notifications to return. \nIf True or blank, notifications more recent than the notificationId are returned. \nIf false, notifications older than the notificationId are returned.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "unreadOnly",
            "in": "query",
            "description": "If true, only unread notifications are returned. If false, all notifications are returned. Default is false.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Only notifications that contain this text in the subject or content are returned.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastLoaded",
            "in": "query",
            "description": "Returns a list of notifications with a changed read status after this date. The date in ISO 8601 format.\nThese notifications are returned in read and unread. This can be used address caching when users access notifications across different devices.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "The number of entries returned.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetNotifications"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Notifications"
        ],
        "summary": "Mark Notifications as Read",
        "operationId": "Mark-Notifications-as-Read",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostNotifications"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PostNotifications"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PostNotifications"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": { }
            }
          },
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Notifications/MarkAllRead": {
      "post": {
        "tags": [
          "Notifications"
        ],
        "summary": "Mark all Notifications as Read",
        "operationId": "Mark-all-Notifications-as-Read",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MarkAllReadRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MarkAllReadRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MarkAllReadRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": { }
            }
          }
        }
      }
    },
    "/v1/Notifications/NotPushed": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "List Unpushed Notifications",
        "operationId": "List-Unpushed-Notifications",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Notification"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Notifications/RegisterChannel": {
      "put": {
        "tags": [
          "Notifications"
        ],
        "summary": "Register Push Notification Channel",
        "operationId": "Register-Push-Notification-Channel",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PushNotificationRegistration"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PushNotificationRegistration"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PushNotificationRegistration"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": { }
            }
          }
        }
      }
    },
    "/v1/Notifications/Unread": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Get Unread Notification Count",
        "operationId": "Get-Unread-Notification-Count",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/NotificationSettings": {
      "get": {
        "tags": [
          "Notification Settings"
        ],
        "summary": "List Notification Settings",
        "description": "This returns a list of all the notification types and their setup. \n\nThe setup includes whether: \n- This type of notification is used.  \n- Employees will receive these notifications by default. \n- Employees can disable these notifications.",
        "operationId": "List-Notification-Settings",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetNotificationTypeSettings"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Notification Settings"
        ],
        "summary": "Update Notification Settings",
        "description": "Update whether the employee is receiving notifications for the notification type. The employee is always the employee attached to the user.",
        "operationId": "Update-Notification-Settings",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NotificationSettingState"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NotificationSettingState"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NotificationSettingState"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": { }
            }
          }
        }
      }
    },
    "/v1/PayCodes": {
      "get": {
        "tags": [
          "Pay Codes"
        ],
        "summary": "List Pay Codes",
        "description": "Returns a list of the pay codes. The format of Text in the response depends on the company web setting Lookup.PayCode.\n\nIn Avanti, pay codes are used throughout Time and Attendance to determine the earning code for the time, whether the entry is from/to times or units/units of measure. and whether punches are used for the time.",
        "operationId": "List-Pay-Codes",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TextValuePair"
                  }
                },
                "examples": {
                  "Example": {
                    "value": [
                      {
                        "text": "BREAK - Break Pay",
                        "value": "BREAK"
                      },
                      {
                        "text": "BREAKNP - Break Unpaid",
                        "value": "BREAKNP"
                      },
                      {
                        "text": "OTBANK - Bank Overtime",
                        "value": "OTBANK"
                      },
                      {
                        "text": "OTPAYOUT - Pay Overtime",
                        "value": "OTPAYOUT"
                      },
                      {
                        "text": "REGULAR - Regular Time",
                        "value": "REGULAR"
                      },
                      {
                        "text": "SICK - Sick",
                        "value": "SICK"
                      },
                      {
                        "text": "TRAINING - Training Time",
                        "value": "TRAINING"
                      },
                      {
                        "text": "TRAVEL - Travel Time",
                        "value": "TRAVEL"
                      },
                      {
                        "text": "VACATION - Vacation Time",
                        "value": "VACATION"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/PayCodesWithDetails": {
      "get": {
        "tags": [
          "Pay Codes"
        ],
        "summary": "List Pay Code Details",
        "description": "Returns a list of the pay codes with their setup details. \n\nIn Avanti, pay codes are used throughout Time and Attendance to determine the earning code for the time, whether the entry is from/to times or units/units of measure. and whether punches are used for the time.",
        "operationId": "List-all-Pay-Codes-with-details",
        "parameters": [
          {
            "name": "take",
            "in": "query",
            "description": "The number of entries returned.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of entries to skip.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PayCode"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/PayGroup/{payGroup}": {
      "get": {
        "tags": [
          "Pay Groups"
        ],
        "summary": "Get Pay Group",
        "operationId": "Get-Pay-Group",
        "parameters": [
          {
            "name": "payGroup",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": { }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/PayGroups": {
      "get": {
        "tags": [
          "Pay Groups"
        ],
        "summary": "List Pay Groups",
        "description": "Returns a list of pay groups. The format of Text in the response depends on the company web setting Lookup.PayGroups.\n\nIn Avanti, pay groups determine many of the pay and tax calculations factors, such as EI rates, CPP rates, the CRA business number, Quebec Employer ID, etc. They are assigned to employees that are paid at the same time and share the same pay period factors.",
        "operationId": "List-Pay-Groups",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TextValuePair"
                  }
                },
                "examples": {
                  "Example": {
                    "value": [
                      {
                        "text": "001 - Part-Time Bi-Weekly",
                        "value": "001"
                      },
                      {
                        "text": "002 - Full-Time Bi-Weekly",
                        "value": "002"
                      },
                      {
                        "text": "010 - Semi-Monthly",
                        "value": "010"
                      },
                      {
                        "text": "011 - Contract Semi-Monthly",
                        "value": "011"
                      },
                      {
                        "text": "012 - Quebec Semi-Monthly",
                        "value": "012"
                      },
                      {
                        "text": "020 - Executives",
                        "value": "020"
                      },
                      {
                        "text": "099 - Volunteers",
                        "value": "099"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/PayrollDataImport": {
      "post": {
        "tags": [
          "Payroll Data"
        ],
        "summary": "Add Payroll Data",
        "description": "Create payroll time for your employees. This incorporates payroll data prepared by other systems into your Avanti pay.\n\nEvery time this endpoint is used, a new payroll batch is created unless you import it into a staging table. If you import to a staging table, all entries will get created into a batch when import from a table is selected in Payroll Data Entry.\n\nThe API User must have user group access to the employee's pay group to import entries for an employee. \n\n",
        "operationId": "Add-Payroll-Data",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayrollDataImport"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PayrollDataImport"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PayrollDataImport"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportPayrollDataResult"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportPayrollDataResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/PayStatements": {
      "get": {
        "tags": [
          "Pay Statements"
        ],
        "summary": "List Pay Statements",
        "description": "Returns a list of pay statements, with the pay totals, for the employee.",
        "operationId": "List-Pay-Statements",
        "parameters": [
          {
            "name": "take",
            "in": "query",
            "description": "The number of entries returned.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of entries to skip.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "empNo",
            "in": "query",
            "description": "The number for the employee you'd like to gather pay statement information for. If blank, information for the employee assigned to the user is returned. ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "run",
            "in": "query",
            "description": "Run numbers greater than the run number specified will be returned. When testing using 'Send a Test Request', the lowest run number is 1998 for the employee.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "Determines the order of the statements returned, in conjunction with sortDesc. \nEnter what determines the order from the following options: PayEndingDate, ChequeNo, ChequeDate, Earnings, Deductions, Benefits, NetPay",
            "schema": {
              "type": "string",
              "default": "PayEndingDate"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Only pay statements that match the number entered will be returned. Pay Statements will match based on the values in the following fields:  PayEndingDate, ChequeNo, ChequeDate, Earnings, Deductions, Benefits, NetPay",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "sortDesc",
            "in": "query",
            "description": "When true, statements will be in descending order based on the sortOrder. When false, statements will be in ascending order. Default is true.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PayStatement"
                  }
                },
                "examples": {
                  "Example": {
                    "value": [
                      {
                        "bankNo": "01",
                        "benefits": 1998.84,
                        "chequeDate": "2020-08-31T00:00:00.0000000+00:00",
                        "chequeNo": "038612",
                        "deductions": 1468.77,
                        "earnings": 3744,
                        "empNo": "000001005",
                        "keyExtension": 1,
                        "netPay": 2275.23,
                        "payEndingDate": "2020-08-31T00:00:00.0000000+00:00",
                        "runNumber": 2003
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/PayStatements/Cancelled": {
      "get": {
        "tags": [
          "Employee Pay Statements"
        ],
        "summary": "List Cancelled Pay Statements",
        "operationId": "List-Cancelled-Pay-Statements",
        "parameters": [
          {
            "name": "minRun",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "maxRun",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "empNo",
            "in": "query",
            "description": "The employee number of the employee. When testing using 'Send a Test Request', you can use employee number 000001005.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/PayStatements/PDF": {
      "get": {
        "tags": [
          "Pay Statements"
        ],
        "summary": "Get PDF Pay Statement",
        "description": "Returns a byte array of the pay statement with a content type of application/pdf for the employee assigned to the current Avanti User.",
        "operationId": "Get-PDF-Pay-Statement",
        "parameters": [
          {
            "name": "runNumber",
            "in": "query",
            "description": "The pay statement PDF will be returned for this run number. When testing using 'Send a Test Request', the run numbers are 1998, 2000, 2002, 2003 for this employee.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "empNo",
            "in": "query",
            "description": "The employee number of the employee assigned to the user. When testing using 'Send a Test Request', this must be blank or 000001005.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "requirePassword",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": { }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/PayStatements/Statement": {
      "get": {
        "tags": [
          "Pay Statements"
        ],
        "summary": "Get Pay Statement",
        "operationId": "Get-Pay-Statement",
        "parameters": [
          {
            "name": "runNumber",
            "in": "query",
            "description": "The pay statement PDF will be returned for this run number. When testing using 'Send a Test Request', the run numbers are 1998, 2000, 2002, 2003 for this employee.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "empNo",
            "in": "query",
            "description": "The employee number of the employee assigned to the user. When testing using 'Send a Test Request', this must be blank or 000001005.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayStatementDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/PersonalInfo": {
      "get": {
        "tags": [
          "Employee Personal Info"
        ],
        "summary": "Get Employee Personal Info",
        "description": "",
        "operationId": "Get-Employee-Personal-Info",
        "parameters": [
          {
            "name": "empNo",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Employee"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Employee Personal Info"
        ],
        "summary": "Update Employee Personal Info",
        "description": "Update the employee's personal information in Avanti.\n\nThe best practice is to do a Get Personal Info, update the required values, then do a Put Personal Info. You can adjust the following information for the employee. \n\n- Given Name, Surname, Initial, Preferred Name, Previous Surname\n- Address Line 1, Address Line 2, City, Prov, Country, Postal Code\n- Birth Date, First Language, Gender, Email\n- Phone Type 1, Phone Number 1, Phone Type 2, Phone Number 2, Phone Type 3, Phone Number 3, Phone Type 4, Phone Number 4\n- Modified Date, Modified Time\n\nAll updates will log in the employee change log. \n",
        "operationId": "Update-Employee-Personal-Info",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Employee"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Employee"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Employee"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "examples": {
                  "example-1": { }
                }
              }
            }
          }
        }
      }
    },
    "/v1/PersonalInfo/EmployeeAdditionalInfo": {
      "get": {
        "tags": [
          "Employee Additional Information"
        ],
        "summary": "List Employee Additional Information",
        "description": "Returns an employee's information for the employee information unique to your company’s setup.\n\nGets the additional fields set up for figures, dates, and text information on Payroll Parameters's Profile Field Names tab. Only information included on the Avanti Self-Service Portal are returned. ",
        "operationId": "List-Employee-Additional-Information",
        "parameters": [
          {
            "name": "empNo",
            "in": "query",
            "description": "The employee number assigned to the employee.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeAdditionalInfo"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Employee Additional Information"
        ],
        "summary": "Update Additional Information",
        "description": "Update the employee’s information that’s unique to your company’s setup.\n\nYou can only update the information included on the Avanti Self-Service Portal. The API user must have access to view and edit the field in the Additional Information on the New Avanti Experience. ",
        "operationId": "Update-Additional-Information",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeeAdditionalInfo"
              },
              "examples": {
                "example-1": {
                  "value": {
                    "empNo": "string",
                    "dedFig": [
                      {
                        "text": 0,
                        "value": 0
                      }
                    ],
                    "otherDate": [
                      {
                        "text": 0,
                        "value": "2019-08-24T14:15:22.0000000+00:00"
                      }
                    ],
                    "otherText": [
                      {
                        "text": 0,
                        "value": "string"
                      }
                    ],
                    "textFieldLabels": [
                      {
                        "text": "string",
                        "value": "string"
                      }
                    ],
                    "dateFieldLabels": [
                      {
                        "text": "string",
                        "value": "string"
                      }
                    ],
                    "figureFieldLabels": [
                      {
                        "text": "string",
                        "value": "string"
                      }
                    ]
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeeAdditionalInfo"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeeAdditionalInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/PersonalInfo/EmployeeAdditionalInfoSetup": {
      "get": {
        "tags": [
          "Employee Additional Information"
        ],
        "summary": "Additional Information Setup",
        "description": "Returns the setup information for the employee information unique to your company’s setup.\n\nGets the additional fields set up for figures, dates, and text information on the Profile Field Names tab in Payroll Parameters. Only information included on the Avanti Self-Service Portal are returned. ",
        "operationId": "Additional-Inforamtion-Setup",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeAdditionalInfoSetupResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/PersonalInfo/Photo": {
      "get": {
        "tags": [
          "Employee Personal Info"
        ],
        "summary": "Get Employee Photo",
        "operationId": "Get-Employee-Photo",
        "parameters": [
          {
            "name": "empNo",
            "in": "query",
            "description": "The employee number of the employee. When testing using 'Send a Test Request', you can use employee number 000001005.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "width",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "height",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Employee Personal Info"
        ],
        "summary": "Update Employee Photo",
        "description": "Add or replace your employees' photos on the Employee Profile and throughout ASSP.\nFiles larger than 25MB will be compressed to the allowed size. ",
        "operationId": "Update-Employee-Photo",
        "parameters": [
          {
            "name": "empNo",
            "in": "query",
            "description": "The employee number of the employee. When testing using 'Send a Test Request', you can use employee number 000001005.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/File"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/File"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/File"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": { }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Employee Personal Info"
        ],
        "summary": "Delete Employee Photo",
        "operationId": "Delete-Employee-Photo",
        "parameters": [
          {
            "name": "empNo",
            "in": "query",
            "description": "The employee number of the employee. When testing using 'Send a Test Request', you can use employee number 000001005.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": { }
            }
          }
        }
      }
    },
    "/v1/Position": {
      "get": {
        "tags": [
          "Positions"
        ],
        "summary": "Get Position Details",
        "description": "",
        "operationId": "Get-Position-Details",
        "parameters": [
          {
            "name": "positionCode",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PositionDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Positions": {
      "get": {
        "tags": [
          "Positions"
        ],
        "summary": "List Positions",
        "description": "Returns a list of all the position codes. The format of Text in the response depends on the company web setting Lookup.Positions.",
        "operationId": "List-Positions",
        "parameters": [
          {
            "name": "includeInactive",
            "in": "query",
            "description": "Determines whether all positions will be returned. If true, active and inactive employees will be included in the response. If false, only active employees will be included in the response.  Default is false.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "masculine",
            "in": "query",
            "description": "Determines which French position description is returned. If true, the masculine description will be returned. If false, the feminine description will be returned.  By default, this is false.  A French description will only be included when a French access token is provided.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TextValuePair"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/RateGrids": {
      "get": {
        "tags": [
          "Rate Grids"
        ],
        "summary": "List of Rate Grids",
        "operationId": "List-of-Rate-Grids",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RateGrid"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Reporter": {
      "post": {
        "tags": [
          "Reporter"
        ],
        "summary": "Get Report Data With Options",
        "description": "This will return the contents of the specified report based on the options selected. \n\nUsing this endpoint, additional report options can be included in the request body to ensure only the information you require is included in the results. If you are only filtering the report result by a date range and employee range, please use the Get Report Data endpoint.   \n\nYou can try the Reporter endpoint by using the ID WageSample in 'Send a Test Request'. \n\n<!-- theme: info -->\n>##### Additional Information\n>The report must be web-enabled, and the API User must have Print access to the report. <br> <br> Want additional information on setting up a report? Go to [Custom Endpoints.](https://avanti.stoplight.io/docs/avanti-api/ZG9jOjgxNDM2NzE-custom-endpoints) to learn more.\n\n<b>Employee Access</b><br>\nThe API User must have pay group and Time Entry role permissions to return an employee's information. Role permissions aren't restricted based on inactive positions; if the user has access to an employee's inactive position, the employee's information is returned. ",
        "operationId": "Get-Report-Data-With-Options",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportOptions"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportOptions"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ReportOptions"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok. (Returns a dynamic object created from the report. For more informmation, go to https://avanti.stoplight.io/docs/avanti-api/ZG9jOjgxNDM2NzE-custom-endpoints)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    { },
                    { }
                  ]
                },
                "examples": {
                  "Example": {
                    "value": [
                      {
                        "employeeNo": "000000011",
                        "payGroup": "001",
                        "position": "3000",
                        "initialHireDate": "1992-03-06T00:00:00.0000000+00:00"
                      },
                      {
                        "employeeNo": "000000012",
                        "payGroup": "001",
                        "position": "9001",
                        "initialHireDate": "1990-02-28T00:00:00.0000000+00:00",
                        "terminationDate": "2019-08-01T00:00:00.0000000+00:00"
                      },
                      {
                        "employeeNo": "000000013",
                        "payGroup": "001",
                        "position": "9001",
                        "initialHireDate": "2000-01-01T00:00:00.0000000+00:00"
                      },
                      {
                        "employeeNo": "000000014",
                        "payGroup": "999",
                        "position": "9003",
                        "initialHireDate": "1990-01-01T00:00:00.0000000+00:00"
                      },
                      {
                        "employeeNo": "000000015",
                        "payGroup": "003",
                        "position": "3000",
                        "initialHireDate": "2015-01-27T00:00:00.0000000+00:00"
                      }
                    ]
                  }
                }
              }
            }
          },
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Reporter/{id}": {
      "get": {
        "tags": [
          "Reporter"
        ],
        "summary": "Get Report Data",
        "description": "This will return the contents of the specified report based.\n\nUsing this endpoint, the information returned can be filtered based on  date range and employee range. If you need the report to filtered by additional options, please use the Get Report Data With Options endpoint.  \n\nYou can try the Reporter endpoint by using the ID  WageSample in 'Send a Test Request'. \n\n<!-- theme: info -->\n>##### Additional Information\n>The report must be web-enabled, and the API User must have Print access to the report. <br> <br> Want additional information on setting up a report? Go to [Custom Endpoints.](https://avanti.stoplight.io/docs/avanti-api/ZG9jOjgxNDM2NzE-custom-endpoints) to learn more.\n\n<b>Employee Access</b><br>\nThe API User must have pay group and Time Entry role permissions to return an employee's information. Role permissions aren't restricted based on inactive positions; if the user has access to an employee's inactive position, the employee's information is returned. ",
        "operationId": "Get-Report-Data",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the notification you would like to get the data for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromEmpNo",
            "in": "query",
            "description": "The first employee number in the range of employees employees used to filter the data.This is required if toEmpNo is defined. If blank, returns data for all employees.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toEmpNo",
            "in": "query",
            "description": "The last employee in the range of employees used to filter the data. This is required if fromEmpNo is defined. If blank, returns data for all employees.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "The first date in the range of dates used to filter the data.This is required if toDate is defined. If blank, returns data for all dates.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "The last date in the range of dates used to filter the data. This is required if fromDate is defined. If blank, returns data for all dates.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "merge",
            "in": "query",
            "description": "If true, the options set on the report definition will be used. If false, the options on the report definition will be ignored.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok. (Returns a dynamic object created from the report. For more informmation, go to https://avanti.stoplight.io/docs/avanti-api/ZG9jOjgxNDM2NzE-custom-endpoints)",
            "content": {
              "application/json": {
                "examples": {
                  "Example": {
                    "value": [
                      {
                        "employeeNo": "000000011",
                        "payGroup": "001",
                        "position": "3000",
                        "initialHireDate": "1992-03-06T00:00:00.0000000+00:00"
                      },
                      {
                        "employeeNo": "000000012",
                        "payGroup": "001",
                        "position": "9001",
                        "initialHireDate": "1990-02-28T00:00:00.0000000+00:00",
                        "terminationDate": "2019-08-01T00:00:00.0000000+00:00"
                      },
                      {
                        "employeeNo": "000000013",
                        "payGroup": "001",
                        "position": "9001",
                        "initialHireDate": "2000-01-01T00:00:00.0000000+00:00"
                      },
                      {
                        "employeeNo": "000000014",
                        "payGroup": "999",
                        "position": "9003",
                        "initialHireDate": "1990-01-01T00:00:00.0000000+00:00"
                      },
                      {
                        "employeeNo": "000000015",
                        "payGroup": "003",
                        "position": "3000",
                        "initialHireDate": "2015-01-27T00:00:00.0000000+00:00"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ScheduleDataImport": {
      "post": {
        "tags": [
          "Schedule Import"
        ],
        "summary": "Add Schedules",
        "description": "Incorporate schedules prepared by other systems into your Avanti time with the Add Schedules endpoint. \n\nThe API User must have user group access to the pay group and time entry role permission for the employee to add schedules. \n\nIf there are any errors, no schedule entries are added. ",
        "operationId": "Import-Schedule-Entries",
        "parameters": [
          {
            "name": "replaceExisting",
            "in": "query",
            "description": "If true, schedules with a duplicate reference number replaces the original schedules. Otherwise, entries with duplicates won't be added. If left blank, this is false.   ",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "maxItems": 1000,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ScheduleEntryRequest"
                }
              }
            },
            "text/json": {
              "schema": {
                "maxItems": 1000,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ScheduleEntryRequest"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "maxItems": 1000,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ScheduleEntryRequest"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ScheduleTemplates": {
      "get": {
        "tags": [
          "Schedule Templates"
        ],
        "summary": "List Schedule Templates",
        "description": "Returns a list of the schedule templates. The format of Text in the response depends on the company web setting Lookup.ScheduleTemplates. \n\nIn Avanti, Schedule templates define the commonly used schedule rotations. These rotations can be used to create employee schedules automatically by rolling schedules forward or on demand by adding the schedule template for a specific day.",
        "operationId": "List-Schedule-Templates",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TextValuePair"
                  }
                },
                "examples": {
                  "Example": {
                    "value": [
                      {
                        "text": "00004000 - Days Standard",
                        "value": "000000003"
                      },
                      {
                        "text": "00004001 - Days Early / Late",
                        "value": "00004001"
                      },
                      {
                        "text": "00004002 - Afternoons Standard",
                        "value": "00004002"
                      },
                      {
                        "text": "00004003 - Afternoons Early / Late",
                        "value": "00004003"
                      },
                      {
                        "text": "00005001 - Evenings Standard",
                        "value": "00005001"
                      },
                      {
                        "text": "00006001 - Evenings Early / Late",
                        "value": "00006001"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Search": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Search",
        "description": "This returns a list of the menus that contain the text from the request in the:\n- Menu Description\n-  Menu URL\n- Program name",
        "operationId": "Search",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "Only menu that contain this text in the description, URL or program name are returned.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SearchResult"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/ShiftCodes": {
      "get": {
        "tags": [
          "Shift Codes"
        ],
        "summary": "List Shift Codes",
        "description": "Returns a list of the shift codes. \n\nIn Avanti, shift codes are used in Schedules and Time Cards to apply default from/to times, break rules and premium rules.",
        "operationId": "List-Shift-Codes",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TextValuePair"
                  }
                },
                "examples": {
                  "Example": {
                    "value": [
                      {
                        "text": "000000001 - Sleep Shift",
                        "value": "000000001"
                      },
                      {
                        "text": "000000002 - Awake Shift",
                        "value": "000000002"
                      },
                      {
                        "text": "10AM-6PM - 10:00 am - 6:00 pm",
                        "value": "10AM-6PM"
                      },
                      {
                        "text": "11AM-7PM - 11:00 am - 7:00 pm",
                        "value": "11AM-7PM"
                      },
                      {
                        "text": "12PM-8PM - 12:00 pm - 8:00 pm",
                        "value": "12PM-8PM"
                      },
                      {
                        "text": "1PM-9PM - 1:00 pm - 9:00 pm",
                        "value": "1PM-9PM"
                      },
                      {
                        "text": "2PM-6PM - 2:00 pm - 6:00 pm",
                        "value": "2PM-6PM"
                      },
                      {
                        "text": "4PM-10PM - 4:00 pm - 10:00 pm",
                        "value": "4PM-10PM"
                      },
                      {
                        "text": "5PM-11PM - 5:00 pm - 11:00 pm",
                        "value": "5PM-11PM"
                      },
                      {
                        "text": "6PM-12AM - 6:00 pm - 12:00 am",
                        "value": "6PM-12AM"
                      },
                      {
                        "text": "7AM - 3PM - 7:00 am - 3:00 pm",
                        "value": "7AM - 3PM"
                      },
                      {
                        "text": "8AM - 4PM - 8:00 am - 4:00 pm",
                        "value": "8AM - 4PM"
                      },
                      {
                        "text": "9AM - 5PM - 9:00 am - 5:00 pm",
                        "value": "9AM - 5PM"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/TaskIDs": {
      "get": {
        "tags": [
          "Task IDs"
        ],
        "summary": "List Task IDs",
        "description": "Returns a list of the defined tasks.\n\nIn Avanti, Task Ids are used throughout time entry. These are for tracking purposes and are defined to suit your organizations needs.",
        "operationId": "List-Task-IDs",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TextValuePair"
                  }
                },
                "examples": {
                  "Example": {
                    "value": [
                      {
                        "text": "Hamilton Health Sciences",
                        "value": "0000001"
                      },
                      {
                        "text": "Calgary Health Region",
                        "value": "0000002"
                      },
                      {
                        "text": "BC Government",
                        "value": "0000004"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/TimeDataImport": {
      "post": {
        "tags": [
          "Time Data"
        ],
        "summary": "Add Time Data Entries",
        "description": "Create time data entries for your employees. \n\nThis can be used when you have time data information prepared by other systems that you wish to incorporate into Time and Attendance module in Avanti.\n\nIf some time data entries don't pass validation, a message is returned and the entries won't be imported. All valid entries are created.\n\nImportant Information - Break rules don’t apply to added time data entries. ",
        "operationId": "Add-Time-Data-Entries",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkTimeDataImportModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkTimeDataImportModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BulkTimeDataImportModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportClockDataResult"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportClockDataResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/TimeManagement/{viewId}/{templateId}": {
      "get": {
        "tags": [
          "Time Management"
        ],
        "summary": "List Time Entries",
        "operationId": "List-Time-Entries",
        "parameters": [
          {
            "name": "viewId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "templateId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "empNo",
            "in": "query",
            "description": "The employee number of the employee. When testing using 'Send a Test Request', you can use employee number 000001005.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 30
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "before",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimeEntry"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/TimeManagement/AvailableShifts": {
      "get": {
        "tags": [
          "Time Management"
        ],
        "summary": "List Available Shifts",
        "operationId": "List-Available-Shifts",
        "parameters": [
          {
            "name": "take",
            "in": "query",
            "description": "The number of entries returned.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "expiryDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "viewId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "templateId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pool"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/TimeManagement/CancelPickups": {
      "put": {
        "tags": [
          "Time Management"
        ],
        "summary": "Cancel Pickup Requests",
        "operationId": "Cancel-Pickup-Requests",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Result"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/TimeManagement/CancelPools": {
      "put": {
        "tags": [
          "Time Management"
        ],
        "summary": "Cancel Pooled Entries",
        "operationId": "Cancel-Pooled-Entries",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Result"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/TimeManagement/Comment": {
      "post": {
        "tags": [
          "Time Management"
        ],
        "summary": "Create a Comment",
        "operationId": "Create-a-Comment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PoolComment"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PoolComment"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PoolComment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": { }
            }
          }
        }
      }
    },
    "/v1/TimeManagement/EmployeeAcceptance": {
      "post": {
        "tags": [
          "Time Management"
        ],
        "summary": "List Employee Acceptance",
        "operationId": "List-Employee-Acceptance",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EmployeeAcceptance"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EmployeeAcceptance"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EmployeeAcceptance"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Result"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/TimeManagement/ExchangeOffers": {
      "get": {
        "tags": [
          "Time Management"
        ],
        "summary": "List Exchange Offers",
        "operationId": "List-Exchange-Offers",
        "parameters": [
          {
            "name": "poolId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PoolOfferInfo"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/TimeManagement/GetDetailsForPooledSchedule": {
      "get": {
        "tags": [
          "Time Management"
        ],
        "summary": "Get Pooled Schedule",
        "operationId": "Get-Pooled-Schedule",
        "parameters": [
          {
            "name": "entryId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "scheduleEntryId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isPool",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeEntry"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/TimeManagement/Pickup": {
      "post": {
        "tags": [
          "Time Management"
        ],
        "summary": "Create a Pickup Request",
        "operationId": "Create-a-Pickup-Request",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PickupRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PickupRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PickupRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      }
    },
    "/v1/TimeManagement/PickupEntryDetails": {
      "get": {
        "tags": [
          "Time Management"
        ],
        "summary": "Get Pickup Entry",
        "operationId": "Get-Pickup-Entry",
        "parameters": [
          {
            "name": "pickupEntryId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "poolEntryId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "viewId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "templateId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pickup"
                }
              }
            }
          }
        }
      }
    },
    "/v1/TimeManagement/PickupRequests": {
      "get": {
        "tags": [
          "Time Management"
        ],
        "summary": "List Pickup Requests",
        "operationId": "List-Pickup-Requests",
        "parameters": [
          {
            "name": "take",
            "in": "query",
            "description": "The number of entries returned.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "expiryDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "requestType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/PoolRequestType"
            }
          },
          {
            "name": "viewId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "templateId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pool"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/TimeManagement/PooledRequests": {
      "get": {
        "tags": [
          "Time Management"
        ],
        "summary": "List Pool Requests",
        "operationId": "List-Pool-Requests",
        "parameters": [
          {
            "name": "postType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/PoolRequestType"
            }
          },
          {
            "name": "viewId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "templateId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expiryDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "empNo",
            "in": "query",
            "description": "The employee number of the employee assigned to the user. When testing using 'Send a Test Request', this must be blank or 000001005.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "The number of entries returned.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pool"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/TimeManagement/PoolEntryDetails": {
      "get": {
        "tags": [
          "Time Management"
        ],
        "summary": "Get Pool Entry",
        "operationId": "Get-Pool-Entry",
        "parameters": [
          {
            "name": "scheduleEntryId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "viewId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "templateId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pool"
                }
              }
            }
          }
        }
      }
    },
    "/v1/TimeManagement/PostSchedules": {
      "post": {
        "tags": [
          "Time Management"
        ],
        "summary": "Post a Schedule",
        "operationId": "Post-a-Schedule",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PostRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PostRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": { }
            }
          },
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/TimeManagement/Templates": {
      "get": {
        "tags": [
          "Time Management"
        ],
        "summary": "List Time Entry Templates",
        "operationId": "List-Time-Entry-Templates",
        "parameters": [
          {
            "name": "empNo",
            "in": "query",
            "description": "The employee number of the employee assigned to the user. When testing using 'Send a Test Request', this must be blank or 000001005.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "viewId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimeEntryTemplate"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/TimeManagement/TimeWorked": {
      "get": {
        "tags": [
          "Time Management"
        ],
        "summary": "Get Time Worked",
        "operationId": "Get-Time-Worked",
        "parameters": [
          {
            "name": "templateId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "viewId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "refresh",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "currentDateTime",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWorkedHours"
                }
              }
            }
          }
        }
      }
    },
    "/v1/UnionCodes": {
      "get": {
        "tags": [
          "Union Codes"
        ],
        "summary": "List Union Codes",
        "description": "Returns a list of the Union Codes defined. The format of Text in the response depends on the company web setting Lookup.Unions. \n\nIn Avanti, Union Codes identify the union affiliations and are used to determine union dues.",
        "operationId": "List-Union-Codes",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TextValuePair"
                  }
                },
                "examples": {
                  "Example": {
                    "value": [
                      {
                        "text": "01 - General Teamsters",
                        "value": "01"
                      },
                      {
                        "text": "02 - Teamsters Alberta (TA)",
                        "value": "02"
                      },
                      {
                        "text": "03 - CUPE (CA)",
                        "value": "03"
                      },
                      {
                        "text": "999999 - Non Union",
                        "value": "999999"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/VacationEarningCodes": {
      "get": {
        "tags": [
          "Vacation Earning Codes"
        ],
        "summary": "List Vacation Earning Codes",
        "description": "Returns a list of the earning codes setup for paying vacation each period or to pay out accrued. The format of Text in the response depends on the company web setting Lookup.VacationEarningCodes. \n\nIn Avanti, vacation earning codes must have either Vacation or Other Vacation selected for the Earning Type.",
        "operationId": "List-Vacation-Earning-Codes",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TextValuePair"
                  }
                },
                "examples": {
                  "Example": {
                    "value": [
                      {
                        "text": "350 - Vacation taken",
                        "value": "350"
                      },
                      {
                        "text": "351 - Vacation Pay Pay Out",
                        "value": "351"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/VacationGroup/{vacationGroup}": {
      "get": {
        "tags": [
          "Vacation Groups"
        ],
        "summary": "Get Vacation Group",
        "operationId": "Get-Vacation-Group",
        "parameters": [
          {
            "name": "vacationGroup",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VacationGroup"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/VacationGroups": {
      "get": {
        "tags": [
          "Vacation Groups"
        ],
        "summary": "List Vacation Groups",
        "description": "Returns a list of the defined vacation group. The format of Text in the response depends on the company web setting Lookup.VacationGroups. \n\nIn Avanti, vacation groups determine the vacation entitlement calculation for each employee assigned to the group.",
        "operationId": "List-Vacation-Groups",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TextValuePair"
                  }
                },
                "examples": {
                  "Example": {
                    "value": [
                      {
                        "text": "01 - Employee Vacation",
                        "value": "01"
                      },
                      {
                        "text": "02 - Executive Vacation",
                        "value": "02"
                      },
                      {
                        "text": "99 - N/A GROUP",
                        "value": "99"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/VacationOptions": {
      "get": {
        "tags": [
          "Vacation Options"
        ],
        "summary": "List Vacation Options",
        "description": "Returns a list of the vacation options. The Text will always be the description of the option.\n\nIn Avanti, the Vacation Option indicates what will happen with the calculated vacation for an employee.",
        "operationId": "List-Vacation-Options",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TextValuePair"
                  }
                },
                "examples": {
                  "Example": {
                    "value": [
                      {
                        "text": "Not Accrued Or Paid",
                        "value": "0"
                      },
                      {
                        "text": "Paid Each Period",
                        "value": "1"
                      },
                      {
                        "text": "Accrued",
                        "value": "2"
                      },
                      {
                        "text": "Pay Out Accrued",
                        "value": "3"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/WCBGroups": {
      "get": {
        "tags": [
          "WCB Groups"
        ],
        "summary": "List WCB Groups",
        "description": "Returns a list of the Workers Compensation Groups. \n\nIn Avanti, these maintain all WCB rates and maximums for payroll processing.",
        "operationId": "List-WCB-Groups",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TextValuePair"
                  }
                },
                "examples": {
                  "Example": {
                    "value": [
                      {
                        "text": "001 - British Columbia",
                        "value": "001"
                      },
                      {
                        "text": "002 - Alberta",
                        "value": "002"
                      },
                      {
                        "text": "003 - Saskatchewan",
                        "value": "003"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/WebPunch": {
      "get": {
        "tags": [
          "Web Punch"
        ],
        "summary": "Get Last Check-in",
        "description": "Returns the most recent punch of the employee attached to the user unless the last punch was for a break. If the previous punch was a break, it returns all punches for the shift, including the last check-in. ",
        "operationId": "Get-Last-Check-in",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebPunch"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "isBreak": true,
                      "isInPunch": true,
                      "punchDateTime": "2020-06-30T07:36:59.6400000+00:00"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Web Punch"
        ],
        "summary": "Create a Check-in",
        "description": "Creates a punch for the employee. \n\nThe time of the punch is the current time on the SQL Server, adjusted by the time zone specified on Web Punch Employee Setup on the Desktop Application. If there is no setup for the employee, the time will be adjusted by the Province of Employment on the Tax Factors tab of the Employee Profile.\n\nEmployees cannot punch if ‘Allow Web Punch’ is not selected on Time Clock >> Installation & Maintenance >> Employee Web & PC Punch Setup. \n\nIf company web setting MobileSettings.WebPunchSettings.RequireLocationServices is true, longitude and latitude must be included.",
        "operationId": "Create-a-Check-in",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebPunch"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WebPunch"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WebPunch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a confirmation with information added in Avanti. ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebPunch"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "empNo": "000001005",
                      "isInPunch": true,
                      "isBreak": true,
                      "latitude": -33.856159,
                      "longitude": 151.215256
                    }
                  }
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebPunch"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/WebPunch/Allowed": {
      "get": {
        "tags": [
          "Web Punch"
        ],
        "summary": "Is Check-in Allowed",
        "description": "Returns true if the employee can punch and false if the employee cannot. \n\nEmployees cannot punch if ‘Allow Web Punch’ is not selected on Time Clock >> Installation & Maintenance >> Employee Web & PC Punch Setup.",
        "operationId": "Is-Check-in-Allowed",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "examples": {
                  "Example": {
                    "value": true
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/WhatsNew/Web": {
      "get": {
        "tags": [
          "Whats New"
        ],
        "summary": "What's New page for web",
        "operationId": "What's-New-page-for-web",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WhatsNew"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/WorkGroups": {
      "get": {
        "tags": [
          "Work Groups"
        ],
        "summary": "List Work Groups",
        "description": "Returns a list of the defined employee work groups. The format of Text in the response depends on the company web setting Lookup.WorkGroups.\n\nIn Avanti, Work Groups are used to determine which employees enter time using Time and Attendance. These group employees based on common rules and shift(s). Each Work Group has a Holiday Rule, Punch Rule and Overtime Rule and one or more Shifts.",
        "operationId": "List-Work-Groups",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TextValuePair"
                  }
                },
                "examples": {
                  "Example": {
                    "value": [
                      {
                        "text": "00001 - No Manager Approval Required",
                        "value": "00001"
                      },
                      {
                        "text": "00002 - Manager Approval Required",
                        "value": "00002"
                      },
                      {
                        "text": "00003 - No Rules Work Group",
                        "value": "00003"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/WorkTech/EmpEntlExport": {
      "get": {
        "tags": [
          "Work Tech"
        ],
        "summary": "List WorkTech EmpEntlExports",
        "operationId": "List-WorkTech-EmpEntlExports",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "EmpNo"
            }
          },
          {
            "name": "ascending",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "paged",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Work Tech"
        ],
        "summary": "Add WorkTech EmpEntlExport",
        "operationId": "Add-WorkTech-EmpEntlExport",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkTechEmpEntlExport"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkTechEmpEntlExport"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WorkTechEmpEntlExport"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/WorkTech/EmpEntlExport/{empNo}": {
      "get": {
        "tags": [
          "Work Tech"
        ],
        "summary": "Get WorkTech EmpEntlExport by Empno",
        "operationId": "Get-WorkTech-EmpEntlExport-by-Empno",
        "parameters": [
          {
            "name": "empNo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Work Tech"
        ],
        "summary": "Update WorkTech EmpEntlExport",
        "operationId": "Update-WorkTech-EmpEntlExport",
        "parameters": [
          {
            "name": "empNo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkTechEmpEntlExport"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkTechEmpEntlExport"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WorkTechEmpEntlExport"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "Work Tech"
        ],
        "summary": "Delete WorkTech EmpEntlExport",
        "operationId": "Delete-WorkTech-EmpEntlExport",
        "parameters": [
          {
            "name": "empNo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/WorkTech/EmpEntlExport/Search": {
      "get": {
        "tags": [
          "Work Tech"
        ],
        "summary": "Search WorkTech EmpEntlExports",
        "operationId": "Search-WorkTech-EmpEntlExports",
        "parameters": [
          {
            "name": "EmpNo",
            "in": "query",
            "schema": {
              "maxLength": 9,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "EarnDeductCode",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "LeaveAccrUnit",
            "in": "query",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "LeaveTaknUnit",
            "in": "query",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "EmpNo"
            }
          },
          {
            "name": "ascending",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "paged",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "x-internal": false
      }
    },
    "/v1/WorkTech/EmpExport": {
      "get": {
        "tags": [
          "Work Tech"
        ],
        "summary": "List WorkTech EmpExports",
        "operationId": "List-WorkTech-EmpExports",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "EmpNo"
            }
          },
          {
            "name": "ascending",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "paged",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Work Tech"
        ],
        "summary": "Add WorkTech EmpExport",
        "operationId": "Add-WorkTech-EmpExport",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkTechEmpExport"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkTechEmpExport"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WorkTechEmpExport"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/WorkTech/EmpExport/{empNo}": {
      "get": {
        "tags": [
          "Work Tech"
        ],
        "summary": "Get WorkTech EmpExport by Empno",
        "operationId": "Get-WorkTech-EmpExport-by-Empno",
        "parameters": [
          {
            "name": "empNo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Work Tech"
        ],
        "summary": "Update WorkTech EmpExport",
        "operationId": "Update-WorkTech-EmpExport",
        "parameters": [
          {
            "name": "empNo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkTechEmpExport"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkTechEmpExport"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WorkTechEmpExport"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "Work Tech"
        ],
        "summary": "Delete WorkTech EmpExport",
        "operationId": "Delete-WorkTech-EmpExport",
        "parameters": [
          {
            "name": "empNo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/WorkTech/EmpExport/Search": {
      "get": {
        "tags": [
          "Work Tech"
        ],
        "summary": "Search WorkTech EmpExports",
        "operationId": "Search-WorkTech-EmpExports",
        "parameters": [
          {
            "name": "EmpNo",
            "in": "query",
            "schema": {
              "maxLength": 9,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "Surname",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "GivenName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Address1",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "City",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Province",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Country",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "PhoneType1",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "PhoneNumber1",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "PhoneType2",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "PhoneNumber2",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "PhoneType3",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "PhoneNumber3",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "PhoneType4",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "PhoneNumber4",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "StartBirthDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "EndBirthDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "StartLastHireDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "EndLastHireDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "Active",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Class",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PayGrp",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "HoursPerDay",
            "in": "query",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "HoursPerPeriod",
            "in": "query",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "Locn",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "JobStatus",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "EmployStatus",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "UnionCode",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "EmpNo"
            }
          },
          {
            "name": "ascending",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "paged",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/WorkTech/EmpPosExport": {
      "get": {
        "tags": [
          "Work Tech"
        ],
        "summary": "List WorkTech EmpPosExports",
        "operationId": "List-WorkTech-EmpPosExports",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "EmpNo"
            }
          },
          {
            "name": "ascending",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "paged",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Work Tech"
        ],
        "summary": "Add WorkTech EmpPosExport",
        "operationId": "Add-WorkTech-EmpPosExport",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkTechEmpPosExport"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkTechEmpPosExport"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WorkTechEmpPosExport"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/WorkTech/EmpPosExport/{empNo}/{position}": {
      "get": {
        "tags": [
          "Work Tech"
        ],
        "summary": "Get WorkTech EmpPosExport by Empno",
        "operationId": "Get-WorkTech-EmpPosExport-by-Empno",
        "parameters": [
          {
            "name": "empNo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "position",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Work Tech"
        ],
        "summary": "Update WorkTech EmpPosExport",
        "operationId": "Update-WorkTech-EmpPosExport",
        "parameters": [
          {
            "name": "empNo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "position",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkTechEmpPosExport"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkTechEmpPosExport"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WorkTechEmpPosExport"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "Work Tech"
        ],
        "summary": "Delete WorkTech EmpPosExport",
        "operationId": "Delete-WorkTech-EmpPosExport",
        "parameters": [
          {
            "name": "empNo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "position",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/WorkTech/EmpPosExport/Search": {
      "get": {
        "tags": [
          "Work Tech"
        ],
        "summary": "Search WorkTech EmpPosExports",
        "operationId": "Search-WorkTech-EmpPosExports",
        "parameters": [
          {
            "name": "EmpNo",
            "in": "query",
            "schema": {
              "maxLength": 9,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "Position",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Active",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "StartEffectiveDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "EndEffectiveDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "StartExpiryDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "EndExpiryDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "PrimaryPosition",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "EmpNo"
            }
          },
          {
            "name": "ascending",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "paged",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/worktech/Export": {
      "get": {
        "tags": [
          "Work Tech"
        ],
        "summary": "List WorkTech exports",
        "operationId": "List-WorkTech-exports",
        "parameters": [
          {
            "name": "TransactionNo",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "EmployeeNo",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "BatchNo",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PayCode",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Status",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "StartDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "EndDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "ExportNo"
            }
          },
          {
            "name": "ascending",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "paged",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Work Tech"
        ],
        "summary": "Add WorkTech export",
        "operationId": "Add-WorkTech-export",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkTechExport"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkTechExport"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WorkTechExport"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/worktech/Export/{ExportNo}": {
      "get": {
        "tags": [
          "Work Tech"
        ],
        "summary": "Get WorkTech export by ExportNo",
        "operationId": "Get-WorkTech-export-by-ExportNo",
        "parameters": [
          {
            "name": "exportNo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/worktech/Export/{id}": {
      "put": {
        "tags": [
          "Work Tech"
        ],
        "summary": "Update WorkTech export",
        "operationId": "Update-WorkTech-export",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkTechExport"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkTechExport"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WorkTechExport"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Work Tech"
        ],
        "summary": "Delete WorkTech export",
        "operationId": "Delete-WorkTech-export",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/WorkTech/Export/{id}/Status": {
      "put": {
        "tags": [
          "Work Tech"
        ],
        "summary": "Update WorkTech export status",
        "operationId": "Update-WorkTech-export-status",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkTechExportStatus"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkTechExportStatus"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WorkTechExportStatus"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/WorkTech/Export/Search": {
      "get": {
        "tags": [
          "Work Tech"
        ],
        "summary": "Search WorkTech exports",
        "operationId": "Search-WorkTech-exports",
        "parameters": [
          {
            "name": "TransactionNo",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "EmpNo",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "BatchNo",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PayCode",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Status",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "StartDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "EndDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "TransactionNo"
            }
          },
          {
            "name": "ascending",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "paged",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/worktech/Import": {
      "get": {
        "tags": [
          "Work Tech"
        ],
        "summary": "List WorkTech imports",
        "operationId": "List-WorkTech-imports",
        "parameters": [
          {
            "name": "TransactionNo",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "EmployeeNo",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "BatchNo",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PayCode",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Status",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "StartDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "EndDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "TransactionNo"
            }
          },
          {
            "name": "ascending",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "paged",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Work Tech"
        ],
        "summary": "Add WorkTech import",
        "operationId": "Add-WorkTech-import",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkTechImport"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkTechImport"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WorkTechImport"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/worktech/Import/{id}": {
      "put": {
        "tags": [
          "Work Tech"
        ],
        "summary": "Update WorkTech import",
        "operationId": "Update-WorkTech-import",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkTechImport"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkTechImport"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WorkTechImport"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Work Tech"
        ],
        "summary": "Delete WorkTech import",
        "operationId": "Delete-WorkTech-import",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/WorkTech/Import/{id}/Status": {
      "put": {
        "tags": [
          "Work Tech"
        ],
        "summary": "Update WorkTech import status",
        "operationId": "Update-WorkTech-import-status",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkTechImportStatus"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkTechImportStatus"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WorkTechImportStatus"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/worktech/Import/{TransactionNo}": {
      "get": {
        "tags": [
          "Work Tech"
        ],
        "summary": "Get WorkTech import by TransactionNo",
        "operationId": "Get-WorkTech-import-by-TransactionNo",
        "parameters": [
          {
            "name": "transactionNo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/WorkTech/Import/Search": {
      "get": {
        "tags": [
          "Work Tech"
        ],
        "summary": "Search WorkTech imports",
        "operationId": "Search-WorkTech-imports",
        "parameters": [
          {
            "name": "TransactionNo",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "EmpNo",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "BatchNo",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PayCode",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Status",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "StartDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "EndDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "TransactionNo"
            }
          },
          {
            "name": "ascending",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "paged",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccessTokenType": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "format": "int32"
      },
      "AccessType": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "Account": {
        "type": "object",
        "properties": {
          "abbrev": {
            "type": "string",
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "readOnly": true
          },
          "code": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "desc": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "type": {
            "type": "string",
            "readOnly": true
          },
          "validationMask": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "projectsUsed": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "projectDataRow": {
            "$ref": "#/components/schemas/DataRow"
          },
          "phaseDataRow": {
            "$ref": "#/components/schemas/DataRow"
          }
        },
        "additionalProperties": false
      },
      "ActiveStatus": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "AllowGrantTypes": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "AppAttestRequest": {
        "type": "object",
        "properties": {
          "attestation": {
            "type": "string",
            "nullable": true
          },
          "clientData": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Assembly": {
        "type": "object",
        "properties": {
          "definedTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TypeInfo"
            },
            "nullable": true,
            "readOnly": true
          },
          "exportedTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Type"
            },
            "nullable": true,
            "readOnly": true
          },
          "codeBase": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "entryPoint": {
            "$ref": "#/components/schemas/MethodInfo"
          },
          "fullName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "imageRuntimeVersion": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "isDynamic": {
            "type": "boolean",
            "readOnly": true
          },
          "location": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "reflectionOnly": {
            "type": "boolean",
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "isFullyTrusted": {
            "type": "boolean",
            "readOnly": true
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "escapedCodeBase": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "manifestModule": {
            "$ref": "#/components/schemas/Module"
          },
          "modules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Module"
            },
            "nullable": true,
            "readOnly": true
          },
          "globalAssemblyCache": {
            "type": "boolean",
            "readOnly": true
          },
          "hostContext": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "securityRuleSet": {
            "$ref": "#/components/schemas/SecurityRuleSet"
          }
        },
        "additionalProperties": false
      },
      "AuthenticatorRequest": {
        "type": "object",
        "properties": {
          "pin": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "AuthState": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7
        ],
        "type": "integer",
        "format": "int32"
      },
      "BankTransit": {
        "type": "object",
        "properties": {
          "bankNo": {
            "type": "string",
            "nullable": true
          },
          "transit": {
            "type": "string",
            "nullable": true
          },
          "bankName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BodyView": {
        "type": "object",
        "properties": {
          "view": {
            "$ref": "#/components/schemas/BodyViewValue"
          }
        },
        "additionalProperties": false
      },
      "BodyViewValue": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BulkTimeDataImportModel": {
        "required": [
          "clockData"
        ],
        "type": "object",
        "properties": {
          "clockData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClockDataRequest"
            }
          },
          "stopImportOnAnyError": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Calendar": {
        "type": "object",
        "properties": {
          "minSupportedDateTime": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "maxSupportedDateTime": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "algorithmType": {
            "$ref": "#/components/schemas/CalendarAlgorithmType"
          },
          "isReadOnly": {
            "type": "boolean",
            "readOnly": true
          },
          "eras": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true,
            "readOnly": true
          },
          "twoDigitYearMax": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CalendarAlgorithmType": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "CalendarWeekRule": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "CallingConventions": {
        "enum": [
          1,
          2,
          3,
          32,
          64
        ],
        "type": "integer",
        "format": "int32"
      },
      "ChequeOption": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "Client": {
        "required": [
          "name",
          "tokenLifetime"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "secret": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "tokenLifetime": {
            "maximum": 7200,
            "minimum": 60,
            "type": "integer",
            "format": "int32"
          },
          "expiresUtc": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/ClientStatus"
          },
          "allowGrantTypes": {
            "$ref": "#/components/schemas/AllowGrantTypes"
          },
          "username": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "The Avanti User Name that the employee uses to log into ASSP, Avanti Go, and the Avanti Desktop Application, if applicable. Must be a valid Avanti User Name.",
            "nullable": true
          },
          "allowedScopes": {
            "type": "string",
            "nullable": true
          },
          "accessTokenType": {
            "$ref": "#/components/schemas/AccessTokenType"
          },
          "requirePkce": {
            "type": "boolean"
          },
          "allowPlainTextPkce": {
            "type": "boolean"
          },
          "redirectUris": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ClientStatus": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "ClockData": {
        "required": [
          "earningCode",
          "earningDate",
          "empNo",
          "recordSourceId",
          "unitOfMeasure",
          "units"
        ],
        "type": "object",
        "properties": {
          "empNo": {
            "maxLength": 9,
            "minLength": 0,
            "type": "string",
            "description": "The employee number of the employee. When not provided the employee number assigned to the current user will be used if available."
          },
          "earningDate": {
            "type": "string",
            "format": "date-time"
          },
          "earningCode": {
            "maxLength": 3,
            "minLength": 0,
            "pattern": "[0-9]*",
            "type": "string",
            "description": "The three-digit earning code for the entry. Earning Codes are from 001 to 499."
          },
          "positionCode": {
            "maxLength": 12,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "attendanceCode": {
            "maxLength": 9,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "locationCode": {
            "maxLength": 4,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "shiftIdCode": {
            "maxLength": 9,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "wcbOverrideCode": {
            "maxLength": 3,
            "minLength": 3,
            "pattern": "[0-9]*",
            "type": "string",
            "nullable": true
          },
          "vacationOverrideCode": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "nullable": true
          },
          "unionOverrideCode": {
            "maxLength": 9,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "units": {
            "type": "number",
            "format": "double"
          },
          "unitOfMeasure": {
            "$ref": "#/components/schemas/UnitOfMeasure"
          },
          "taskId": {
            "maxLength": 9,
            "minLength": 0,
            "type": "string",
            "description": "The ID of the task for the time worked. \n\nFor a list of tasks set up in the company, use the 'Get TaskIds' endpoint.",
            "nullable": true
          },
          "rate": {
            "type": "number",
            "description": "The dollar rate of pay for the time worked. This will be used with the units to determine the gross earnings for the time worked.\n\nIf blank, the rate of pay will be determined within Avanti.",
            "format": "double",
            "nullable": true
          },
          "recordSourceId": {
            "type": "integer",
            "format": "int32"
          },
          "glType": {
            "$ref": "#/components/schemas/GlOption"
          },
          "glAccount": {
            "maxLength": 60,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "glGroup": {
            "maxLength": 4,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "glBenefitGroup": {
            "maxLength": 4,
            "minLength": 0,
            "pattern": "[0-9]*",
            "type": "string",
            "nullable": true
          },
          "comments": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "isApproved": {
            "type": "boolean"
          },
          "clockIn": {
            "type": "string",
            "format": "date-time"
          },
          "clockOut": {
            "type": "string",
            "format": "date-time"
          },
          "gridCode": {
            "type": "string",
            "nullable": true
          },
          "gridPercent": {
            "type": "number",
            "format": "double"
          },
          "rateLevel": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ClockDataRequest": {
        "required": [
          "empNo",
          "earningDate",
          "earningCode",
          "units",
          "unitOfMeasure",
          "recordSourceId"
        ],
        "type": "object",
        "properties": {
          "empNo": {
            "maxLength": 9,
            "minLength": 0,
            "type": "string",
            "description": "The employee number assigned to the employee."
          },
          "earningDate": {
            "type": "string",
            "description": "The date the employee worked in ISO 8601 format.",
            "format": "date-time"
          },
          "earningCode": {
            "maxLength": 3,
            "minLength": 0,
            "pattern": "[0-9]*",
            "type": "string",
            "description": "The three-digit earning code for the entry. Earning Codes are from 001 to 499."
          },
          "positionCode": {
            "maxLength": 12,
            "minLength": 0,
            "type": "string",
            "description": "The ID of the position worked. If the position is left blank, the employees primary position will be used if required for rates. \n\nIf ‘Only allow defined Employee Positions in time data entry’ is selected on the Time Data Entry tab of Payroll Parameters, the position must be on the employee’s profile.",
            "nullable": true
          },
          "attendanceCode": {
            "maxLength": 9,
            "minLength": 0,
            "type": "string",
            "description": "The attendance code for the worked time. \n\nMust be a valid attendance code. 'Get Attendance Codes' will return the valid codes.",
            "nullable": true
          },
          "locationCode": {
            "maxLength": 4,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "shiftIdCode": {
            "maxLength": 9,
            "minLength": 0,
            "type": "string",
            "description": "The ID of the shift worked. If left blank, premium rules will not apply to the time worked.\n\nMust be a valid shift ID. 'Get Shift Codes' will return a list of all the valid shifts.",
            "nullable": true
          },
          "wcbOverrideCode": {
            "maxLength": 3,
            "minLength": 3,
            "pattern": "[0-9]*",
            "type": "string",
            "description": "The ID of the WCB Group. If left blank, the time will apply to the WCB group selected on the employee's profile.\n\nMust be a valid WCB group. 'List WCB Groups' will return a list of all the valid groups.",
            "nullable": true
          },
          "vacationOverrideCode": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "The ID of the vacation group. If left blank, the time will apply to the vacation group selected on the employee's profile.\n\nMust be a valid vacation group. 'List Vacation Groups' will return a list of all the valid groups.",
            "nullable": true
          },
          "unionOverrideCode": {
            "maxLength": 9,
            "minLength": 0,
            "type": "string",
            "description": "The ID of the union code. If left blank, the time will apply to the union selected on the employee's profile.\n\nMust be a valid union code. 'List Union Codes' will return a list of all the valid codes.",
            "nullable": true
          },
          "units": {
            "type": "number",
            "description": "The time the employee worked.\nThis is required if you aren't including a clockIn/clockOut. \nIf blank, this is calculated based on the clockIn/clockOut.",
            "format": "double"
          },
          "unitOfMeasure": {
            "$ref": "#/components/schemas/UnitOfMeasure"
          },
          "taskId": {
            "maxLength": 9,
            "minLength": 0,
            "type": "string",
            "description": "The ID of the task for the time worked. \n\nFor a list of tasks set up in the company, use the 'Get TaskIds' endpoint.",
            "nullable": true
          },
          "rate": {
            "type": "number",
            "description": "The dollar rate of pay for the time worked. This will be used with the units to determine the gross earnings for the time worked.\n\nIf blank, the rate of pay will be determined within Avanti.",
            "format": "double",
            "nullable": true
          },
          "recordSourceId": {
            "type": "integer",
            "description": "A unique identifier for the time which prevents duplicate time from being accidently created in Avanti. If a duplicate recordSourceID is found within Avanti or in API body, the time will not import. \n\nFor example, this could be the identifier from the time capturing system.",
            "format": "int32"
          },
          "glType": {
            "$ref": "#/components/schemas/GlOption"
          },
          "glAccount": {
            "maxLength": 60,
            "minLength": 0,
            "type": "string",
            "description": "The GL account for the worked time. This is required when parameter glType is 'a'.\n\nMust be a valid account. 'List GL Accounts' will return the valid accounts for each segment. A combination of segments can be used to create the valid account.",
            "nullable": true
          },
          "glGroup": {
            "maxLength": 4,
            "minLength": 0,
            "type": "string",
            "description": "The GL group for the worked time. This is required when parameter glType is 'g'.\n\nMust be a valid GL group. 'List GL Groups' will return the valid GL Groups.",
            "nullable": true
          },
          "glBenefitGroup": {
            "maxLength": 4,
            "minLength": 0,
            "pattern": "[0-9]*",
            "type": "string",
            "description": "A valid GL Benefit Group. This is required when parameter glType is 'a'.\n\nMust be a valid GL Benefit Group. 'List GL Benefit Groups' will return the valid all the groups.",
            "nullable": true
          },
          "comments": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string",
            "description": "Enter comments for the worked time. Comments can be up to 1024 characters.",
            "nullable": true
          },
          "clockIn": {
            "type": "string",
            "description": "This is required if you aren't including Units and unitOfMeasure. \nThe time the employee started work. If left blank, Clock In defaults to midnight. ",
            "format": "date-time",
            "nullable": true
          },
          "clockOut": {
            "type": "string",
            "description": "The time the employee finishes work.\nThis is required if you aren't including Units and unitOfMeasure. \nIf you are including the units and unitOfMeasure, this defaults based on those.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CodeDefinition": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "nameFr": {
            "type": "string",
            "nullable": true
          },
          "nameSingular": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CodeDescription": {
        "required": [
          "code",
          "description"
        ],
        "type": "object",
        "properties": {
          "code": {
            "maxLength": 9,
            "type": "string"
          },
          "description": {
            "maxLength": 128,
            "type": "string"
          },
          "revision": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CompanyRequest": {
        "type": "object",
        "properties": {
          "company": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CompareInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "version": {
            "$ref": "#/components/schemas/SortVersion"
          },
          "lcid": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ConstructorInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "declaringType": {
            "$ref": "#/components/schemas/Type"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/Type"
          },
          "module": {
            "$ref": "#/components/schemas/Module"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "attributes": {
            "$ref": "#/components/schemas/MethodAttributes"
          },
          "methodImplementationFlags": {
            "$ref": "#/components/schemas/MethodImplAttributes"
          },
          "callingConvention": {
            "$ref": "#/components/schemas/CallingConventions"
          },
          "isAbstract": {
            "type": "boolean",
            "readOnly": true
          },
          "isConstructor": {
            "type": "boolean",
            "readOnly": true
          },
          "isFinal": {
            "type": "boolean",
            "readOnly": true
          },
          "isHideBySig": {
            "type": "boolean",
            "readOnly": true
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true
          },
          "isStatic": {
            "type": "boolean",
            "readOnly": true
          },
          "isVirtual": {
            "type": "boolean",
            "readOnly": true
          },
          "isAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamily": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamilyAndAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamilyOrAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isPrivate": {
            "type": "boolean",
            "readOnly": true
          },
          "isPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isConstructedGenericMethod": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericMethod": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericMethodDefinition": {
            "type": "boolean",
            "readOnly": true
          },
          "containsGenericParameters": {
            "type": "boolean",
            "readOnly": true
          },
          "methodHandle": {
            "$ref": "#/components/schemas/RuntimeMethodHandle"
          },
          "isSecurityCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecuritySafeCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecurityTransparent": {
            "type": "boolean",
            "readOnly": true
          },
          "memberType": {
            "$ref": "#/components/schemas/MemberTypes"
          }
        },
        "additionalProperties": false
      },
      "CultureInfo": {
        "type": "object",
        "properties": {
          "parent": {
            "$ref": "#/components/schemas/CultureInfo"
          },
          "lcid": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "keyboardLayoutId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ietfLanguageTag": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "nativeName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "englishName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "twoLetterISOLanguageName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "threeLetterISOLanguageName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "threeLetterWindowsLanguageName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "compareInfo": {
            "$ref": "#/components/schemas/CompareInfo"
          },
          "textInfo": {
            "$ref": "#/components/schemas/TextInfo"
          },
          "isNeutralCulture": {
            "type": "boolean",
            "readOnly": true
          },
          "cultureTypes": {
            "$ref": "#/components/schemas/CultureTypes"
          },
          "numberFormat": {
            "$ref": "#/components/schemas/NumberFormatInfo"
          },
          "dateTimeFormat": {
            "$ref": "#/components/schemas/DateTimeFormatInfo"
          },
          "calendar": {
            "$ref": "#/components/schemas/Calendar"
          },
          "optionalCalendars": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Calendar"
            },
            "nullable": true,
            "readOnly": true
          },
          "useUserOverride": {
            "type": "boolean",
            "readOnly": true
          },
          "isReadOnly": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "CultureTypes": {
        "enum": [
          1,
          2,
          4,
          7,
          8,
          16,
          32,
          64
        ],
        "type": "integer",
        "format": "int32"
      },
      "CustomAttributeData": {
        "type": "object",
        "properties": {
          "attributeType": {
            "$ref": "#/components/schemas/Type"
          },
          "constructor": {
            "$ref": "#/components/schemas/ConstructorInfo"
          },
          "constructorArguments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeTypedArgument"
            },
            "nullable": true,
            "readOnly": true
          },
          "namedArguments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeNamedArgument"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "CustomAttributeNamedArgument": {
        "type": "object",
        "properties": {
          "memberInfo": {
            "$ref": "#/components/schemas/MemberInfo"
          },
          "typedValue": {
            "$ref": "#/components/schemas/CustomAttributeTypedArgument"
          },
          "memberName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "isField": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "CustomAttributeTypedArgument": {
        "type": "object",
        "properties": {
          "argumentType": {
            "$ref": "#/components/schemas/Type"
          },
          "value": {
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "DataColumn": {
        "type": "object",
        "properties": {
          "site": {
            "$ref": "#/components/schemas/ISite"
          },
          "container": {
            "$ref": "#/components/schemas/IContainer"
          },
          "designMode": {
            "type": "boolean",
            "readOnly": true
          },
          "allowDBNull": {
            "type": "boolean",
            "default": true
          },
          "autoIncrement": {
            "type": "boolean",
            "default": false
          },
          "autoIncrementSeed": {
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          "autoIncrementStep": {
            "type": "integer",
            "format": "int64",
            "default": 1
          },
          "caption": {
            "type": "string",
            "nullable": true
          },
          "columnName": {
            "type": "string",
            "default": "",
            "nullable": true
          },
          "prefix": {
            "type": "string",
            "default": "",
            "nullable": true
          },
          "dataType": {
            "$ref": "#/components/schemas/Type"
          },
          "dateTimeMode": {
            "$ref": "#/components/schemas/DataSetDateTime"
          },
          "defaultValue": {
            "nullable": true
          },
          "expression": {
            "type": "string",
            "default": "",
            "nullable": true
          },
          "extendedProperties": {
            "type": "object",
            "additionalProperties": { },
            "nullable": true,
            "readOnly": true
          },
          "maxLength": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "namespace": {
            "type": "string",
            "nullable": true
          },
          "ordinal": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "readOnly": {
            "type": "boolean",
            "default": false
          },
          "table": {
            "$ref": "#/components/schemas/DataTable"
          },
          "unique": {
            "type": "boolean",
            "default": false
          },
          "columnMapping": {
            "$ref": "#/components/schemas/MappingType"
          }
        },
        "additionalProperties": false
      },
      "DataRow": {
        "type": "object",
        "properties": {
          "rowError": {
            "type": "string",
            "nullable": true
          },
          "rowState": {
            "$ref": "#/components/schemas/DataRowState"
          },
          "table": {
            "$ref": "#/components/schemas/DataTable"
          },
          "itemArray": {
            "type": "array",
            "items": { },
            "nullable": true
          },
          "hasErrors": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "DataRowState": {
        "enum": [
          1,
          2,
          4,
          8,
          16
        ],
        "type": "integer",
        "format": "int32"
      },
      "DataSet": {
        "type": "object",
        "properties": {
          "container": {
            "$ref": "#/components/schemas/IContainer"
          },
          "designMode": {
            "type": "boolean",
            "readOnly": true
          },
          "remotingFormat": {
            "$ref": "#/components/schemas/SerializationFormat"
          },
          "schemaSerializationMode": {
            "$ref": "#/components/schemas/SchemaSerializationMode"
          },
          "caseSensitive": {
            "type": "boolean",
            "default": false
          },
          "defaultViewManager": {
            "type": "array",
            "items": { },
            "nullable": true,
            "readOnly": true
          },
          "enforceConstraints": {
            "type": "boolean",
            "default": true
          },
          "dataSetName": {
            "type": "string",
            "default": "",
            "nullable": true
          },
          "namespace": {
            "type": "string",
            "default": "",
            "nullable": true
          },
          "prefix": {
            "type": "string",
            "default": "",
            "nullable": true
          },
          "extendedProperties": {
            "type": "object",
            "additionalProperties": { },
            "nullable": true,
            "readOnly": true
          },
          "hasErrors": {
            "type": "boolean",
            "readOnly": true
          },
          "isInitialized": {
            "type": "boolean",
            "readOnly": true
          },
          "locale": {
            "$ref": "#/components/schemas/CultureInfo"
          },
          "site": {
            "$ref": "#/components/schemas/ISite"
          },
          "relations": {
            "type": "array",
            "items": { },
            "nullable": true,
            "readOnly": true
          },
          "tables": {
            "type": "array",
            "items": { },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "DataSetDateTime": {
        "enum": [
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "format": "int32"
      },
      "DataTable": {
        "type": "object",
        "properties": {
          "container": {
            "$ref": "#/components/schemas/IContainer"
          },
          "designMode": {
            "type": "boolean",
            "readOnly": true
          },
          "caseSensitive": {
            "type": "boolean"
          },
          "isInitialized": {
            "type": "boolean",
            "readOnly": true
          },
          "remotingFormat": {
            "$ref": "#/components/schemas/SerializationFormat"
          },
          "childRelations": {
            "type": "array",
            "items": { },
            "nullable": true,
            "readOnly": true
          },
          "columns": {
            "type": "array",
            "items": { },
            "nullable": true,
            "readOnly": true
          },
          "constraints": {
            "type": "array",
            "items": { },
            "nullable": true,
            "readOnly": true
          },
          "dataSet": {
            "$ref": "#/components/schemas/DataSet"
          },
          "defaultView": {
            "type": "array",
            "items": { },
            "nullable": true,
            "readOnly": true
          },
          "displayExpression": {
            "type": "string",
            "default": "",
            "nullable": true
          },
          "extendedProperties": {
            "type": "object",
            "additionalProperties": { },
            "nullable": true,
            "readOnly": true
          },
          "hasErrors": {
            "type": "boolean",
            "readOnly": true
          },
          "locale": {
            "$ref": "#/components/schemas/CultureInfo"
          },
          "minimumCapacity": {
            "type": "integer",
            "format": "int32",
            "default": 50
          },
          "parentRelations": {
            "type": "array",
            "items": { },
            "nullable": true,
            "readOnly": true
          },
          "primaryKey": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataColumn"
            },
            "nullable": true
          },
          "rows": {
            "type": "array",
            "items": { },
            "nullable": true,
            "readOnly": true
          },
          "tableName": {
            "type": "string",
            "default": "",
            "nullable": true
          },
          "namespace": {
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "type": "string",
            "default": "",
            "nullable": true
          },
          "site": {
            "$ref": "#/components/schemas/ISite"
          }
        },
        "additionalProperties": false
      },
      "DateTimeFormatInfo": {
        "type": "object",
        "properties": {
          "amDesignator": {
            "type": "string",
            "nullable": true
          },
          "calendar": {
            "$ref": "#/components/schemas/Calendar"
          },
          "dateSeparator": {
            "type": "string",
            "nullable": true
          },
          "firstDayOfWeek": {
            "$ref": "#/components/schemas/DayOfWeek"
          },
          "calendarWeekRule": {
            "$ref": "#/components/schemas/CalendarWeekRule"
          },
          "fullDateTimePattern": {
            "type": "string",
            "nullable": true
          },
          "longDatePattern": {
            "type": "string",
            "nullable": true
          },
          "longTimePattern": {
            "type": "string",
            "nullable": true
          },
          "monthDayPattern": {
            "type": "string",
            "nullable": true
          },
          "pmDesignator": {
            "type": "string",
            "nullable": true
          },
          "rfC1123Pattern": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "shortDatePattern": {
            "type": "string",
            "nullable": true
          },
          "shortTimePattern": {
            "type": "string",
            "nullable": true
          },
          "sortableDateTimePattern": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "timeSeparator": {
            "type": "string",
            "nullable": true
          },
          "universalSortableDateTimePattern": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "yearMonthPattern": {
            "type": "string",
            "nullable": true
          },
          "abbreviatedDayNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "shortestDayNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "dayNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "abbreviatedMonthNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "monthNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isReadOnly": {
            "type": "boolean",
            "readOnly": true
          },
          "nativeCalendarName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "abbreviatedMonthGenitiveNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "monthGenitiveNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DayOfWeek": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "DeductionFigure": {
        "type": "object",
        "properties": {
          "text": {
            "type": "integer",
            "description": "The number of the Figures Field, from 1 to 15, in the order they appear on the Employee Profile. For example, M34 is 14.",
            "format": "int32"
          },
          "value": {
            "type": "number",
            "description": "A number between -999,999,999.99 and 999,999,999.99. Can be up to two decimal places.",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "DefaultGroup": {
        "type": "object",
        "properties": {
          "defaultGroupEmploymentData": {
            "$ref": "#/components/schemas/DefaultGroupEmploymentData"
          },
          "defaultGroupEarnings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DefaultGroupEarnings"
            },
            "nullable": true
          },
          "defaultGroupValues": {
            "$ref": "#/components/schemas/UserDefinedValues"
          },
          "defaultGroupDeductions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DefaultGroupDeductions"
            },
            "nullable": true
          },
          "defaultGroupPositions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DefaultGroupPositions"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DefaultGroupDeductions": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "active": {
            "type": "boolean"
          },
          "amount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "amountCode": {
            "type": "string",
            "nullable": true
          },
          "remaining": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "formulaAmt1": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "formulaAmt2": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "formulaAmtLabel1": {
            "type": "string",
            "nullable": true
          },
          "formulaAmtLabel2": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DefaultGroupEarnings": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "codeType": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "gridCode": {
            "type": "string",
            "nullable": true
          },
          "gridPercent": {
            "type": "number",
            "format": "double"
          },
          "amt": {
            "type": "number",
            "format": "double"
          },
          "amtCode": {
            "type": "string",
            "nullable": true
          },
          "glType": {
            "type": "string"
          },
          "isBaseRate": {
            "type": "boolean"
          },
          "glAccount": {
            "type": "string",
            "nullable": true
          },
          "glAccountName": {
            "type": "string",
            "nullable": true
          },
          "glBenefitGroup": {
            "type": "string",
            "nullable": true
          },
          "glBenefitGroupName": {
            "type": "string",
            "nullable": true
          },
          "glGroup": {
            "type": "string",
            "nullable": true
          },
          "glGroupName": {
            "type": "string",
            "nullable": true
          },
          "formulaAmt1": {
            "type": "number",
            "format": "double"
          },
          "formulaAmt2": {
            "type": "number",
            "format": "double"
          },
          "formulaAmtLabel1": {
            "type": "string",
            "nullable": true
          },
          "formulaAmtLabel2": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DefaultGroupEmploymentData": {
        "type": "object",
        "properties": {
          "amountCode": {
            "type": "string",
            "nullable": true
          },
          "benefitGroupCode": {
            "type": "string",
            "nullable": true
          },
          "benefitGroupDesc": {
            "type": "string",
            "nullable": true
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "statementOption": {
            "$ref": "#/components/schemas/StatementOption"
          },
          "chequeOption": {
            "$ref": "#/components/schemas/ChequeOption"
          },
          "defaultLanguage": {
            "type": "string"
          },
          "electronicTaxSlips": {
            "type": "boolean"
          },
          "employmentStatus": {
            "type": "string",
            "nullable": true
          },
          "employmentStatusDesc": {
            "type": "string",
            "nullable": true
          },
          "fte": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "glAccount": {
            "type": "string",
            "nullable": true
          },
          "glSegments": {
            "type": "array",
            "nullable": true
          },
          "glAccountName": {
            "type": "string",
            "nullable": true
          },
          "glAccountAbbreviation": {
            "type": "string",
            "nullable": true
          },
          "glType": {
            "type": "string"
          },
          "glGroup": {
            "type": "string",
            "nullable": true
          },
          "glGroupName": {
            "type": "string",
            "nullable": true
          },
          "glBenefitGroup": {
            "type": "string",
            "nullable": true
          },
          "glBenefitGroupName": {
            "type": "string",
            "nullable": true
          },
          "gridAmount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "gridCode": {
            "type": "string",
            "nullable": true
          },
          "gridName": {
            "type": "string",
            "nullable": true
          },
          "gridPercent": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "gridRate": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "jobStatus": {
            "type": "string",
            "nullable": true
          },
          "jobStatusDescription": {
            "type": "string",
            "nullable": true
          },
          "locationCode": {
            "type": "string",
            "nullable": true
          },
          "locationName": {
            "type": "string",
            "nullable": true
          },
          "locationNameFr": {
            "type": "string",
            "nullable": true
          },
          "otExempt": {
            "type": "boolean"
          },
          "payGroupCode": {
            "type": "string",
            "nullable": true
          },
          "payGroupName": {
            "type": "string",
            "nullable": true
          },
          "positionCode": {
            "type": "string",
            "nullable": true
          },
          "positionName": {
            "type": "string",
            "nullable": true
          },
          "positionNameFrF": {
            "type": "string",
            "nullable": true
          },
          "positionNameFrM": {
            "type": "string",
            "nullable": true
          },
          "provinceEmployed": {
            "type": "string",
            "nullable": true
          },
          "salaried": {
            "type": "boolean"
          },
          "scheduleTemplateCode": {
            "type": "string",
            "nullable": true
          },
          "scheduleTemplateDescription": {
            "type": "string",
            "nullable": true
          },
          "unionCode": {
            "type": "string",
            "nullable": true
          },
          "unionName": {
            "type": "string",
            "nullable": true
          },
          "vacationEarnCode": {
            "type": "string",
            "nullable": true
          },
          "vacationEarnName": {
            "type": "string",
            "nullable": true
          },
          "vacationEarnNameFr": {
            "type": "string",
            "nullable": true
          },
          "vacationEarnAbbrev": {
            "type": "string",
            "nullable": true
          },
          "vacationEarnAbbrevFr": {
            "type": "string",
            "nullable": true
          },
          "vacationGroupCode": {
            "type": "string",
            "nullable": true
          },
          "vacationGroupName": {
            "type": "string",
            "nullable": true
          },
          "vacationOptionCode": {
            "type": "string",
            "nullable": true
          },
          "wcbGroupCode": {
            "type": "string",
            "nullable": true
          },
          "wcbGroupName": {
            "type": "string",
            "nullable": true
          },
          "webStatement": {
            "type": "boolean"
          },
          "workGroupCode": {
            "type": "string",
            "nullable": true
          },
          "workGroupDesc": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DefaultGroupPositions": {
        "type": "object",
        "properties": {
          "positionCode": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "fte": {
            "type": "number",
            "format": "double"
          },
          "active": {
            "type": "boolean"
          },
          "rateSource": {
            "type": "integer",
            "format": "int32"
          },
          "glSource": {
            "type": "integer",
            "format": "int32"
          },
          "effectiveDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "expiry": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "overrideBasicRate": {
            "type": "number",
            "format": "double"
          },
          "overrideBasicRateCode": {
            "type": "string",
            "nullable": true
          },
          "rateLevel": {
            "type": "integer",
            "format": "int32"
          },
          "workGroupId": {
            "type": "string",
            "nullable": true
          },
          "premiumRuleId": {
            "type": "string",
            "nullable": true
          },
          "defaultWorkPosition": {
            "type": "boolean"
          },
          "rateLevelEffectiveDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DefaultGroupSetupResponse": {
        "type": "object",
        "properties": {
          "defaultGroup": {
            "$ref": "#/components/schemas/DefaultGroup"
          },
          "setDefaultGroupValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextValuePair"
            },
            "nullable": true
          },
          "defaultGroupSetups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DefaultValueList"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DefaultValueList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextValuePair"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Dependent": {
        "required": [
          "dependentNo",
          "gender",
          "givenName",
          "overage",
          "relationship",
          "smoker",
          "surname"
        ],
        "type": "object",
        "properties": {
          "empNo": {
            "type": "string",
            "description": "The employee number of the employee for this dependent.",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "The Deduction/Benefit codes which cover this dependent. This parameter cannot be used in an post or put at this time.",
            "nullable": true
          },
          "dependentNo": {
            "type": "integer",
            "description": "The number for the dependent. Each dependent for an employee will have a unique dependent number.",
            "format": "int32"
          },
          "givenName": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "description": "The first name of the employee's dependent."
          },
          "surname": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "description": "The last name of the employee's dependent."
          },
          "initial": {
            "maxLength": 1,
            "minLength": 0,
            "type": "string",
            "description": "The middle initial of the employee's dependent.",
            "nullable": true
          },
          "relationship": {
            "maxLength": 1,
            "minLength": 0,
            "type": "string",
            "description": "Indicates whether the dependent's relationship to the employee. \n   1 = Spouse\n   2 = Child \n   3 = Common Law Spouse\n   4 = Beneficiary\n   5 = Other"
          },
          "birthDate": {
            "type": "string",
            "description": "The date of the dependent's birth in ISO 8601 format.",
            "format": "date-time",
            "nullable": true
          },
          "gender": {
            "maxLength": 1,
            "minLength": 0,
            "type": "string",
            "description": "Indicates whether the dependent's gender is female, male, or undefined. \nF is female.\nM is male.\nX is undefined."
          },
          "useEmployeeAddress": {
            "type": "boolean",
            "description": "Indicates whether the dependent lives with the employee. If true, the dependent's home address and phone number will default to the employee's address and phone number. Default is false."
          },
          "address1": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "description": "The first line of the dependent's home address. This will only be used if the parameter UseEmployeeAddress is false.",
            "nullable": true
          },
          "address2": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "description": "The second line of the dependent's home address. This will only be used if the parameter UseEmployeeAddress is false.",
            "nullable": true
          },
          "city": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "description": "The city for the dependent's home address. This will only be used if the parameter UseEmployeeAddress is false.",
            "nullable": true
          },
          "province": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "The two character abbreviation of the province or state for the dependent's home address. If the employee resides outside of Canada and the United States, province should be ZZ.\nThis will only be used if the parameter UseEmployeeAddress is false.",
            "nullable": true
          },
          "country": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "The three-character abbreviation of the country where the dependent resides. If the province is a Canadian province or territory, the country should CAN. If the province is an American state, the country should be USA.\nThis will only be used if the parameter UseEmployeeAddress is false.",
            "nullable": true
          },
          "postal": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "The postal code of the employee's home address.",
            "nullable": true
          },
          "homePhone": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "description": "The phone number for the dependent's home. This will only be used if the parameter UseEmployeeAddress is false.",
            "nullable": true
          },
          "workPhone": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "email": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The dependent's email address.",
            "format": "email",
            "nullable": true
          },
          "comment": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "smoker": {
            "type": "boolean",
            "description": "Whether the dependent is a smoker. Default is False. This may be used for benefit calculations.\n    True for smoker\n    False for nonsmoker"
          },
          "overage": {
            "maxLength": 1,
            "minLength": 0,
            "type": "string",
            "description": "Indicates whether the dependent is over the age of majority. Default is 0. \n   0 = NA/under the age of majority\n   1 = Student\n   2 = Disabled\n   3 = Disabled Student"
          },
          "sin": {
            "maxLength": 11,
            "minLength": 0,
            "type": "string",
            "description": "The dependent's Social Insurance Number.",
            "nullable": true
          },
          "cohabitationDate": {
            "type": "string",
            "description": "The initial date that the dependent started living with the employee in ISO 8601 format.",
            "format": "date-time",
            "nullable": true
          },
          "trusteeRequired": {
            "type": "boolean",
            "description": "Whether the dependent requires a trustee. Defaults to false. \n\nIf true, a trustee must be entered on the beneficiaries tab of Employee Benefits in the Avanti desktop application."
          },
          "isEmployee": {
            "type": "boolean",
            "description": "Whether the dependent is also an employee. Default is False. If True, dependentEmpNo must be specified."
          },
          "dependentEmpNo": {
            "maxLength": 9,
            "minLength": 0,
            "type": "string",
            "description": "The dependents employee number, if the dependent is also an employee. This will only be used if the parameter isEmployee is true.",
            "nullable": true
          },
          "mobilePhone": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "primaryPhone": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "DigitShapes": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "DocumentViewOption": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "EmergencyContact": {
        "required": [
          "givenName",
          "surname",
          "relationship"
        ],
        "type": "object",
        "properties": {
          "empNo": {
            "type": "string",
            "description": "The employee number of the employee that this emergency contact belongs to.",
            "nullable": true
          },
          "entryCount": {
            "type": "integer",
            "format": "int32"
          },
          "givenName": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "description": "The first name of the employee's emergency contact."
          },
          "surname": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "description": "The last name of the employee's emergency contact."
          },
          "initial": {
            "maxLength": 1,
            "minLength": 0,
            "type": "string",
            "description": "The middle initial of the employee's emergency contact.",
            "nullable": true
          },
          "useEmployeeAddress": {
            "type": "boolean",
            "description": "Indicates whether the emergency contact lives with the employee. If true, the emergency contact's home address and phone number will default to the employee's address and phone number. Default is false."
          },
          "address1": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "description": "The first line of the emergency contact's home address. This will only be used if the parameter UseEmployeeAddress is false.",
            "nullable": true
          },
          "address2": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "description": "The second line of the emergency contact's home address. This will only be used if the parameter UseEmployeeAddress is false.",
            "nullable": true
          },
          "city": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "description": "The city for the emergency contact's home address. This will only be used if the parameter UseEmployeeAddress is false.",
            "nullable": true
          },
          "province": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "The two character abbreviation of the province or state for the emergency contact's home address. If the employee resides outside of Canada and the United States, province should be ZZ.\nThis will only be used if the parameter UseEmployeeAddress is false.",
            "nullable": true
          },
          "country": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "The three-character abbreviation of the country where the employee resides. If the province is a Canadian province or territory, the country should CAN. If the province is an American state, the country should be USA.",
            "nullable": true
          },
          "postal": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "The postal code of the emergency contact's home address. This will only be used if the parameter UseEmployeeAddress is false.",
            "nullable": true
          },
          "homePhone": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "description": "The phone number for the emergency contact's home. This will only be used if the parameter UseEmployeeAddress is false.",
            "nullable": true
          },
          "workPhone": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "description": "The phone number for the emergency contact's work.",
            "nullable": true
          },
          "comments": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string",
            "description": "Additional information about the emergency contact. Can be up to 1024 characters.",
            "nullable": true
          },
          "relationship": {
            "type": "string",
            "description": "The employee's relationship to the emergency contact. Must be a valid relationship code. 'Get Emergency Setup' will return the valid relationship codes."
          },
          "mobilePhone": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "primaryPhone": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "EmergencyContactSetupResponse": {
        "type": "object",
        "properties": {
          "provinces": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextValuePair"
            },
            "nullable": true
          },
          "relationship": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextValuePair"
            },
            "nullable": true
          },
          "address": {
            "$ref": "#/components/schemas/EmployeeAddress"
          },
          "employeeHomePhone": {
            "type": "string",
            "nullable": true
          },
          "isReadOnly": {
            "type": "boolean"
          },
          "settings": {
            "$ref": "#/components/schemas/EmergencyContactSettings"
          }
        },
        "additionalProperties": false
      },
      "Employee": {
        "type": "object",
        "properties": {
          "photoRevision": {
            "type": "integer",
            "description": "Used to prevent photo caching. When the photo is updated or the existing photo is deleted, enter a unique value here to ensure that the changes are applied immediately.",
            "format": "int64",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "description": "The Avanti User Name that the employee uses to log into ASSP, Avanti Go, and the Avanti Desktop Application, if applicable. Must be a valid Avanti User Name.",
            "nullable": true
          },
          "givenName": {
            "type": "string",
            "description": "The employee's first name.",
            "nullable": true
          },
          "surname": {
            "type": "string",
            "description": "The employee's last name.",
            "nullable": true
          },
          "initial": {
            "type": "string",
            "description": "The middle initial of the employee's name.",
            "nullable": true
          },
          "preferredName": {
            "type": "string",
            "description": "The name the employee prefers be called instead of their given name.",
            "nullable": true
          },
          "address1": {
            "type": "string",
            "description": "The first line of the employee's home address.",
            "nullable": true
          },
          "address2": {
            "type": "string",
            "description": "The second line of the employee's home address.",
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "The city for the employee's home address.",
            "nullable": true
          },
          "province": {
            "type": "string",
            "description": "The two character abbreviation of the province or state for the employee's home address. If the employee resides outside of Canada and the United States, province should be ZZ.",
            "nullable": true
          },
          "country": {
            "type": "string",
            "description": "The three-character abbreviation of the country where the employee resides. If the province is a Canadian province or territory, the country should CAN. If the province is an American state, the country should be USA.",
            "nullable": true
          },
          "postal": {
            "type": "string",
            "description": "The postal code of the employee's home address.",
            "nullable": true
          },
          "birthDate": {
            "type": "string",
            "description": "The date of the employee's birth in ISO 8601 format. This is used to determine the employees Canadian Pension Plan (CPP) eligibility.",
            "format": "date-time"
          },
          "seniorityDate": {
            "type": "string",
            "description": "The date used to determine the employee's seniority in ISO 8601 format.",
            "format": "date-time"
          },
          "firstLanguage": {
            "type": "string",
            "description": "Indicates whether the employee would like their correspondence, such as pay statements, in French or English. \nF is French.\nE is English."
          },
          "gender": {
            "type": "string",
            "description": "Indicates whether the gender is female, male, or undefined. \nF is female.\nM is male.\nX is undefined."
          },
          "marital": {
            "type": "string",
            "description": "The marital status of the employee.\n        M = Married\n\tS = Single\n\tD = CommonLaw\n\tE = Divorced\n\tF = Separated\n\tG = Widowed\n\tAny other character  = other"
          },
          "sin": {
            "type": "string",
            "description": "The employee's Social Insurance Number. If this is not available, nine zeros will be accepted. If the SIN starts with a 9, a sinExpiryDate should be specified.",
            "nullable": true
          },
          "previousSurname": {
            "type": "string",
            "description": "The employee's previous surname, if applicable.",
            "nullable": true
          },
          "sinExpiryDate": {
            "type": "string",
            "description": "The date the employee's temporary Social Insurance Number (SIN) will expire. If the employee's SIN begins with a 9, this should be specified. The SIN expiry is in ISO 8601 format.",
            "format": "date-time",
            "nullable": true
          },
          "temporarySin": {
            "type": "boolean"
          },
          "phoneType1": {
            "type": "integer",
            "description": "The phone type of the phoneNumber1. \n        1 = Work\n        2 = Home \n        3 = Work 2\n        4 = Home 2\n        5 = Work Fax\n        6 = HomeFax\n        7 = Cell\n        8 = Pager\n        9 = Other \n      10 = Work Cell\n      11 = Home Cell",
            "format": "int32"
          },
          "phoneNumber1": {
            "type": "string",
            "description": "The phone number for phoneType1.",
            "nullable": true
          },
          "phoneType2": {
            "type": "integer",
            "description": "The phone type of the phoneNumber2. \n        1 = Work\n        2 = Home \n        3 = Work 2\n        4 = Home 2\n        5 = Work Fax\n        6 = HomeFax\n        7 = Cell\n        8 = Pager\n        9 = Other \n      10 = Work Cell\n      11 = Home Cell",
            "format": "int32"
          },
          "phoneNumber2": {
            "type": "string",
            "description": "The phone number for phoneType2.",
            "nullable": true
          },
          "phoneType3": {
            "type": "integer",
            "description": "The phone type of the phoneNumber3. \n        1 = Work\n        2 = Home \n        3 = Work 2\n        4 = Home 2\n        5 = Work Fax\n        6 = HomeFax\n        7 = Cell\n        8 = Pager\n        9 = Other \n      10 = Work Cell\n      11 = Home Cell",
            "format": "int32"
          },
          "phoneNumber3": {
            "type": "string",
            "description": "The phone number for phoneType3.",
            "nullable": true
          },
          "phoneType4": {
            "type": "integer",
            "description": "The phone type of the phoneNumber4. \n        1 = Work\n        2 = Home \n        3 = Work 2\n        4 = Home 2\n        5 = Work Fax\n        6 = HomeFax\n        7 = Cell\n        8 = Pager\n        9 = Other \n      10 = Work Cell\n      11 = Home Cell",
            "format": "int32"
          },
          "phoneNumber4": {
            "type": "string",
            "description": "The phone number for phoneType4.",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "The employee's primary email. Emails sent by Avanti will be sent to this email address when the specific email address is not provided. This is required on Post. \n\nFor example, if the employee does not have a Pay Statement email address defined, the pay statement will be emailed to the primary email.",
            "nullable": true
          },
          "emailType1": {
            "type": "integer",
            "description": "The email type of the email1.  0 is Primary, 1 is Work, 2 is Home, 3 is Pay Statements, 4 is Alerts, and 5 is Tax Slips. ",
            "format": "int32"
          },
          "email1": {
            "type": "string",
            "description": "The employee's email address for emailType1.",
            "nullable": true
          },
          "emailType2": {
            "type": "integer",
            "description": "The email type of the email2. 0 is Primary, 1 is Work, 2 is Home, 3 is Pay Statements, 4 is Alerts, and 5 is Tax Slips. ",
            "format": "int32"
          },
          "email2": {
            "type": "string",
            "description": "The employee's email address for emailType2.",
            "nullable": true
          },
          "emailType3": {
            "type": "integer",
            "description": "The email type of email3. 0 is Primary, 1 is Work, 2 is Home, 3 is Pay Statements, 4 is Alerts, and 5 is Tax Slips. \n",
            "format": "int32"
          },
          "email3": {
            "type": "string",
            "description": "The employee's email address for emailType3.",
            "nullable": true
          },
          "emailType4": {
            "type": "integer",
            "description": "The email type of the email4. 0 is Primary, 1 is Work, 2 is Home, 3 is Pay Statements, 4 is Alerts, and 5 is Tax Slips. ",
            "format": "int32"
          },
          "email4": {
            "type": "string",
            "description": "The employee's email address for emailType4.",
            "nullable": true
          },
          "emailType5": {
            "type": "integer",
            "description": "The email type of the email5. 0 is Primary, 1 is Work, 2 is Home, 3 is Pay Statements, 4 is Alerts, and 5 is Tax Slips. ",
            "format": "int32"
          },
          "email5": {
            "type": "string",
            "description": "The employee's email address for emailType5.",
            "nullable": true
          },
          "otherText1": {
            "type": "string",
            "description": "Profile Field T1. Text which can be up to 126 characters. \nIf the T1 Text Type in Payroll Parameters is anything other than Text or Required Text, the value match the ID of the selected Type.",
            "nullable": true
          },
          "otherText2": {
            "type": "string",
            "description": "Profile Field T2. Text which can be up to 126 characters. \nIf the T2 Text Type in Payroll Parameters is anything other than Text or Required Text, the value match the ID of the selected Type.",
            "nullable": true
          },
          "otherText3": {
            "type": "string",
            "description": "Profile Field T3. Text which can be up to 126 characters. \nIf the T3 Text Type in Payroll Parameters is anything other than Text or Required Text, the value match the ID of the selected Type.",
            "nullable": true
          },
          "otherText4": {
            "type": "string",
            "description": "Profile Field T4. Text which can be up to 126 characters. \nIf the T4 Text Type in Payroll Parameters is anything other than Text or Required Text, the value match the ID of the selected Type.",
            "nullable": true
          },
          "otherText5": {
            "type": "string",
            "description": "Profile Field T5. Text which can be up to 126 characters. \nIf the T5 Text Type in Payroll Parameters is anything other than Text or Required Text, the value match the ID of the selected Type.",
            "nullable": true
          },
          "otherText6": {
            "type": "string",
            "description": "Profile Field T6. Text which can be up to 126 characters. \nIf the T6 Text Type in Payroll Parameters is anything other than Text or Required Text, the value match the ID of the selected Type.",
            "nullable": true
          },
          "otherText7": {
            "type": "string",
            "description": "Profile Field T7. Text which can be up to 126 characters. \nIf the T7 Text Type in Payroll Parameters is anything other than Text or Required Text, the value match the ID of the selected Type.",
            "nullable": true
          },
          "otherText8": {
            "type": "string",
            "description": "Profile Field T8. Text which can be up to 126 characters. \nIf the T8 Text Type in Payroll Parameters is anything other than Text or Required Text, the value match the ID of the selected Type.",
            "nullable": true
          },
          "otherText9": {
            "type": "string",
            "description": "Profile Field T9. Text which can be up to 126 characters. \nIf the T9 Text Type in Payroll Parameters is anything other than Text or Required Text, the value match the ID of the selected Type.",
            "nullable": true
          },
          "otherText10": {
            "type": "string",
            "description": "Profile Field T10. Text which can be up to 126 characters. \nIf the T10 Text Type in Payroll Parameters is anything other than Text or Required Text, the value match the ID of the selected Type.",
            "nullable": true
          },
          "otherText11": {
            "type": "string",
            "description": "Profile Field T11. Text which can be up to 126 characters. \nIf the T11 Text Type in Payroll Parameters is anything other than Text or Required Text, the value match the ID of the selected Type.",
            "nullable": true
          },
          "otherText12": {
            "type": "string",
            "description": "Profile Field T12. Text which can be up to 126 characters. \nIf the T12 Text Type in Payroll Parameters is anything other than Text or Required Text, the value match the ID of the selected Type.",
            "nullable": true
          },
          "otherText13": {
            "type": "string",
            "description": "Profile Field T13. Text which can be up to 126 characters. \nIf the T13 Text Type in Payroll Parameters is anything other than Text or Required Text, the value match the ID of the selected Type.",
            "nullable": true
          },
          "otherText14": {
            "type": "string",
            "description": "Profile Field T14. Text which can be up to 126 characters. \nIf the T14 Text Type in Payroll Parameters is anything other than Text or Required Text, the value match the ID of the selected Type.",
            "nullable": true
          },
          "otherText15": {
            "type": "string",
            "description": "Profile Field T15. Text which can be up to 126 characters. \nIf the T15 Text Type in Payroll Parameters is anything other than Text or Required Text, the value match the ID of the selected Type.",
            "nullable": true
          },
          "otherText16": {
            "type": "string",
            "description": "Profile Field T16. Text which can be up to 126 characters. \nIf the T16 Text Type in Payroll Parameters is anything other than Text or Required Text, the value match the ID of the selected Type.",
            "nullable": true
          },
          "otherText17": {
            "type": "string",
            "nullable": true
          },
          "otherText18": {
            "type": "string",
            "description": "Profile Field T18. Text which can be up to 126 characters. \nIf the T18 Text Type in Payroll Parameters is anything other than Text or Required Text, the value match the ID of the selected Type.",
            "nullable": true
          },
          "otherText19": {
            "type": "string",
            "description": "Profile Field T19. Text which can be up to 126 characters. \nIf the T19 Text Type in Payroll Parameters is anything other than Text or Required Text, the value match the ID of the selected Type.",
            "nullable": true
          },
          "otherText20": {
            "type": "string",
            "description": "Profile Field T20. Text which can be up to 126 characters. \nIf the T20 Text Type in Payroll Parameters is anything other than Text or Required Text, the value match the ID of the selected Type.",
            "nullable": true
          },
          "dedFig1": {
            "type": "number",
            "description": "The Profile Field M1. It is a number between -999,999,999.99 and 999,999,999.99 and up to two decimal places.",
            "format": "double"
          },
          "dedFig2": {
            "type": "number",
            "description": "The Profile Field M2. It is a number between -999,999,999.99 and 999,999,999.99 and up to two decimal places.",
            "format": "double"
          },
          "dedFig3": {
            "type": "number",
            "description": "The Profile Field M3. It is a number between -999,999,999.99 and 999,999,999.99 and up to two decimal places.",
            "format": "double"
          },
          "dedFig4": {
            "type": "number",
            "description": "The Profile Field M4. It is a number between -999,999,999.99 and 999,999,999.99 and up to two decimal places.",
            "format": "double"
          },
          "dedFig5": {
            "type": "number",
            "description": "The Profile Field M5. It is a number between -999,999,999.99 and 999,999,999.99 and up to two decimal places.",
            "format": "double"
          },
          "dedFig6": {
            "type": "number",
            "description": "The Profile Field M6. It is a number between -999,999,999.99 and 999,999,999.99 and up to two decimal places.",
            "format": "double"
          },
          "dedFig7": {
            "type": "number",
            "description": "The Profile Field M7. It is a number between -999,999,999.99 and 999,999,999.99 and up to two decimal places.",
            "format": "double"
          },
          "dedFig8": {
            "type": "number",
            "description": "The Profile Field M8. It is a number between -999,999,999.99 and 999,999,999.99 and up to two decimal places.",
            "format": "double"
          },
          "dedFig9": {
            "type": "number",
            "description": "The Profile Field M9. It is a number between -999,999,999.99 and 999,999,999.99 and up to two decimal places.",
            "format": "double"
          },
          "dedFig10": {
            "type": "number",
            "description": "The Profile Field M30. It is a number between -999,999,999.99 and 999,999,999.99 and up to two decimal places.",
            "format": "double"
          },
          "dedFig11": {
            "type": "number",
            "description": "The Profile Field M31. It is a number between -999,999,999.99 and 999,999,999.99 and up to two decimal places.",
            "format": "double"
          },
          "dedFig12": {
            "type": "number",
            "description": "The Profile Field M32. It is a number between -999,999,999.99 and 999,999,999.99 and up to two decimal places.",
            "format": "double"
          },
          "dedFig13": {
            "type": "number",
            "description": "The Profile Field M33. It is a number between -999,999,999.99 and 999,999,999.99 and up to two decimal places.",
            "format": "double"
          },
          "dedFig14": {
            "type": "number",
            "description": "The Profile Field M34. It is a number between -999,999,999.99 and 999,999,999.99 and up to two decimal places.",
            "format": "double"
          },
          "dedFig15": {
            "type": "number",
            "description": "The Profile Field M35. It is a number between -999,999,999.99 and 999,999,999.99 and up to two decimal places.",
            "format": "double"
          },
          "otherDate1": {
            "type": "string",
            "description": "The date for Profile Field M11. The date in ISO 8601 format.",
            "format": "date-time",
            "nullable": true
          },
          "otherDate2": {
            "type": "string",
            "description": "The date for Profile Field M12. The date in ISO 8601 format.",
            "format": "date-time",
            "nullable": true
          },
          "otherDate3": {
            "type": "string",
            "description": "The date for Profile Field M13. The date in ISO 8601 format.",
            "format": "date-time",
            "nullable": true
          },
          "otherDate4": {
            "type": "string",
            "description": "The date for Profile Field M14. The date in ISO 8601 format.",
            "format": "date-time",
            "nullable": true
          },
          "otherDate5": {
            "type": "string",
            "description": "The date for Profile Field M15. The date in ISO 8601 format.",
            "format": "date-time",
            "nullable": true
          },
          "otherDate6": {
            "type": "string",
            "description": "The date for Profile Field M16. The date in ISO 8601 format.",
            "format": "date-time",
            "nullable": true
          },
          "otherDate7": {
            "type": "string",
            "description": "The date for Profile Field M17. The date in ISO 8601 format.",
            "format": "date-time",
            "nullable": true
          },
          "otherDate8": {
            "type": "string",
            "description": "The date for Profile Field M18. The date in ISO 8601 format.",
            "format": "date-time",
            "nullable": true
          },
          "otherDate9": {
            "type": "string",
            "description": "The date for Profile Field M19. The date in ISO 8601 format.",
            "format": "date-time",
            "nullable": true
          },
          "otherDate10": {
            "type": "string",
            "description": "The date for Profile Field M20. The date in ISO 8601 format.",
            "format": "date-time",
            "nullable": true
          },
          "otherDate11": {
            "type": "string",
            "description": "The date for Profile Field M21. The date in ISO 8601 format.",
            "format": "date-time",
            "nullable": true
          },
          "otherDate12": {
            "type": "string",
            "description": "The date for Profile Field M22. The date in ISO 8601 format.",
            "format": "date-time",
            "nullable": true
          },
          "initialHireDate": {
            "type": "string",
            "description": "The date the employee first started with the company in ISO 8601 format.",
            "format": "date-time"
          },
          "accumServHrs": {
            "type": "number",
            "format": "double"
          },
          "vacDate": {
            "type": "string",
            "description": "The vacation date in ISO 8601 format. This determines the vacation service months for vacation calculation purposes.",
            "format": "date-time"
          },
          "empNo": {
            "type": "string",
            "description": "The employee number of the employee. When not provided the employee number assigned to the current user will be used if available.",
            "nullable": true
          },
          "position": {
            "type": "string",
            "description": "The position ID of the employee's primary position.",
            "nullable": true
          },
          "positionName": {
            "type": "string",
            "description": "The English description of the employee's primary position. This will not be updated on Post.",
            "nullable": true
          },
          "positionNameFr": {
            "type": "string",
            "description": "The French description of the employee's primary position. This will not be updated on Post.",
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "description": "Whether the employee is active or inactive. \n     True = Active\n     False = Inactive\nEmployees that are not active are omitted from payroll processing, even if they have time data entered for them"
          },
          "webStatements": {
            "type": "boolean",
            "description": "Determines whether the employee can see their pay statements on the web. \n    True = Web Statements enabled\n     False = Web Statements are not enabled"
          },
          "payGroup": {
            "type": "string",
            "description": "The ID of the employee's pay group.",
            "nullable": true
          },
          "location": {
            "type": "string",
            "description": "The ID of the employee's location.",
            "nullable": true
          },
          "provinceEmployed": {
            "type": "string",
            "description": "The ID of the employee's province of employment. This will set the proper tax factors for the employee. \n   AB = Alberta\n   BC = British Columbia\n   MB = Manitoba\n   NB = New Brunswick\n   NL = Newfoundland\n   NS = Nova Scotia\n   NT = Northwest Territories\n   NU = Nunavut\n   ON = Ontario\n   PE = Prince Edward Is.\n   QC = Quebec\n   SK = Saskatchewan\n   YT = Yukon Territories\n   ZZ = Outside North America",
            "nullable": true
          },
          "fte": {
            "type": "number",
            "description": "The employee's FTE (full time equivalent), where 1 is full time, 0.5 is half, etc. This value ranges from 0 to 9.99. \nThis may be used to adjust the amount paid to a salaried employee.",
            "format": "double"
          },
          "wcbGroup": {
            "type": "string",
            "description": "The ID of the employee's WCB group (Worker's Compensation Group).",
            "nullable": true
          },
          "vacGroup": {
            "type": "string",
            "description": "The ID of the employee's vacation group.",
            "nullable": true
          },
          "vacCode": {
            "type": "string",
            "description": "The employee's vacation option. \n    0 = Not Accrued Or Paid\n    1 = Paid Each Period\n    2 = Accrued\n    3 = Pay Out Accrued",
            "nullable": true
          },
          "vacEarnCode": {
            "type": "string",
            "description": "The earning code that the vacation is paid out on. Should be included if vacCode is 1 or 3.",
            "nullable": true
          },
          "unionCode": {
            "type": "string",
            "nullable": true
          },
          "glType": {
            "type": "string",
            "description": "The employee's G/L option. \n     a = G/L Account\n     g = G/L Group",
            "nullable": true
          },
          "glGroup": {
            "type": "string",
            "description": "The ID of employee's G/L Group. Should be included if glType is g.",
            "nullable": true
          },
          "earnGl": {
            "type": "string",
            "description": "This property is not used at this time.",
            "nullable": true
          },
          "workGroup": {
            "type": "string",
            "description": "The ID of the employee's work group.",
            "nullable": true
          },
          "jobStatus": {
            "type": "string",
            "description": "The ID of the employee's job status.",
            "nullable": true
          },
          "smoker": {
            "type": "string",
            "description": "Whether the employee is a smoker. This may be used for benefit calculations\n    True for smoker\n    False for nonsmoker"
          },
          "lastHireDate": {
            "type": "string",
            "description": "The date the employee was most recently hired by the company in ISO 8601 format.",
            "format": "date-time"
          },
          "prevVacEarn": {
            "type": "number",
            "description": "The value for accumulator A1, Vacation Dollars, from the previous pay period. This is used in formulas that include the variable P1.",
            "format": "double"
          },
          "prevWcbEarn": {
            "type": "number",
            "description": "The value for accumulator A2, WCB Dollars, from the previous pay period. This is used in formulas that include the variable P2.",
            "format": "double"
          },
          "prevMiscEarnAccum1": {
            "type": "number",
            "description": "The value for accumulator A3 from the previous pay period. This is used in formulas that include the variable P3.",
            "format": "double"
          },
          "prevMiscEarnAccum2": {
            "type": "number",
            "description": "The value for accumulator A4 from the previous pay period. This is used in formulas that include the variable P4.",
            "format": "double"
          },
          "prevMiscEarnAccum3": {
            "type": "number",
            "description": "The value for accumulator A5 from the previous pay period. This is used in formulas that include the variable P5.",
            "format": "double"
          },
          "prevMiscEarnAccum4": {
            "type": "number",
            "description": "The value for accumulator A6 from the previous pay period. This is used in formulas that include the variable P6.",
            "format": "double"
          },
          "prevMiscEarnAccum5": {
            "type": "number",
            "description": "The value for accumulator A7 from the previous pay period. This is used in formulas that include the variable P7.",
            "format": "double"
          },
          "prevMiscEarnAccum6": {
            "type": "number",
            "description": "The value for accumulator A8 from the previous pay period. This is used in formulas that include the variable P8.",
            "format": "double"
          },
          "prevMiscEarnAccum7": {
            "type": "number",
            "description": "The value for accumulator A9 from the previous pay period. This is used in formulas that include the variable P9.",
            "format": "double"
          },
          "prevMiscEarnAccum8": {
            "type": "number",
            "description": "The value for accumulator A10 from the previous pay period. This is used in formulas that include the variable P10.",
            "format": "double"
          },
          "prevVacHrs": {
            "type": "number",
            "description": "The value for accumulator A11, Vacation Hours, from the previous pay period. This is used in formulas that include the variable P11.",
            "format": "double"
          },
          "prevWcbHrs": {
            "type": "number",
            "description": "The value for accumulator A12, Service Hours, from the previous pay period. This is used in formulas that include the variable P12.",
            "format": "double"
          },
          "prevWcbPremHrs": {
            "type": "number",
            "description": "The value for accumulator A13 from the previous pay period. This is used in formulas that include the variable P13.",
            "format": "double"
          },
          "prevMiscUnitsAccum1": {
            "type": "number",
            "description": "The value for accumulator A14 from the previous pay period. This is used in formulas that include the variable P14.",
            "format": "double"
          },
          "prevMiscUnitsAccum2": {
            "type": "number",
            "description": "The value for accumulator A15 from the previous pay period. This is used in formulas that include the variable P15.",
            "format": "double"
          },
          "prevMiscAccum16": {
            "type": "number",
            "description": "The value for accumulator A16 from the previous pay period. This is used in formulas that include the variable P16.",
            "format": "double"
          },
          "prevMiscAccum17": {
            "type": "number",
            "description": "The value for accumulator A17 from the previous pay period. This is used in formulas that include the variable P17.",
            "format": "double"
          },
          "prevMiscAccum18": {
            "type": "number",
            "description": "The value for accumulator A18 from the previous pay period. This is used in formulas that include the variable P18.",
            "format": "double"
          },
          "prevMiscAccum19": {
            "type": "number",
            "description": "The value for accumulator A19 from the previous pay period. This is used in formulas that include the variable P19.",
            "format": "double"
          },
          "prevMiscAccum20": {
            "type": "number",
            "description": "The value for accumulator A20 from the previous pay period. This is used in formulas that include the variable P20.",
            "format": "double"
          },
          "prevMiscAccum21": {
            "type": "number",
            "description": "The value for accumulator A21 from the previous pay period. This is used in formulas that include the variable P21.",
            "format": "double"
          },
          "prevMiscAccum22": {
            "type": "number",
            "description": "The value for accumulator A22 from the previous pay period. This is used in formulas that include the variable P22.",
            "format": "double"
          },
          "prevMiscAccum23": {
            "type": "number",
            "description": "The value for accumulator A23 from the previous pay period. This is used in formulas that include the variable P23.",
            "format": "double"
          },
          "prevMiscAccum24": {
            "type": "number",
            "description": "The value for accumulator A24 from the previous pay period. This is used in formulas that include the variable P24.",
            "format": "double"
          },
          "prevMiscAccum25": {
            "type": "number",
            "description": "The value for accumulator A25 from the previous pay period. This is used in formulas that include the variable P25.",
            "format": "double"
          },
          "prevMiscAccum26": {
            "type": "number",
            "description": "The value for accumulator A26 from the previous pay period. This is used in formulas that include the variable P26.",
            "format": "double"
          },
          "prevMiscAccum27": {
            "type": "number",
            "description": "The value for accumulator A27 from the previous pay period. This is used in formulas that include the variable P27.",
            "format": "double"
          },
          "prevMiscAccum28": {
            "type": "number",
            "description": "The value for accumulator A28 from the previous pay period. This is used in formulas that include the variable P28.",
            "format": "double"
          },
          "prevMiscAccum29": {
            "type": "number",
            "description": "The value for accumulator A29 from the previous pay period. This is used in formulas that include the variable P29.",
            "format": "double"
          },
          "prevMiscAccum30": {
            "type": "number",
            "description": "The value for accumulator A30 from the previous pay period. This is used in formulas that include the variable P30.",
            "format": "double"
          },
          "roleAssignmentPermissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleAssignmentPermission"
            },
            "nullable": true
          },
          "employeeNameFormat": {
            "type": "integer",
            "format": "int32"
          },
          "fullName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "chequeOption": {
            "type": "string"
          },
          "pronouns": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EmployeeAcceptance": {
        "type": "object",
        "properties": {
          "poolEntryId": {
            "type": "integer",
            "format": "int32"
          },
          "pickupEntryId": {
            "type": "integer",
            "format": "int32"
          },
          "approved": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "EmployeeAddress": {
        "required": [
          "address1",
          "city",
          "country",
          "postal",
          "province"
        ],
        "type": "object",
        "properties": {
          "empNo": {
            "type": "string",
            "description": "The employee number of the employee. When not provided the employee number assigned to the current user will be used if available.",
            "nullable": true
          },
          "address1": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "description": "The first line of the employee's home address."
          },
          "address2": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "description": "The second line of the employee's home address.",
            "nullable": true
          },
          "city": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "description": "The city for the employee's home address."
          },
          "province": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "The two character abbreviation of the province or state for the employee's home address. If the employee resides outside of Canada and the United States, province should be ZZ."
          },
          "country": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "The three-character abbreviation of the country where the employee resides. If the province is a Canadian province or territory, the country should CAN. If the province is an American state, the country should be USA."
          },
          "postal": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "The postal code of the employee's home address."
          }
        },
        "additionalProperties": false
      },
      "EmployeeBasicInfo": {
        "required": [
          "birthDate",
          "firstLanguage",
          "gender",
          "givenName",
          "marital",
          "surname"
        ],
        "type": "object",
        "properties": {
          "empNo": {
            "type": "string",
            "description": "The employee number of the employee. When not provided the employee number assigned to the current user will be used if available.",
            "nullable": true
          },
          "givenName": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "description": "The employee's first name."
          },
          "surname": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "description": "The employee's last name."
          },
          "initial": {
            "maxLength": 1,
            "minLength": 0,
            "type": "string",
            "description": "The middle initial of the employee's name.",
            "nullable": true
          },
          "preferredName": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "description": "The name the employee prefers be called instead of their given name.",
            "nullable": true
          },
          "birthDate": {
            "type": "string",
            "description": "The date of the employee's birth in ISO 8601 format. This is used to determine the employees Canadian Pension Plan (CPP) eligibility.",
            "format": "date-time"
          },
          "firstLanguage": {
            "type": "string",
            "description": "Indicates whether the employee would like their correspondence, such as pay statements, in French or English. \nF is French.\nE is English."
          },
          "gender": {
            "type": "string",
            "description": "Indicates whether the gender is female, male, or undefined. \nF is female.\nM is male.\nX is undefined."
          },
          "sin": {
            "maxLength": 11,
            "minLength": 0,
            "type": "string",
            "description": "The employee's Social Insurance Number. If this is not available, nine zeros will be accepted. If the SIN starts with a 9, a sinExpiryDate should be specified.",
            "nullable": true
          },
          "sinExpiryDate": {
            "type": "string",
            "description": "The date the employee's temporary Social Insurance Number (SIN) will expire. If the employee's SIN begins with a 9, this should be specified. The SIN expiry is in ISO 8601 format.",
            "format": "date-time",
            "nullable": true
          },
          "marital": {
            "type": "string",
            "description": "The marital status of the employee.\n        M = Married\n\tS = Single\n\tD = CommonLaw\n\tE = Divorced\n\tF = Separated\n\tG = Widowed\n\tAny other character  = other"
          },
          "previousSurname": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "description": "The employee's previous surname, if applicable.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EmployeeBenefit": {
        "required": [
          "benefitGroup"
        ],
        "type": "object",
        "properties": {
          "smoker": {
            "type": "boolean"
          },
          "benefitGroup": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string"
          },
          "benefitGroupDescription": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EmployeeDefaultsGroup": {
        "type": "object",
        "properties": {
          "defaultsGroup": {
            "maxLength": 9,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "defaultsGroupName": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EmployeeEmail": {
        "required": [
          "email",
          "emailTypes"
        ],
        "type": "object",
        "properties": {
          "email": {
            "maxLength": 255,
            "type": "string"
          },
          "emailTypes": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "isPrimary": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EmployeeJobInfo": {
        "required": [
          "employmentStatus",
          "location",
          "position"
        ],
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "location": {
            "maxLength": 4,
            "minLength": 0,
            "type": "string"
          },
          "locationDescription": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "position": {
            "maxLength": 12,
            "minLength": 0,
            "type": "string"
          },
          "positionName": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "employmentStatus": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string"
          },
          "employmentStatusDescription": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "jobStatus": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "jobStatusDescription": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "wcbGroup": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "wcbGroupDescription": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "unionCode": {
            "maxLength": 6,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "unionCodeDescription": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "workGroup": {
            "maxLength": 9,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "workGroupDescription": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "scheduleTemplate": {
            "maxLength": 9,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "scheduleTemplateDescription": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "reportsToPosition": {
            "type": "string",
            "nullable": true
          },
          "reportsToEmployee": {
            "type": "string",
            "nullable": true
          },
          "employeeNumber": {
            "type": "string",
            "nullable": true
          },
          "employmentGroup": {
            "type": "string",
            "nullable": true
          },
          "employmentGroupDescription": {
            "type": "string",
            "nullable": true
          },
          "initialHireDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastHireDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "seniorityDate": {
            "type": "string",
            "description": "The date used to determine the employee's seniority in ISO 8601 format.",
            "format": "date-time",
            "nullable": true
          },
          "overtimeExempt": {
            "type": "boolean"
          },
          "scheduleStartDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "scheduleEndDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "employeeFte": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "EmployeePositionsDetails": {
        "type": "object",
        "properties": {
          "position": {
            "type": "string",
            "nullable": true
          },
          "positionName": {
            "type": "string",
            "nullable": true
          },
          "active": {
            "type": "string",
            "nullable": true
          },
          "payrate": {
            "type": "number",
            "format": "double"
          },
          "payRateUOM": {
            "type": "string"
          },
          "effectiveDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "expiryDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "rateSource": {
            "$ref": "#/components/schemas/RateSource"
          },
          "positionFte": {
            "type": "number",
            "format": "double"
          },
          "positionRateLevel": {
            "type": "integer",
            "format": "int32"
          },
          "ytdUnits": {
            "type": "number",
            "format": "double"
          },
          "ytdUOM": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EmployeeRate": {
        "type": "object",
        "properties": {
          "rateSource": {
            "type": "integer",
            "format": "int32"
          },
          "payGroup": {
            "type": "string",
            "nullable": true
          },
          "employeeMasterGLType": {
            "type": "string"
          },
          "employeeMasterBenGrp": {
            "type": "string",
            "nullable": true
          },
          "employeeMasterGLGroup": {
            "type": "string",
            "nullable": true
          },
          "employeeMasterEarnGL": {
            "type": "string",
            "nullable": true
          },
          "earningDate": {
            "type": "string",
            "format": "date-time"
          },
          "isValid": {
            "type": "boolean"
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          },
          "positionCode": {
            "type": "string",
            "nullable": true
          },
          "rateLevel": {
            "type": "integer",
            "format": "int32"
          },
          "empNo": {
            "type": "string",
            "description": "The employee number of the employee. When not provided the employee number assigned to the current user will be used if available.",
            "nullable": true
          },
          "uom": {
            "type": "string"
          },
          "payRate": {
            "type": "number",
            "format": "double"
          },
          "earnCode": {
            "type": "string",
            "nullable": true
          },
          "gridCode": {
            "type": "string",
            "nullable": true
          },
          "glSource": {
            "type": "integer",
            "format": "int32"
          },
          "gridPercent": {
            "type": "number",
            "format": "double"
          },
          "glType": {
            "type": "string"
          },
          "glGrp": {
            "type": "string",
            "nullable": true
          },
          "earnGL": {
            "type": "string",
            "nullable": true
          },
          "benGrp": {
            "type": "string",
            "nullable": true
          },
          "rateSourceDescription": {
            "type": "string",
            "nullable": true
          },
          "effectiveDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "EmployeeSortOrder": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "EmployeeSummary": {
        "type": "object",
        "properties": {
          "empNo": {
            "type": "string",
            "description": "The employee number of the employee. When not provided the employee number assigned to the current user will be used if available.",
            "nullable": true
          },
          "givenName": {
            "type": "string",
            "description": "The employee's first name.",
            "nullable": true
          },
          "surname": {
            "type": "string",
            "description": "The employee's last name.",
            "nullable": true
          },
          "preferredName": {
            "type": "string",
            "description": "The name the employee prefers be called instead of their given name.",
            "nullable": true
          },
          "initial": {
            "type": "string",
            "description": "The middle initial of the employee's name.",
            "nullable": true
          },
          "positionName": {
            "type": "string",
            "nullable": true
          },
          "positionNameFr": {
            "type": "string",
            "nullable": true
          },
          "photoRevision": {
            "type": "integer",
            "description": "Used to prevent photo caching. When the photo is updated or the existing photo is deleted, enter a unique value here to ensure that the changes are applied immediately.",
            "format": "int64",
            "nullable": true
          },
          "active": {
            "type": "boolean"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "primaryPositionCode": {
            "type": "string",
            "nullable": true
          },
          "payGroupCode": {
            "type": "string",
            "nullable": true
          },
          "payGroupDesc": {
            "type": "string",
            "nullable": true
          },
          "locationCode": {
            "type": "string",
            "nullable": true
          },
          "locationDesc": {
            "type": "string",
            "nullable": true
          },
          "employStatusCode": {
            "type": "string",
            "nullable": true
          },
          "employStatusDesc": {
            "type": "string",
            "nullable": true
          },
          "jobStatusCode": {
            "type": "string",
            "nullable": true
          },
          "jobStatusDesc": {
            "type": "string",
            "nullable": true
          },
          "fte": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "EmployeeVacationInfo": {
        "required": [
          "vacationGroup"
        ],
        "type": "object",
        "properties": {
          "vacationGroup": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string"
          },
          "vacationGroupDescription": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "vacationOption": {
            "type": "string"
          },
          "vacationOptionDescription": {
            "type": "string",
            "nullable": true
          },
          "vacationEarnCode": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "vacationEarnCodeDescription": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "vacationEarnCodeDescriptionFr": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "vacationPercent": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "EmploymentHistory": {
        "required": [
          "empNo",
          "jobStatus",
          "payUnit",
          "reason",
          "title"
        ],
        "type": "object",
        "properties": {
          "empNo": {
            "maxLength": 9,
            "minLength": 0,
            "type": "string",
            "description": "The employee number of the employee. When not provided the employee number assigned to the current user will be used if available."
          },
          "employStatus": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "description": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "compaRate": {
            "type": "number",
            "format": "double"
          },
          "fromDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "toDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "grid": {
            "maxLength": 12,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "gridPercent": {
            "maximum": 999,
            "minimum": 0,
            "type": "number",
            "format": "double"
          },
          "location": {
            "maxLength": 4,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "reason": {
            "maxLength": 9,
            "minLength": 0,
            "type": "string"
          },
          "payGroup": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "payRate": {
            "maximum": 10000000,
            "minimum": 0,
            "type": "number",
            "format": "double"
          },
          "payUnit": {
            "type": "string"
          },
          "position": {
            "maxLength": 12,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "title": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "This property is not used at this time."
          },
          "unionCode": {
            "maxLength": 9,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "jobStatus": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string"
          },
          "supervisor": {
            "maxLength": 9,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "supervisorPosition": {
            "maxLength": 12,
            "minLength": 0,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EntitlementValidationType": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "EventAttributes": {
        "enum": [
          0,
          512,
          1024
        ],
        "type": "integer",
        "format": "int32"
      },
      "EventInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "declaringType": {
            "$ref": "#/components/schemas/Type"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/Type"
          },
          "module": {
            "$ref": "#/components/schemas/Module"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "memberType": {
            "$ref": "#/components/schemas/MemberTypes"
          },
          "attributes": {
            "$ref": "#/components/schemas/EventAttributes"
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true
          },
          "addMethod": {
            "$ref": "#/components/schemas/MethodInfo"
          },
          "removeMethod": {
            "$ref": "#/components/schemas/MethodInfo"
          },
          "raiseMethod": {
            "$ref": "#/components/schemas/MethodInfo"
          },
          "isMulticast": {
            "type": "boolean",
            "readOnly": true
          },
          "eventHandlerType": {
            "$ref": "#/components/schemas/Type"
          }
        },
        "additionalProperties": false
      },
      "FieldAttributes": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          16,
          32,
          64,
          128,
          256,
          512,
          1024,
          4096,
          8192,
          32768,
          38144
        ],
        "type": "integer",
        "format": "int32"
      },
      "FieldInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "declaringType": {
            "$ref": "#/components/schemas/Type"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/Type"
          },
          "module": {
            "$ref": "#/components/schemas/Module"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "memberType": {
            "$ref": "#/components/schemas/MemberTypes"
          },
          "attributes": {
            "$ref": "#/components/schemas/FieldAttributes"
          },
          "fieldType": {
            "$ref": "#/components/schemas/Type"
          },
          "isInitOnly": {
            "type": "boolean",
            "readOnly": true
          },
          "isLiteral": {
            "type": "boolean",
            "readOnly": true
          },
          "isNotSerialized": {
            "type": "boolean",
            "readOnly": true
          },
          "isPinvokeImpl": {
            "type": "boolean",
            "readOnly": true
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true
          },
          "isStatic": {
            "type": "boolean",
            "readOnly": true
          },
          "isAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamily": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamilyAndAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamilyOrAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isPrivate": {
            "type": "boolean",
            "readOnly": true
          },
          "isPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecurityCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecuritySafeCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecurityTransparent": {
            "type": "boolean",
            "readOnly": true
          },
          "fieldHandle": {
            "$ref": "#/components/schemas/RuntimeFieldHandle"
          }
        },
        "additionalProperties": false
      },
      "File": {
        "type": "object",
        "properties": {
          "contentType": {
            "type": "string",
            "description": "The file type which will be one of the following valid options: jpeg, png, webp.",
            "nullable": true
          },
          "data": {
            "type": "string",
            "description": "A byte array of the employee's photo.",
            "format": "byte",
            "nullable": true
          },
          "contentLength": {
            "type": "integer",
            "description": "This property is not used at this time.",
            "format": "int32"
          },
          "fileName": {
            "type": "string",
            "description": "The filename and extension of the employee's photo.",
            "nullable": true
          },
          "revision": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Filter": {
        "type": "object",
        "properties": {
          "table": {
            "type": "string",
            "description": "The SQL table that contains the data that the report is being filtered on.",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "description": "A unique numeric identifier for each filter. Must be set.",
            "format": "int32"
          },
          "description": {
            "type": "string",
            "description": "This is for internal use, and cannot be set.",
            "nullable": true
          },
          "letter": {
            "type": "string",
            "description": "Determines the order of the filters, A is first and Z is last.",
            "nullable": true
          },
          "fieldName": {
            "type": "string",
            "description": "The field that the filter is being set on.",
            "nullable": true
          },
          "condition": {
            "type": "integer",
            "description": "How the value must relate to the field name. Enter the number for the condition. \n  Enter 0 for < \n  Enter 1 for =\n  Enter 2 for >\n  Enter 3 for <=\n  Enter 4 for <>\n  Enter 5 for  >=\n  Enter 6 for 'Like'\n  Enter 7 for 'Not Like'\n  Enter 8 for 'In'\n  Enter 9 for 'Not In'",
            "format": "int32"
          },
          "value": {
            "type": "string",
            "description": "The value that the data will be compared to in the filter. If valueType is 3, this should be a SQL expression.",
            "nullable": true
          },
          "valueType": {
            "type": "integer",
            "description": "Enter number of the type of value being used in the filter. \n   0 = Field Value\n   1 = Field Name\n   2 = SQL Expression",
            "format": "int32"
          },
          "conjunction": {
            "type": "integer",
            "description": "Determines how this filter relates to the next filter in the same filter table. The order of the filters depends on the filter letter.  \n   0 = And\n   1 = Or\n\nIf you are filtering the results by multiple tables, the data must meet the filters for both tables to be included.",
            "format": "int32"
          },
          "openingBrackets": {
            "type": "integer",
            "description": "The number of brackets before this filter that define the relationship between multiple filters. \nFor example: If you want the filter relationship (A or B) and (C or D), enter 1 for openingBrackets on filter A and C.",
            "format": "int32"
          },
          "closingBrackets": {
            "type": "integer",
            "description": "The number of brackets after this filter that define the relationship between multiple filters. \nFor example: If you want the filter relationship (A or B) and (C or D), enter 1 for closingBrackets on filter B and D.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "FilterDefinition": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string",
            "description": "Filter the codes returned by ID or description. This is required if you're filtering the returned codes. \n\nCode will filter by the ID. Description will filter by the code's description.",
            "nullable": true
          },
          "operator": {
            "type": "string",
            "description": "Will return codes that contain the value or does not contain the value. This is required if you're filtering the returned codes. \n\nContains will return codes that have the value. Doesnotcontain will return codes that do not have the value.",
            "nullable": true
          },
          "value": {
            "type": "string",
            "description": "The value that the returned code must contain or not contain. \n\nThis is required if you're filtering the returned codes.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GenericParameterAttributes": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          8,
          16,
          28
        ],
        "type": "integer",
        "format": "int32"
      },
      "GetCodes": {
        "type": "object",
        "properties": {
          "codes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CodeDescription"
            },
            "nullable": true
          },
          "count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "skip": {
            "type": "integer",
            "description": "The number of entries to skip.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetCodesOptions": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "skip": {
            "type": "integer",
            "description": "The number of entries to skip.",
            "format": "int32"
          },
          "take": {
            "type": "integer",
            "description": "The number of entries to take.",
            "format": "int32"
          },
          "count": {
            "type": "boolean"
          },
          "code": {
            "type": "string",
            "nullable": true
          },
          "sorting": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SortDefinition"
            },
            "nullable": true
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterDefinition"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetEmployeeSummaries": {
        "type": "object",
        "properties": {
          "employees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmployeeSummary"
            },
            "nullable": true
          },
          "total": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "index": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetNotifications": {
        "type": "object",
        "properties": {
          "notifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Notification"
            },
            "nullable": true
          },
          "read": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Returns all the notifications read since the lastLoaded date. This is only returned if lastLoaded is included in the request parameters.",
            "nullable": true
          },
          "unread": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Returns all the notifications marked as unread since the lastLoaded date. This is only returned if lastLoaded is included in the request parameters.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetNotificationTypeSettings": {
        "type": "object",
        "properties": {
          "typeId": {
            "type": "integer",
            "description": "The identifier for the notification type.",
            "format": "int32"
          },
          "parentId": {
            "type": "integer",
            "description": "Will display the notification type id, if this notification type is a subcategory. \nIf -1 is returned, this notification type is not a subcategory.",
            "format": "int32",
            "nullable": true
          },
          "required": {
            "type": "boolean",
            "description": "If True, employees will be unable to change whether they will receive these notifications. If False, employees can choose whether they will receive these notifications. \nWhether employees can receive this notification type will be determined based on the selection for Enabled."
          },
          "enabledDefault": {
            "type": "boolean",
            "description": "If true, this type of notification is enabled for employees by default. If false, this type of notification is disabled for employees by default."
          },
          "active": {
            "type": "boolean",
            "description": "Indicates whether this type of notification is being used by the company. Returns True if the notification type is being used. Returns False if the notification type is not used in the company."
          },
          "name": {
            "type": "string",
            "description": "The English name for the notification type.",
            "nullable": true
          },
          "nameFr": {
            "type": "string",
            "description": "The French name for the notification type.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The English description for the notification type. \nThis displays beneath the Type Name in Notification Settings when the employee logs into Avanti Go in English.",
            "nullable": true
          },
          "descriptionFr": {
            "type": "string",
            "description": "The French description for the notification type. \nThis displays beneath the Type Name in Notification Settings when the employee logs into Avanti Go in French.",
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "description": "Indicates whether this type of notification is being used by the employee attached to the user."
          },
          "notificationTypeSettings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetNotificationTypeSettings"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetSetup": {
        "type": "object",
        "properties": {
          "definitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CodeDefinition"
            },
            "nullable": true
          },
          "codeType": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetWorkedHours": {
        "type": "object",
        "properties": {
          "totalForDay": {
            "type": "number",
            "format": "double"
          },
          "remainingForDay": {
            "type": "number",
            "format": "double"
          },
          "workedForDay": {
            "type": "number",
            "format": "double"
          },
          "totalForWeek": {
            "type": "number",
            "format": "double"
          },
          "remainingForWeek": {
            "type": "number",
            "format": "double"
          },
          "workedForWeek": {
            "type": "number",
            "format": "double"
          },
          "totalForPayPeriod": {
            "type": "number",
            "format": "double"
          },
          "remainingForPayPeriod": {
            "type": "number",
            "format": "double"
          },
          "workedForPayPeriod": {
            "type": "number",
            "format": "double"
          },
          "workWeekStartDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "workWeekEndDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "payPeriodMessage": {
            "type": "string",
            "nullable": true
          },
          "payPeriodStartDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "payPeriodEndDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GlAccount": {
        "type": "object",
        "properties": {
          "account": {
            "type": "string",
            "nullable": true
          },
          "accountMask": {
            "type": "string",
            "nullable": true
          },
          "accountMaskNoProject": {
            "type": "string",
            "nullable": true
          },
          "majorSegment": {
            "type": "integer",
            "format": "int32"
          },
          "majorSegmentType": {
            "type": "string"
          },
          "segments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Segment"
            },
            "nullable": true
          },
          "currentGlAccountText": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GlAccountDescription": {
        "type": "object",
        "properties": {
          "account": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GlInfo": {
        "type": "object",
        "properties": {
          "account": {
            "maxLength": 60,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "accountDescription": {
            "type": "string",
            "nullable": true
          },
          "accountDescriptionAbrev": {
            "type": "string",
            "nullable": true
          },
          "benefitGroup": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "benefitGroupName": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "group": {
            "maxLength": 4,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "groupName": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "option": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "GlOption": {
        "enum": [
          "a",
          "b",
          "g",
          "m"
        ],
        "type": "string",
        "description": "An A, G, B or M indicating the GL Type. \nA indicates an account. \nG indicates a GL Group. \nB indicates the Basic GL.\nM indicates the GL on the employee's Employment Data."
      },
      "GlSegmentValue": {
        "type": "object",
        "properties": {
          "no": {
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GlSetup": {
        "type": "object",
        "properties": {
          "glAccount": {
            "$ref": "#/components/schemas/GlAccount"
          },
          "projectSegment": {
            "type": "integer",
            "format": "int32"
          },
          "projectSegmentStart": {
            "type": "integer",
            "format": "int32"
          },
          "useGlFullAccountValidation": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "History": {
        "type": "object",
        "properties": {
          "createdDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "HrSettings": {
        "type": "object",
        "properties": {
          "showSinOnEmployeeDependents": {
            "type": "boolean"
          },
          "dependentHiddenFields": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "emergencyContactHiddenFields": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "emergencyContactManagerReadOnlyForSelf": {
            "type": "boolean"
          },
          "emergencyContactClassABReadOnly": {
            "type": "boolean"
          },
          "emergencyContactFieldDisplayName": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "emergencyContactColumnDisplayName": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "emergencyContactClassCReadOnly": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "IComponent": {
        "type": "object",
        "properties": {
          "site": {
            "$ref": "#/components/schemas/ISite"
          }
        },
        "additionalProperties": false
      },
      "IContainer": {
        "type": "object",
        "properties": {
          "components": {
            "type": "array",
            "items": { },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ICustomAttributeProvider": {
        "type": "object",
        "additionalProperties": false
      },
      "ImportClockDataResult": {
        "type": "object",
        "properties": {
          "importedTimeData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClockData"
            },
            "nullable": true
          },
          "invalidTimeData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClockDataRequest"
            },
            "nullable": true
          },
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IntPtr": {
        "type": "object",
        "additionalProperties": false
      },
      "ISite": {
        "type": "object",
        "properties": {
          "component": {
            "$ref": "#/components/schemas/IComponent"
          },
          "container": {
            "$ref": "#/components/schemas/IContainer"
          },
          "designMode": {
            "type": "boolean",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "JobData": {
        "type": "object",
        "properties": {
          "employeeJobInfo": {
            "$ref": "#/components/schemas/EmployeeJobInfo"
          },
          "glInfo": {
            "$ref": "#/components/schemas/GlInfo"
          },
          "userDefinedDates": {
            "$ref": "#/components/schemas/UserDefinedDates"
          },
          "userDefinedValues": {
            "$ref": "#/components/schemas/UserDefinedValues"
          },
          "position": {
            "$ref": "#/components/schemas/Position"
          },
          "employeePositions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmployeePositionsDetails"
            },
            "nullable": true
          },
          "ytdLtdPositionUnits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/YtdLtdPositionUnits"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Language": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "format": "int32"
      },
      "LayoutKind": {
        "enum": [
          0,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "authState": {
            "$ref": "#/components/schemas/AuthState"
          },
          "companyList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextValuePair"
            },
            "nullable": true
          },
          "secretQuestions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SecretAnswer"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MappingType": {
        "enum": [
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "format": "int32"
      },
      "MarkAllReadRequest": {
        "type": "object",
        "properties": {
          "notificationId": {
            "type": "integer",
            "format": "int32"
          },
          "notificationTypes": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "search": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MemberInfo": {
        "type": "object",
        "properties": {
          "module": {
            "$ref": "#/components/schemas/Module"
          },
          "memberType": {
            "$ref": "#/components/schemas/MemberTypes"
          },
          "declaringType": {
            "$ref": "#/components/schemas/Type"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/Type"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "MemberTypes": {
        "enum": [
          1,
          2,
          4,
          8,
          16,
          32,
          64,
          128,
          191
        ],
        "type": "integer",
        "format": "int32"
      },
      "MenuItem": {
        "required": [
          "respDelete",
          "respInsert",
          "respModify",
          "respView",
          "roleType",
          "userGroups"
        ],
        "type": "object",
        "properties": {
          "programName": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "respInsert": {
            "type": "string"
          },
          "respModify": {
            "type": "string"
          },
          "respView": {
            "type": "string"
          },
          "respDelete": {
            "type": "string"
          },
          "responsibility": {
            "type": "string",
            "nullable": true
          },
          "userGroup": {
            "type": "string",
            "nullable": true
          },
          "userGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            }
          },
          "roleType": {
            "type": "integer",
            "format": "int32"
          },
          "active": {
            "type": "boolean"
          },
          "menuId": {
            "type": "integer",
            "format": "int32"
          },
          "parentId": {
            "type": "integer",
            "format": "int32"
          },
          "sortOrder": {
            "type": "integer",
            "format": "int32"
          },
          "descriptionFr": {
            "type": "string",
            "nullable": true
          },
          "menuSystem": {
            "type": "string",
            "nullable": true
          },
          "menuPassword": {
            "type": "string",
            "nullable": true
          },
          "menuKey": {
            "type": "integer",
            "format": "int32"
          },
          "hKey": {
            "type": "integer",
            "format": "int32"
          },
          "passwordHKey": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "reportId": {
            "type": "integer",
            "format": "int32"
          },
          "landscapeReportId": {
            "type": "integer",
            "format": "int32"
          },
          "helpId": {
            "type": "integer",
            "format": "int32"
          },
          "language": {
            "type": "integer",
            "format": "int32"
          },
          "urlOverride": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "programOption1": {
            "type": "string",
            "nullable": true
          },
          "programOption2": {
            "type": "string",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MenuItem"
            },
            "nullable": true
          },
          "source": {
            "$ref": "#/components/schemas/MenuItemSource"
          },
          "allowView": {
            "type": "boolean",
            "readOnly": true
          },
          "allowModify": {
            "type": "boolean",
            "readOnly": true
          },
          "allowInsert": {
            "type": "boolean",
            "readOnly": true
          },
          "allowDelete": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "MenuItemSource": {
        "enum": [
          0,
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "format": "int32"
      },
      "MetaData": {
        "type": "object",
        "properties": {
          "labels": {
            "$ref": "#/components/schemas/MetaDataLabelResults"
          }
        },
        "additionalProperties": false
      },
      "MetaDataLabel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "label": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MetaDataLabelResults": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetaDataLabel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MethodAttributes": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          16,
          32,
          64,
          128,
          256,
          512,
          1024,
          2048,
          4096,
          8192,
          16384,
          32768,
          53248
        ],
        "type": "integer",
        "format": "int32"
      },
      "MethodBase": {
        "type": "object",
        "properties": {
          "memberType": {
            "$ref": "#/components/schemas/MemberTypes"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "declaringType": {
            "$ref": "#/components/schemas/Type"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/Type"
          },
          "module": {
            "$ref": "#/components/schemas/Module"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "attributes": {
            "$ref": "#/components/schemas/MethodAttributes"
          },
          "methodImplementationFlags": {
            "$ref": "#/components/schemas/MethodImplAttributes"
          },
          "callingConvention": {
            "$ref": "#/components/schemas/CallingConventions"
          },
          "isAbstract": {
            "type": "boolean",
            "readOnly": true
          },
          "isConstructor": {
            "type": "boolean",
            "readOnly": true
          },
          "isFinal": {
            "type": "boolean",
            "readOnly": true
          },
          "isHideBySig": {
            "type": "boolean",
            "readOnly": true
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true
          },
          "isStatic": {
            "type": "boolean",
            "readOnly": true
          },
          "isVirtual": {
            "type": "boolean",
            "readOnly": true
          },
          "isAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamily": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamilyAndAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamilyOrAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isPrivate": {
            "type": "boolean",
            "readOnly": true
          },
          "isPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isConstructedGenericMethod": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericMethod": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericMethodDefinition": {
            "type": "boolean",
            "readOnly": true
          },
          "containsGenericParameters": {
            "type": "boolean",
            "readOnly": true
          },
          "methodHandle": {
            "$ref": "#/components/schemas/RuntimeMethodHandle"
          },
          "isSecurityCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecuritySafeCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecurityTransparent": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "MethodImplAttributes": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          8,
          16,
          32,
          64,
          128,
          256,
          512,
          4096,
          65535
        ],
        "type": "integer",
        "format": "int32"
      },
      "MethodInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "declaringType": {
            "$ref": "#/components/schemas/Type"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/Type"
          },
          "module": {
            "$ref": "#/components/schemas/Module"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "attributes": {
            "$ref": "#/components/schemas/MethodAttributes"
          },
          "methodImplementationFlags": {
            "$ref": "#/components/schemas/MethodImplAttributes"
          },
          "callingConvention": {
            "$ref": "#/components/schemas/CallingConventions"
          },
          "isAbstract": {
            "type": "boolean",
            "readOnly": true
          },
          "isConstructor": {
            "type": "boolean",
            "readOnly": true
          },
          "isFinal": {
            "type": "boolean",
            "readOnly": true
          },
          "isHideBySig": {
            "type": "boolean",
            "readOnly": true
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true
          },
          "isStatic": {
            "type": "boolean",
            "readOnly": true
          },
          "isVirtual": {
            "type": "boolean",
            "readOnly": true
          },
          "isAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamily": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamilyAndAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamilyOrAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isPrivate": {
            "type": "boolean",
            "readOnly": true
          },
          "isPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isConstructedGenericMethod": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericMethod": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericMethodDefinition": {
            "type": "boolean",
            "readOnly": true
          },
          "containsGenericParameters": {
            "type": "boolean",
            "readOnly": true
          },
          "methodHandle": {
            "$ref": "#/components/schemas/RuntimeMethodHandle"
          },
          "isSecurityCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecuritySafeCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecurityTransparent": {
            "type": "boolean",
            "readOnly": true
          },
          "memberType": {
            "$ref": "#/components/schemas/MemberTypes"
          },
          "returnParameter": {
            "$ref": "#/components/schemas/ParameterInfo"
          },
          "returnType": {
            "$ref": "#/components/schemas/Type"
          },
          "returnTypeCustomAttributes": {
            "$ref": "#/components/schemas/ICustomAttributeProvider"
          }
        },
        "additionalProperties": false
      },
      "Module": {
        "type": "object",
        "properties": {
          "assembly": {
            "$ref": "#/components/schemas/Assembly"
          },
          "fullyQualifiedName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "mdStreamVersion": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "moduleVersionId": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "scopeName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "moduleHandle": {
            "$ref": "#/components/schemas/ModuleHandle"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ModuleHandle": {
        "type": "object",
        "properties": {
          "mdStreamVersion": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "NewExperienceSetup": {
        "required": [
          "selectedUserGroups"
        ],
        "type": "object",
        "properties": {
          "userGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            },
            "nullable": true
          },
          "selectedUserGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "roleTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextValuePair"
            },
            "nullable": true
          },
          "menuItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MenuItem"
            },
            "nullable": true
          },
          "icons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextValuePair"
            },
            "nullable": true
          },
          "programMappings": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "nullable": true
          },
          "asspClearCacheUrl": {
            "type": "string",
            "nullable": true
          },
          "requireTermsOfServiceUpdate": {
            "type": "boolean"
          },
          "termsOfService": {
            "$ref": "#/components/schemas/TermsOfService"
          }
        },
        "additionalProperties": false
      },
      "NewHire": {
        "required": [
          "basicRateOfPay",
          "basicRateOfPayUnit",
          "birthDate",
          "email",
          "empNo",
          "fte",
          "gender",
          "givenName",
          "glType",
          "gridPercentage",
          "initialHireDate",
          "language",
          "locationCode",
          "payGroup",
          "province",
          "provinceOfEmployment",
          "surname",
          "vacationGroup",
          "vacationOption",
          "wcbGroup"
        ],
        "type": "object",
        "properties": {
          "empNo": {
            "maxLength": 9,
            "minLength": 0,
            "type": "string",
            "description": "The employee number of the employee. When not provided the employee number assigned to the current user will be used if available."
          },
          "givenName": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "description": "The employee's first name."
          },
          "surname": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "description": "The employee's last name."
          },
          "initial": {
            "maxLength": 1,
            "minLength": 0,
            "type": "string",
            "description": "The middle initial of the employee's name.",
            "nullable": true
          },
          "preferredName": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "description": "The name the employee prefers be called instead of their given name.",
            "nullable": true
          },
          "city": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "description": "The city for the employee's home address.",
            "nullable": true
          },
          "province": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "The two character abbreviation of the province or state for the employee's home address. If the employee resides outside of Canada and the United States, province should be ZZ."
          },
          "country": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "The three-character abbreviation of the country where the employee resides. If the province is a Canadian province or territory, the country should CAN. If the province is an American state, the country should be USA.",
            "nullable": true
          },
          "postalCode": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "sin": {
            "type": "string",
            "description": "The employee's Social Insurance Number. If this is not available, nine zeros will be accepted. If the SIN starts with a 9, a sinExpiryDate should be specified.",
            "nullable": true
          },
          "sinExpiryDate": {
            "type": "string",
            "description": "The date the employee's temporary Social Insurance Number (SIN) will expire. If the employee's SIN begins with a 9, this should be specified. The SIN expiry is in ISO 8601 format.",
            "format": "date-time",
            "nullable": true
          },
          "birthDate": {
            "type": "string",
            "description": "The date of the employee's birth in ISO 8601 format. This is used to determine the employees Canadian Pension Plan (CPP) eligibility.",
            "format": "date-time"
          },
          "defaultGroup": {
            "type": "string",
            "nullable": true
          },
          "payGroup": {
            "type": "string"
          },
          "locationCode": {
            "type": "string"
          },
          "vacationGroup": {
            "type": "string"
          },
          "vacationOption": {
            "type": "string"
          },
          "vacationEarnCode": {
            "type": "string",
            "nullable": true
          },
          "wcbGroup": {
            "type": "string"
          },
          "unionCode": {
            "type": "string",
            "nullable": true
          },
          "positionCode": {
            "type": "string",
            "nullable": true
          },
          "insertJobClassifcationRequirements": {
            "type": "boolean"
          },
          "benefitGroup": {
            "type": "string",
            "nullable": true
          },
          "overrideBenefitCoverage": {
            "type": "boolean"
          },
          "overrideBenefitCoverageDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "overrideBenefitPremium": {
            "type": "boolean"
          },
          "overrideBenefitPremiumDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "glType": {
            "type": "string"
          },
          "glGroup": {
            "type": "string",
            "nullable": true
          },
          "glAccount": {
            "type": "string",
            "nullable": true
          },
          "glAccountValues": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "glBenefitGroup": {
            "type": "string",
            "nullable": true
          },
          "useWorkGroups": {
            "type": "boolean"
          },
          "workGroup": {
            "type": "string",
            "nullable": true
          },
          "scheduleTemplate": {
            "type": "string",
            "nullable": true
          },
          "initialHireDate": {
            "type": "string",
            "format": "date-time"
          },
          "fte": {
            "maximum": 9.9999,
            "minimum": 0,
            "type": "number",
            "format": "double"
          },
          "language": {
            "type": "string"
          },
          "gender": {
            "type": "string",
            "description": "Indicates whether the gender is female, male, or undefined. \nF is female.\nM is male.\nX is undefined."
          },
          "maritalStatus": {
            "type": "string"
          },
          "smoker": {
            "type": "boolean"
          },
          "salaried": {
            "type": "boolean"
          },
          "provinceOfEmployment": {
            "type": "string"
          },
          "employmentStatus": {
            "type": "string",
            "nullable": true
          },
          "jobStatus": {
            "type": "string",
            "nullable": true
          },
          "gridCode": {
            "type": "string",
            "nullable": true
          },
          "reason": {
            "type": "string",
            "nullable": true
          },
          "comment": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "gridPercentage": {
            "maximum": 999,
            "minimum": 0,
            "type": "number",
            "format": "double"
          },
          "basicRateOfPay": {
            "maximum": 10000000,
            "minimum": 0,
            "type": "number",
            "format": "double"
          },
          "basicRateOfPayUnit": {
            "type": "string"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "statementOption": {
            "$ref": "#/components/schemas/StatementOption"
          },
          "bank": {
            "type": "string",
            "nullable": true
          },
          "bankTransit": {
            "type": "string",
            "nullable": true
          },
          "bankAccount": {
            "type": "string",
            "nullable": true
          },
          "bankType": {
            "type": "string",
            "nullable": true
          },
          "bankFrequency": {
            "type": "integer",
            "format": "int32"
          },
          "depositPercent": {
            "type": "number",
            "format": "double"
          },
          "depositAmount": {
            "type": "number",
            "format": "double"
          },
          "benefitMessages": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "generateNextEmpNo": {
            "type": "boolean"
          },
          "dedFig": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeductionFigure"
            },
            "nullable": true
          },
          "otherDate": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OtherDate"
            },
            "nullable": true
          },
          "otherText": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OtherText"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NewHireSetupResponse": {
        "type": "object",
        "properties": {
          "defaultGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextValuePair"
            },
            "nullable": true
          },
          "provinces": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextValuePair"
            },
            "nullable": true
          },
          "payGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextValuePair"
            },
            "nullable": true
          },
          "rateGrids": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RateGrid"
            },
            "nullable": true
          },
          "unitsOfMeasure": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextValuePair"
            },
            "nullable": true
          },
          "vacationEarningCodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextValuePair"
            },
            "nullable": true
          },
          "positions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Position"
            },
            "nullable": true
          },
          "locations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextValuePair"
            },
            "nullable": true
          },
          "employmentStatus": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextValuePair"
            },
            "nullable": true
          },
          "jobStatus": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextValuePair"
            },
            "nullable": true
          },
          "workersComp": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextValuePair"
            },
            "nullable": true
          },
          "unions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextValuePair"
            },
            "nullable": true
          },
          "workGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextValuePair"
            },
            "nullable": true
          },
          "scheduleTemplate": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextValuePair"
            },
            "nullable": true
          },
          "benefitGroup": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextValuePair"
            },
            "nullable": true
          },
          "useWorkGroups": {
            "type": "boolean"
          },
          "useUnionCodes": {
            "type": "boolean"
          },
          "hasTcLicense": {
            "type": "boolean"
          },
          "useDefaultGroups": {
            "type": "boolean"
          },
          "useBenefitGroups": {
            "type": "boolean"
          },
          "payRatePrecision": {
            "type": "integer",
            "format": "int32"
          },
          "vacationGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextValuePair"
            },
            "nullable": true
          },
          "vacationOptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextValuePair"
            },
            "nullable": true
          },
          "glSetup": {
            "$ref": "#/components/schemas/GlSetup"
          },
          "glBenefitGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextValuePair"
            },
            "nullable": true
          },
          "glGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextValuePair"
            },
            "nullable": true
          },
          "reason": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextValuePair"
            },
            "nullable": true
          },
          "lastEmployeeNumber": {
            "type": "integer",
            "format": "int32"
          },
          "employeeNumberMask": {
            "type": "string",
            "nullable": true
          },
          "modifySin": {
            "type": "boolean"
          },
          "viewSin": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Notification": {
        "type": "object",
        "properties": {
          "notificationId": {
            "type": "integer",
            "description": "The numeric identifier for the notification.",
            "format": "int32"
          },
          "pushed": {
            "$ref": "#/components/schemas/Pushed"
          },
          "isRead": {
            "type": "boolean",
            "description": "True if the notification is read. False if the notification is marked as unread."
          },
          "username": {
            "type": "string",
            "description": "The Avanti User Name that the employee uses to log into ASSP, Avanti Go, and the Avanti Desktop Application, if applicable. Must be a valid Avanti User Name.",
            "nullable": true
          },
          "actionId": {
            "type": "string",
            "description": "Additional information about the notification, based on the notificationTypeId. If the notificationTypeId is 2, this returns the run number of the pay statement. If the notificationTypeId is 10001, this returns the schedule ID.",
            "nullable": true
          },
          "notificationTypeId": {
            "type": "integer",
            "description": "The numeric identifier for the notification type.\nNotification Type 1 is General. Notification Type 2 is pay statements. Notification Type 10001 is schedules.",
            "format": "int32"
          },
          "subject": {
            "type": "string",
            "description": "The subject line of the notification.",
            "nullable": true
          },
          "content": {
            "type": "string",
            "description": "The full text of the notification.",
            "nullable": true
          },
          "excerpt": {
            "type": "string",
            "description": "The first 128 characters of the content.",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "description": "The date the notification was created in ISO 8601 format.",
            "format": "date-time"
          },
          "modifiedDate": {
            "type": "string",
            "description": "The date the notification was last marked as read or unread, in ISO 8601 format.",
            "format": "date-time",
            "nullable": true
          },
          "notificationParameters": {
            "$ref": "#/components/schemas/TextValuePair"
          },
          "sessionId": {
            "type": "string",
            "nullable": true
          },
          "menuId": {
            "type": "integer",
            "description": "The Avanti menu that can be used with the ActionId to redirect users to the information in Avanti. For example, if the notification is for pay statements, the menuId is the pay statements menu. The ActionId  can be used to pull the pay statement from the notification.",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "subjectFr": {
            "type": "string",
            "nullable": true
          },
          "contentFr": {
            "type": "string",
            "nullable": true
          },
          "excerptFr": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NotificationSettings": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "NotificationSettingState": {
        "type": "object",
        "properties": {
          "notificationType": {
            "type": "integer",
            "description": "The ID for the notification.",
            "format": "int32"
          },
          "enabled": {
            "type": "boolean",
            "description": "Indicates whether this type of notification is being used by the employee attached to the user. \nTrue if the employee is receiving this type of notification, False if the employee is blocking these notifications."
          }
        },
        "additionalProperties": false
      },
      "NumberFormatInfo": {
        "type": "object",
        "properties": {
          "currencyDecimalDigits": {
            "type": "integer",
            "format": "int32"
          },
          "currencyDecimalSeparator": {
            "type": "string",
            "nullable": true
          },
          "isReadOnly": {
            "type": "boolean",
            "readOnly": true
          },
          "currencyGroupSizes": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "numberGroupSizes": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "percentGroupSizes": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "currencyGroupSeparator": {
            "type": "string",
            "nullable": true
          },
          "currencySymbol": {
            "type": "string",
            "nullable": true
          },
          "naNSymbol": {
            "type": "string",
            "nullable": true
          },
          "currencyNegativePattern": {
            "type": "integer",
            "format": "int32"
          },
          "numberNegativePattern": {
            "type": "integer",
            "format": "int32"
          },
          "percentPositivePattern": {
            "type": "integer",
            "format": "int32"
          },
          "percentNegativePattern": {
            "type": "integer",
            "format": "int32"
          },
          "negativeInfinitySymbol": {
            "type": "string",
            "nullable": true
          },
          "negativeSign": {
            "type": "string",
            "nullable": true
          },
          "numberDecimalDigits": {
            "type": "integer",
            "format": "int32"
          },
          "numberDecimalSeparator": {
            "type": "string",
            "nullable": true
          },
          "numberGroupSeparator": {
            "type": "string",
            "nullable": true
          },
          "currencyPositivePattern": {
            "type": "integer",
            "format": "int32"
          },
          "positiveInfinitySymbol": {
            "type": "string",
            "nullable": true
          },
          "positiveSign": {
            "type": "string",
            "nullable": true
          },
          "percentDecimalDigits": {
            "type": "integer",
            "format": "int32"
          },
          "percentDecimalSeparator": {
            "type": "string",
            "nullable": true
          },
          "percentGroupSeparator": {
            "type": "string",
            "nullable": true
          },
          "percentSymbol": {
            "type": "string",
            "nullable": true
          },
          "perMilleSymbol": {
            "type": "string",
            "nullable": true
          },
          "nativeDigits": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "digitSubstitution": {
            "$ref": "#/components/schemas/DigitShapes"
          }
        },
        "additionalProperties": false
      },
      "OtherDate": {
        "type": "object",
        "properties": {
          "text": {
            "type": "integer",
            "description": "The number representing the Date field, from 1 to 12, in the order they appear on the Employee Profile. For example, M11 is 1.",
            "format": "int32"
          },
          "value": {
            "type": "string",
            "description": "The date in ISO 8601 format.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OtherText": {
        "type": "object",
        "properties": {
          "text": {
            "type": "integer",
            "description": "The number of the Text Field, from 1 to 20, in the order they appear on the Employee Profile. For example, T1 is 1.",
            "format": "int32"
          },
          "value": {
            "type": "string",
            "description": "Text which can be up to 126 characters. If the Text Type in Payroll Parameters is anything other than Text or Required Text, the value match the ID of the selected Type.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PaperKind": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          20,
          21,
          22,
          23,
          24,
          25,
          26,
          27,
          28,
          29,
          30,
          31,
          32,
          33,
          34,
          35,
          36,
          37,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          45,
          46,
          47,
          50,
          51,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          59,
          60,
          61,
          62,
          63,
          64,
          65,
          66,
          67,
          68,
          69,
          70,
          71,
          72,
          73,
          74,
          75,
          76,
          77,
          78,
          79,
          80,
          81,
          82,
          83,
          84,
          85,
          86,
          87,
          88,
          89,
          90,
          91,
          92,
          93,
          94,
          95,
          96,
          97,
          98,
          99,
          100,
          101,
          102,
          103,
          104,
          105,
          106,
          107,
          108,
          109,
          110,
          111,
          112,
          113,
          114,
          115,
          116,
          117,
          118
        ],
        "type": "integer",
        "format": "int32"
      },
      "PaperSize": {
        "type": "object",
        "properties": {
          "height": {
            "type": "integer",
            "description": "This property is not used at this time.",
            "format": "int32"
          },
          "kind": {
            "$ref": "#/components/schemas/PaperKind"
          },
          "paperName": {
            "type": "string",
            "description": "This property is not used at this time.",
            "nullable": true
          },
          "rawKind": {
            "type": "integer",
            "description": "This property is not used at this time.",
            "format": "int32"
          },
          "width": {
            "type": "integer",
            "description": "This property is not used at this time.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ParameterAttributes": {
        "enum": [
          0,
          1,
          2,
          4,
          8,
          16,
          4096,
          8192,
          16384,
          32768,
          61440
        ],
        "type": "integer",
        "format": "int32"
      },
      "ParameterInfo": {
        "type": "object",
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/ParameterAttributes"
          },
          "member": {
            "$ref": "#/components/schemas/MemberInfo"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "parameterType": {
            "$ref": "#/components/schemas/Type"
          },
          "position": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "isIn": {
            "type": "boolean",
            "readOnly": true
          },
          "isLcid": {
            "type": "boolean",
            "readOnly": true
          },
          "isOptional": {
            "type": "boolean",
            "readOnly": true
          },
          "isOut": {
            "type": "boolean",
            "readOnly": true
          },
          "isRetval": {
            "type": "boolean",
            "readOnly": true
          },
          "defaultValue": {
            "nullable": true,
            "readOnly": true
          },
          "rawDefaultValue": {
            "nullable": true,
            "readOnly": true
          },
          "hasDefaultValue": {
            "type": "boolean",
            "readOnly": true
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "PayInfo": {
        "required": [
          "fte",
          "gridPercent",
          "midAdv",
          "payRate",
          "provEmployed",
          "salaried",
          "uom"
        ],
        "type": "object",
        "properties": {
          "payGroup": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "payGroupName": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "uom": {
            "maxLength": 1,
            "minLength": 0,
            "type": "string"
          },
          "salaried": {
            "type": "boolean"
          },
          "provEmployed": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string"
          },
          "payRate": {
            "type": "number",
            "format": "double"
          },
          "gridCode": {
            "maxLength": 12,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "gridPercent": {
            "type": "number",
            "format": "double"
          },
          "fte": {
            "type": "number",
            "format": "double"
          },
          "midAdv": {
            "type": "number",
            "format": "double"
          },
          "overtimeExempt": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "PaymentMethod": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "format": "int32"
      },
      "PayStatement": {
        "type": "object",
        "properties": {
          "empNo": {
            "type": "string",
            "description": "The employee number of the employee. When not provided the employee number assigned to the current user will be used if available.",
            "nullable": true
          },
          "runNumber": {
            "type": "integer",
            "description": "The run number of the payment.",
            "format": "int32"
          },
          "payEndingDate": {
            "type": "string",
            "description": "The last day of the pay period in ISO 8601 format.",
            "format": "date-time"
          },
          "bankNo": {
            "type": "string",
            "nullable": true
          },
          "chequeNo": {
            "type": "string",
            "nullable": true
          },
          "keyExtension": {
            "type": "integer",
            "description": "Indicates whether this is this the first pay in the pay period for the employee or a subsequent pay. \nKeyExtension will be 1 for the employee's first pay with this pay ending date, 2 for the second, etc.",
            "format": "int32"
          },
          "chequeDate": {
            "type": "string",
            "description": "The date the payment is deposited into the employee's bank or the date on the cheque in ISO 8601 format.",
            "format": "date-time"
          },
          "earnings": {
            "type": "number",
            "description": "The total earnings for the payment, before deductions.",
            "format": "double"
          },
          "deductions": {
            "type": "number",
            "description": "The total deductions for the payment.",
            "format": "double"
          },
          "benefits": {
            "type": "number",
            "description": "The total benefits for the payment.",
            "format": "double"
          },
          "netPay": {
            "type": "number",
            "description": "The net pay of the payment, which is the earnings minus the deductions.",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "PayStatementBenefit": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "nullable": true
          },
          "abbrev": {
            "type": "string",
            "nullable": true
          },
          "desc": {
            "type": "string",
            "nullable": true
          },
          "codeAndDesc": {
            "type": "string",
            "nullable": true
          },
          "benefitNonTaxableAmount": {
            "type": "number",
            "format": "double"
          },
          "benefitYtdTaxableAmount": {
            "type": "number",
            "format": "double"
          },
          "benefitTaxableAmount": {
            "type": "number",
            "format": "double"
          },
          "benefitYtdNonTaxableAmount": {
            "type": "number",
            "format": "double"
          },
          "ytdOnly": {
            "type": "boolean"
          },
          "isTaxable": {
            "type": "boolean"
          },
          "abbrevFr": {
            "type": "string",
            "nullable": true
          },
          "descFr": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PayStatementDeduction": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code identifying the deduction.",
            "nullable": true
          },
          "abbrev": {
            "type": "string",
            "description": "The abbreviation for the deduction.",
            "nullable": true
          },
          "desc": {
            "type": "string",
            "description": "The description of the deduction code.",
            "nullable": true
          },
          "codeAndAbbrev": {
            "type": "string",
            "description": "The code and abbreviation for the deduction code, separated by a space.",
            "nullable": true
          },
          "codeAndDesc": {
            "type": "string",
            "description": "The code and description for the deduction code, separated by a space.",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "ytdAmount": {
            "type": "number",
            "format": "double"
          },
          "ytdOnly": {
            "type": "boolean"
          },
          "abbrevFr": {
            "type": "string",
            "nullable": true
          },
          "descFr": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PayStatementDeposit": {
        "type": "object",
        "properties": {
          "bankAccount": {
            "type": "string",
            "description": "Returns the bank account. The bank account will be masked based on company web setting PayStatementSettings.BankAccountMask.",
            "nullable": true
          },
          "depositAmount": {
            "type": "number",
            "description": "Returns the amount deposited into the bank account.",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "PayStatementDetails": {
        "type": "object",
        "properties": {
          "empNo": {
            "type": "string",
            "description": "The employee number of the employee. When not provided the employee number assigned to the current user will be used if available.",
            "nullable": true
          },
          "otherText1": {
            "type": "string",
            "description": "Profile Field T1. Text which can be up to 126 characters. \nIf the T1 Text Type in Payroll Parameters is anything other than Text or Required Text, the value match the ID of the selected Type.",
            "nullable": true
          },
          "statementLanguage": {
            "$ref": "#/components/schemas/Language"
          },
          "sin": {
            "type": "string",
            "description": "The employee's Social Insurance Number.",
            "nullable": true
          },
          "payGroup": {
            "type": "string",
            "nullable": true
          },
          "payGroupName": {
            "type": "string",
            "nullable": true
          },
          "employeePosition": {
            "type": "string",
            "nullable": true
          },
          "employeePositionName": {
            "type": "string",
            "nullable": true
          },
          "unionCode": {
            "type": "string",
            "nullable": true
          },
          "unionName": {
            "type": "string",
            "nullable": true
          },
          "payPeriod": {
            "type": "string",
            "nullable": true
          },
          "accumulatedServiceHours": {
            "type": "number",
            "format": "double"
          },
          "accumulatedServiceDays": {
            "type": "number",
            "format": "double"
          },
          "basicEarnGl": {
            "type": "string",
            "nullable": true
          },
          "bankNo": {
            "type": "string",
            "nullable": true
          },
          "chequeNo": {
            "type": "string",
            "nullable": true
          },
          "chequeDate": {
            "type": "string",
            "description": "The date the payment is deposited into the employee's bank or the date on the cheque in ISO 8601 format.",
            "format": "date-time"
          },
          "chequeOption": {
            "$ref": "#/components/schemas/ChequeOption"
          },
          "recordType": {
            "type": "string",
            "nullable": true
          },
          "keyExtension": {
            "type": "integer",
            "format": "int32"
          },
          "companyName": {
            "type": "string",
            "nullable": true
          },
          "companyAddress1": {
            "type": "string",
            "nullable": true
          },
          "companyAddress2": {
            "type": "string",
            "nullable": true
          },
          "companyAddress3": {
            "type": "string",
            "nullable": true
          },
          "companyAddress": {
            "type": "string",
            "nullable": true
          },
          "payEndingDate": {
            "type": "string",
            "description": "The last day of the pay period in ISO 8601 format.",
            "format": "date-time"
          },
          "payPeriodStartDate": {
            "type": "string",
            "format": "date-time"
          },
          "employeeFullName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "employeeSurnameName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "employeeSurname": {
            "type": "string",
            "nullable": true
          },
          "employeeGivenName": {
            "type": "string",
            "nullable": true
          },
          "employeePreferredName": {
            "type": "string",
            "nullable": true
          },
          "employeeInitial": {
            "type": "string",
            "nullable": true
          },
          "alternatePayeeName": {
            "type": "string",
            "nullable": true
          },
          "alternatePayeeName2": {
            "type": "string",
            "nullable": true
          },
          "address1": {
            "type": "string",
            "description": "The first line of the employee's home address.",
            "nullable": true
          },
          "address2": {
            "type": "string",
            "description": "The second line of the employee's home address.",
            "nullable": true
          },
          "address3": {
            "type": "string",
            "nullable": true
          },
          "address4": {
            "type": "string",
            "nullable": true
          },
          "deductionFigure1": {
            "type": "number",
            "format": "double"
          },
          "deductionFigure2": {
            "type": "number",
            "format": "double"
          },
          "deductionFigure3": {
            "type": "number",
            "format": "double"
          },
          "deductionFigure4": {
            "type": "number",
            "format": "double"
          },
          "deductionFigure5": {
            "type": "number",
            "format": "double"
          },
          "deductionFigure6": {
            "type": "number",
            "format": "double"
          },
          "deductionFigure7": {
            "type": "number",
            "format": "double"
          },
          "deductionFigure8": {
            "type": "number",
            "format": "double"
          },
          "deductionFigure9": {
            "type": "number",
            "format": "double"
          },
          "delivery": {
            "type": "string",
            "nullable": true
          },
          "deliveryDescription": {
            "type": "string",
            "nullable": true
          },
          "employeeLocation": {
            "type": "string",
            "nullable": true
          },
          "employeeLocationCode": {
            "type": "string",
            "nullable": true
          },
          "eiHours": {
            "type": "number",
            "format": "double"
          },
          "eiEarnings": {
            "type": "number",
            "format": "double"
          },
          "runNumber": {
            "type": "integer",
            "format": "int32"
          },
          "payComment": {
            "type": "string",
            "nullable": true
          },
          "commonComment": {
            "type": "string",
            "nullable": true
          },
          "payComment1": {
            "type": "string",
            "nullable": true
          },
          "payComment2": {
            "type": "string",
            "nullable": true
          },
          "earnUnitsTotal": {
            "type": "number",
            "format": "double"
          },
          "earnAmountTotal": {
            "type": "number",
            "format": "double"
          },
          "ytdEarnAmountTotal": {
            "type": "number",
            "format": "double"
          },
          "ytdEarnUnitsTotal": {
            "type": "number",
            "format": "double"
          },
          "ytdGrossAmountTotal": {
            "type": "number",
            "format": "double"
          },
          "grossAmountTotal": {
            "type": "number",
            "format": "double"
          },
          "deductionAmountTotal": {
            "type": "number",
            "format": "double"
          },
          "ytdDeductionAmountTotal": {
            "type": "number",
            "format": "double"
          },
          "netPay": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ytdNetPay": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ytdCppDeductions": {
            "type": "number",
            "format": "double"
          },
          "ytdQppDeductions": {
            "type": "number",
            "format": "double"
          },
          "ytdQpip": {
            "type": "number",
            "format": "double"
          },
          "ytdEiDeductions": {
            "type": "number",
            "format": "double"
          },
          "ytdFederalTaxDeductions": {
            "type": "number",
            "format": "double"
          },
          "ytdQuebecTaxDeductions": {
            "type": "number",
            "format": "double"
          },
          "ytdPensionDeductions": {
            "type": "number",
            "format": "double"
          },
          "ytdUnionDeductions": {
            "type": "number",
            "format": "double"
          },
          "benefitTaxableAmountTotal": {
            "type": "number",
            "format": "double"
          },
          "benefitNonTaxableAmountTotal": {
            "type": "number",
            "format": "double"
          },
          "benefitAmountTotal": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "benefitYtdTaxableAmountTotal": {
            "type": "number",
            "format": "double"
          },
          "benefitYtdNonTaxableAmountTotal": {
            "type": "number",
            "format": "double"
          },
          "benefitYtdAmountTotal": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "depositAmountTotal": {
            "type": "number",
            "format": "double"
          },
          "depositDate": {
            "type": "string",
            "format": "date-time"
          },
          "chequeAmount": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "entitlements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayStatementEntitlement"
            },
            "nullable": true
          },
          "deposits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayStatementDeposit"
            },
            "nullable": true
          },
          "benefits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayStatementBenefit"
            },
            "nullable": true
          },
          "earnings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayStatementEarning"
            },
            "nullable": true
          },
          "deductions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayStatementDeduction"
            },
            "nullable": true
          },
          "timeEntries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayStatementTimeEntry"
            },
            "nullable": true
          },
          "pdfData": {
            "type": "string",
            "format": "byte",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PayStatementEarning": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "nullable": true
          },
          "abbrev": {
            "type": "string",
            "nullable": true
          },
          "desc": {
            "type": "string",
            "nullable": true
          },
          "codeAndAbbrev": {
            "type": "string",
            "nullable": true
          },
          "codeAndDesc": {
            "type": "string",
            "nullable": true
          },
          "task": {
            "type": "string",
            "nullable": true
          },
          "taskDesc": {
            "type": "string",
            "nullable": true
          },
          "unitCode": {
            "type": "string",
            "nullable": true
          },
          "unitCodeName": {
            "type": "string",
            "nullable": true
          },
          "units": {
            "type": "number",
            "format": "double"
          },
          "rate": {
            "type": "number",
            "description": "The dollar rate of pay for the time worked. This will be used with the units to determine the gross earnings for the time worked.\n\nIf blank, the rate of pay will be determined within Avanti.",
            "format": "double"
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "ytdAmount": {
            "type": "number",
            "format": "double"
          },
          "ytdUnit": {
            "type": "number",
            "format": "double"
          },
          "ytdOnly": {
            "type": "boolean"
          },
          "recordCount": {
            "type": "integer",
            "format": "int32"
          },
          "abbrevFr": {
            "type": "string",
            "nullable": true
          },
          "descFr": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PayStatementEntitlement": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "code": {
            "type": "string",
            "nullable": true
          },
          "codeAndName": {
            "type": "string",
            "nullable": true
          },
          "abbrev": {
            "type": "string",
            "nullable": true
          },
          "unitsCarriedFwd": {
            "type": "number",
            "format": "double"
          },
          "unitsAccrued": {
            "type": "number",
            "format": "double"
          },
          "unitsTaken": {
            "type": "number",
            "format": "double"
          },
          "unitsRemaining": {
            "type": "number",
            "format": "double"
          },
          "amountCarriedFwd": {
            "type": "number",
            "format": "double"
          },
          "amountAccrued": {
            "type": "number",
            "format": "double"
          },
          "amountTaken": {
            "type": "number",
            "format": "double"
          },
          "amountRemaining": {
            "type": "number",
            "format": "double"
          },
          "ytdUnitBase": {
            "type": "number",
            "format": "double"
          },
          "ltdUnitBase": {
            "type": "number",
            "format": "double"
          },
          "earnBase": {
            "type": "number",
            "format": "double"
          },
          "ytdEarnBase": {
            "type": "number",
            "format": "double"
          },
          "bena": {
            "type": "string",
            "nullable": true
          },
          "leaveUnit": {
            "type": "number",
            "format": "double"
          },
          "unitBase": {
            "type": "number",
            "format": "double"
          },
          "ltdEarnBase": {
            "type": "number",
            "format": "double"
          },
          "currentTakenAmount": {
            "type": "number",
            "format": "double"
          },
          "currentTakenUnit": {
            "type": "number",
            "format": "double"
          },
          "currentCarriedFwd": {
            "type": "number",
            "format": "double"
          },
          "currentRemaining": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "PayStatementsSettings": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "payRatePrecision": {
            "type": "integer",
            "format": "int32"
          },
          "dateFilter": {
            "type": "boolean"
          },
          "payEndingDateInDateFilter": {
            "type": "boolean"
          },
          "dateFilterMinutes": {
            "type": "integer",
            "format": "int32"
          },
          "dateFilterDays": {
            "type": "integer",
            "format": "int32"
          },
          "requireUserSetPassword": {
            "type": "boolean"
          },
          "earningsColumnDisplay": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "deductionsColumnDisplay": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "benefitsColumnDisplay": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "entitlementsColumnDisplay": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "columnDisplayName": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "enableEmail": {
            "type": "boolean"
          },
          "payStatementsEntitlements": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "payStatementsComments": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "payStatementsTimeEntry": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "payEntitlements": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "payComments": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "payTimeEntry": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "bankAccountMask": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "viewOption": {
            "$ref": "#/components/schemas/DocumentViewOption"
          },
          "payStatementView": {
            "$ref": "#/components/schemas/PayStatementView"
          },
          "pdfSharingEnabled": {
            "type": "boolean"
          },
          "disableEmailStatementEncryption": {
            "type": "boolean"
          },
          "compensationPDFEmail": {
            "type": "string",
            "nullable": true
          },
          "compensationPDFEmailFr": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PayStatementTimeEntry": {
        "type": "object",
        "properties": {
          "entryDate": {
            "type": "string",
            "format": "date-time"
          },
          "unit": {
            "type": "number",
            "format": "double"
          },
          "unitCode": {
            "type": "string",
            "nullable": true
          },
          "unitCodeName": {
            "type": "string",
            "nullable": true
          },
          "rate": {
            "type": "number",
            "description": "The dollar rate of pay for the time worked. This will be used with the units to determine the gross earnings for the time worked.\n\nIf blank, the rate of pay will be determined within Avanti.",
            "format": "double"
          },
          "taskId": {
            "type": "string",
            "description": "The ID of the task for the time worked. \n\nFor a list of tasks set up in the company, use the 'Get TaskIds' endpoint.",
            "nullable": true
          },
          "location": {
            "type": "string",
            "nullable": true
          },
          "position": {
            "type": "string",
            "nullable": true
          },
          "reason": {
            "type": "string",
            "nullable": true
          },
          "gridCode": {
            "type": "string",
            "nullable": true
          },
          "gridPercent": {
            "type": "number",
            "format": "double"
          },
          "earnDeductCode": {
            "type": "string",
            "nullable": true
          },
          "earnDeductAbbrev": {
            "type": "string",
            "nullable": true
          },
          "earnDeductDesc": {
            "type": "string",
            "nullable": true
          },
          "earning": {
            "type": "number",
            "format": "double"
          },
          "comments": {
            "type": "string",
            "nullable": true
          },
          "taskDesc": {
            "type": "string",
            "nullable": true
          },
          "locationDesc": {
            "type": "string",
            "nullable": true
          },
          "positionDesc": {
            "type": "string",
            "nullable": true
          },
          "earnDeductAbbrevFr": {
            "type": "string",
            "nullable": true
          },
          "earnDeductDescFr": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PayStatementView": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "PersonalInfoSettings": {
        "type": "object",
        "properties": {
          "showPicture": {
            "type": "boolean"
          },
          "enablePictureChange": {
            "type": "boolean"
          },
          "pictureChangeFirstTimeOnly": {
            "type": "boolean"
          },
          "overrideModifyResponsibilityForSelf": {
            "type": "boolean"
          },
          "readOnlyEmailTypes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "employeesCanChangeName": {
            "type": "boolean"
          },
          "disablePhoneLabels": {
            "type": "boolean"
          },
          "phoneType1": {
            "type": "integer",
            "description": "The phone type of the phoneNumber1. \n        1 = Work\n        2 = Home \n        3 = Work 2\n        4 = Home 2\n        5 = Work Fax\n        6 = HomeFax\n        7 = Cell\n        8 = Pager\n        9 = Other \n      10 = Work Cell\n      11 = Home Cell",
            "format": "int32"
          },
          "phoneType2": {
            "type": "integer",
            "description": "The phone type of the phoneNumber2. \n        1 = Work\n        2 = Home \n        3 = Work 2\n        4 = Home 2\n        5 = Work Fax\n        6 = HomeFax\n        7 = Cell\n        8 = Pager\n        9 = Other \n      10 = Work Cell\n      11 = Home Cell",
            "format": "int32"
          },
          "phoneType3": {
            "type": "integer",
            "description": "The phone type of the phoneNumber3. \n        1 = Work\n        2 = Home \n        3 = Work 2\n        4 = Home 2\n        5 = Work Fax\n        6 = HomeFax\n        7 = Cell\n        8 = Pager\n        9 = Other \n      10 = Work Cell\n      11 = Home Cell",
            "format": "int32"
          },
          "phoneType4": {
            "type": "integer",
            "description": "The phone type of the phoneNumber4. \n        1 = Work\n        2 = Home \n        3 = Work 2\n        4 = Home 2\n        5 = Work Fax\n        6 = HomeFax\n        7 = Cell\n        8 = Pager\n        9 = Other \n      10 = Work Cell\n      11 = Home Cell",
            "format": "int32"
          },
          "viewSin": {
            "type": "boolean"
          },
          "modifySin": {
            "type": "boolean"
          },
          "hiddenFields": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "disabledFieldsForEmployees": {
            "type": "string",
            "nullable": true
          },
          "disabledFieldsForManagers": {
            "type": "string",
            "nullable": true
          },
          "disabledFieldsForManager": {
            "type": "string",
            "nullable": true
          },
          "fieldDisplayNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "youRemoveCannotEditMessage": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "PersonalInfoSetupResponse": {
        "type": "object",
        "properties": {
          "provinces": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextValuePair"
            },
            "nullable": true
          },
          "countries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextValuePair"
            },
            "nullable": true
          },
          "phoneTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextValuePair"
            },
            "nullable": true
          },
          "settings": {
            "$ref": "#/components/schemas/PersonalInfoSettings"
          },
          "dependentsSettings": {
            "$ref": "#/components/schemas/DependentsSettings"
          },
          "dependentsRelationships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextValuePair"
            },
            "nullable": true
          },
          "employeeList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextValuePair"
            },
            "nullable": true
          },
          "emergencyContactRelationship": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextValuePair"
            },
            "nullable": true
          },
          "emergencyContactSettings": {
            "$ref": "#/components/schemas/EmergencyContactSettings"
          },
          "isReadOnly": {
            "type": "boolean"
          },
          "address": {
            "$ref": "#/components/schemas/EmployeeAddress"
          },
          "employeeHomePhone": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PhoneNumber": {
        "required": [
          "number"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "phoneType": {
            "type": "integer",
            "format": "int32"
          },
          "number": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Pickup": {
        "type": "object",
        "properties": {
          "pickupEntryId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "poolComments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PoolComment"
            },
            "nullable": true
          },
          "pickupOption": {
            "type": "integer",
            "format": "int32"
          },
          "pickupEmpNo": {
            "type": "string",
            "nullable": true
          },
          "pickupEmpGivenName": {
            "type": "string",
            "nullable": true
          },
          "pickupEmpPreferredName": {
            "type": "string",
            "nullable": true
          },
          "pickupEmpIntial": {
            "type": "string",
            "nullable": true
          },
          "pickupEmpSurname": {
            "type": "string",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "nullable": true
          },
          "isPoolEmpApproved": {
            "type": "integer",
            "format": "int32"
          },
          "isCancelled": {
            "type": "boolean"
          },
          "isApproved": {
            "type": "boolean"
          },
          "approvedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "approvedLevel": {
            "type": "integer",
            "format": "int32"
          },
          "exchangeSchedulesInfo": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScheduleInfo"
            },
            "nullable": true
          },
          "pickupEmployeeName": {
            "type": "string",
            "nullable": true
          },
          "poolEmpApprovedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "exchangeSchedules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScheduleEntry"
            },
            "nullable": true
          },
          "approvedBy": {
            "type": "string",
            "nullable": true
          },
          "seniorityDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "position": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PickupRequest": {
        "type": "object",
        "properties": {
          "poolId": {
            "type": "integer",
            "format": "int32"
          },
          "schedulesIdsForExchange": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "empNo": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Pool": {
        "type": "object",
        "properties": {
          "poolEntryId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "poolComments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PoolComment"
            },
            "nullable": true
          },
          "poolOption": {
            "$ref": "#/components/schemas/PoolOption"
          },
          "expiryDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "poolUntilDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "pickupPayCode": {
            "type": "string",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "isApproved": {
            "type": "boolean"
          },
          "approvedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "approvedLevel": {
            "type": "integer",
            "format": "int32"
          },
          "pickupEntryId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "requestedPickupEntryId": {
            "type": "integer",
            "format": "int32"
          },
          "scheduleInfo": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScheduleInfo"
            },
            "nullable": true
          },
          "pickupRequestedCount": {
            "type": "integer",
            "format": "int32"
          },
          "swapRequestedCount": {
            "type": "integer",
            "format": "int32"
          },
          "requestedPickupOption": {
            "type": "integer",
            "format": "int32"
          },
          "requestedPickupApprovedLevel": {
            "type": "integer",
            "format": "int32"
          },
          "requestedPickupApprovedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PoolComment": {
        "type": "object",
        "properties": {
          "poolCommentId": {
            "type": "integer",
            "format": "int32"
          },
          "poolEntryId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "pickupEntryId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "surname": {
            "type": "string",
            "description": "The employee's last name.",
            "nullable": true
          },
          "givenName": {
            "type": "string",
            "description": "The employee's first name.",
            "nullable": true
          },
          "initial": {
            "type": "string",
            "description": "The middle initial of the employee's name.",
            "nullable": true
          },
          "preferredName": {
            "type": "string",
            "description": "The name the employee prefers be called instead of their given name.",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "nullable": true
          },
          "isPrivate": {
            "type": "boolean"
          },
          "isCurrentUserComment": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "PoolOfferInfo": {
        "type": "object",
        "properties": {
          "scheduleDescription": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "poolEntryId": {
            "type": "integer",
            "format": "int32"
          },
          "pickupEntryId": {
            "type": "integer",
            "format": "int32"
          },
          "givenName": {
            "type": "string",
            "description": "The employee's first name.",
            "nullable": true
          },
          "preferredName": {
            "type": "string",
            "description": "The name the employee prefers be called instead of their given name.",
            "nullable": true
          },
          "surname": {
            "type": "string",
            "description": "The employee's last name.",
            "nullable": true
          },
          "approved": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "PoolOption": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "PoolRequestType": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "format": "int32"
      },
      "Position": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "nameFrM": {
            "type": "string",
            "nullable": true
          },
          "nameFrF": {
            "type": "string",
            "nullable": true
          },
          "reportsToPosition": {
            "type": "string",
            "nullable": true
          },
          "reportsToPositionName": {
            "type": "string",
            "nullable": true
          },
          "reportsToPositionNameFrF": {
            "type": "string",
            "nullable": true
          },
          "reportsToPositionNameFrM": {
            "type": "string",
            "nullable": true
          },
          "primaryPosition": {
            "type": "string",
            "nullable": true
          },
          "employeeFte": {
            "type": "number",
            "format": "double"
          },
          "totalActiveFte": {
            "type": "number",
            "format": "double"
          },
          "reportsToEmployee": {
            "type": "string",
            "nullable": true
          },
          "effectiveDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "expiryDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "active": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "PositionDetails": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "code": {
            "type": "string",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "effectiveDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "expiryDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "fte": {
            "type": "number",
            "format": "double"
          },
          "glType": {
            "type": "string"
          },
          "glAccount": {
            "type": "string",
            "nullable": true
          },
          "glAccountName": {
            "type": "string",
            "nullable": true
          },
          "glGroup": {
            "type": "string",
            "nullable": true
          },
          "glGroupName": {
            "type": "string",
            "nullable": true
          },
          "glBenefitGroup": {
            "type": "string",
            "nullable": true
          },
          "glBenefitGroupName": {
            "type": "string",
            "nullable": true
          },
          "jobClassCode": {
            "type": "string",
            "nullable": true
          },
          "jobClassName": {
            "type": "string",
            "nullable": true
          },
          "jobClassNameFr": {
            "type": "string",
            "nullable": true
          },
          "locationCode": {
            "type": "string",
            "nullable": true
          },
          "locationName": {
            "type": "string",
            "nullable": true
          },
          "locationNameFr": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "nameFrM": {
            "type": "string",
            "nullable": true
          },
          "nameFrF": {
            "type": "string",
            "nullable": true
          },
          "revisedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "permanent": {
            "type": "boolean"
          },
          "unionCode": {
            "type": "string",
            "nullable": true
          },
          "unionName": {
            "type": "string",
            "nullable": true
          },
          "workUom": {
            "type": "string"
          },
          "positionFig1": {
            "type": "number",
            "format": "double"
          },
          "positionFig2": {
            "type": "number",
            "format": "double"
          },
          "positionFig3": {
            "type": "number",
            "format": "double"
          },
          "positionFig4": {
            "type": "number",
            "format": "double"
          },
          "positionFig5": {
            "type": "number",
            "format": "double"
          },
          "positionFig6": {
            "type": "number",
            "format": "double"
          },
          "positionFig7": {
            "type": "number",
            "format": "double"
          },
          "positionFig8": {
            "type": "number",
            "format": "double"
          },
          "positionFig9": {
            "type": "number",
            "format": "double"
          },
          "positionFig10": {
            "type": "number",
            "format": "double"
          },
          "positionDate1": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "positionDate2": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "positionDate3": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "positionDate4": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "positionDate5": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "positionDate6": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "positionDate7": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "positionDate8": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "positionDate9": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "positionDate10": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "positionText1": {
            "type": "string",
            "nullable": true
          },
          "positionText2": {
            "type": "string",
            "nullable": true
          },
          "positionText3": {
            "type": "string",
            "nullable": true
          },
          "positionText4": {
            "type": "string",
            "nullable": true
          },
          "positionText5": {
            "type": "string",
            "nullable": true
          },
          "positionText6": {
            "type": "string",
            "nullable": true
          },
          "positionText7": {
            "type": "string",
            "nullable": true
          },
          "positionText8": {
            "type": "string",
            "nullable": true
          },
          "positionText9": {
            "type": "string",
            "nullable": true
          },
          "positionText10": {
            "type": "string",
            "nullable": true
          },
          "positionBool1": {
            "type": "boolean"
          },
          "positionBool2": {
            "type": "boolean"
          },
          "positionBool3": {
            "type": "boolean"
          },
          "positionBool4": {
            "type": "boolean"
          },
          "positionBool5": {
            "type": "boolean"
          },
          "positionBool6": {
            "type": "boolean"
          },
          "positionBool7": {
            "type": "boolean"
          },
          "positionBool8": {
            "type": "boolean"
          },
          "positionBool9": {
            "type": "boolean"
          },
          "positionBool10": {
            "type": "boolean"
          },
          "positionUserDefinedLabels": {
            "$ref": "#/components/schemas/PositionUserDefinedLabels"
          },
          "reportsToPosition": {
            "type": "string",
            "nullable": true
          },
          "reportsToPositionName": {
            "type": "string",
            "nullable": true
          },
          "reportsToPositionNameFrF": {
            "type": "string",
            "nullable": true
          },
          "reportsToPositionNameFrM": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PositionRates": {
        "type": "object",
        "properties": {
          "position": {
            "type": "string",
            "nullable": true
          },
          "positionName": {
            "type": "string",
            "nullable": true
          },
          "employeeRates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmployeeRate"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PostNotifications": {
        "type": "object",
        "properties": {
          "notificationIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "readFlag": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "PostRequest": {
        "type": "object",
        "properties": {
          "scheduleEntryIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "comment": {
            "type": "string",
            "nullable": true
          },
          "poolOption": {
            "$ref": "#/components/schemas/PoolOption"
          },
          "showEmployeeInformation": {
            "$ref": "#/components/schemas/ShowEmpOption"
          },
          "entrySourceType": null
        },
        "additionalProperties": false
      },
      "ProblemDetails": {
        "title": "",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "description": "This property is not used at this time.",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "PropertyAttributes": {
        "enum": [
          0,
          512,
          1024,
          4096,
          8192,
          16384,
          32768,
          62464
        ],
        "type": "integer",
        "format": "int32"
      },
      "PropertyInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "declaringType": {
            "$ref": "#/components/schemas/Type"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/Type"
          },
          "module": {
            "$ref": "#/components/schemas/Module"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "memberType": {
            "$ref": "#/components/schemas/MemberTypes"
          },
          "propertyType": {
            "$ref": "#/components/schemas/Type"
          },
          "attributes": {
            "$ref": "#/components/schemas/PropertyAttributes"
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true
          },
          "canRead": {
            "type": "boolean",
            "readOnly": true
          },
          "canWrite": {
            "type": "boolean",
            "readOnly": true
          },
          "getMethod": {
            "$ref": "#/components/schemas/MethodInfo"
          },
          "setMethod": {
            "$ref": "#/components/schemas/MethodInfo"
          }
        },
        "additionalProperties": false
      },
      "PropertyValidationSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "required": {
            "$ref": "#/components/schemas/Validation"
          },
          "email": {
            "$ref": "#/components/schemas/Validation"
          },
          "max": {
            "$ref": "#/components/schemas/Validation"
          },
          "min": {
            "$ref": "#/components/schemas/Validation"
          }
        },
        "additionalProperties": false
      },
      "Pushed": {
        "enum": [
          0,
          1,
          -1
        ],
        "type": "integer",
        "format": "int32"
      },
      "PushNotificationRegistration": {
        "type": "object",
        "properties": {
          "channelId": {
            "type": "integer",
            "format": "int32"
          },
          "deviceToken": {
            "type": "string",
            "nullable": true
          },
          "deviceId": {
            "type": "string",
            "nullable": true
          },
          "username": {
            "type": "string",
            "description": "The Avanti User Name that the employee uses to log into ASSP, Avanti Go, and the Avanti Desktop Application, if applicable. Must be a valid Avanti User Name.",
            "nullable": true
          },
          "expires": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "statusLastChanged": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "os": {
            "type": "string",
            "nullable": true
          },
          "osVersion": {
            "type": "string",
            "nullable": true
          },
          "deviceStatus": {
            "type": "integer",
            "format": "int32"
          },
          "deviceStatusLastChanged": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RateGrid": {
        "type": "object",
        "properties": {
          "gridCode": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "rate": {
            "type": "number",
            "description": "The dollar rate of pay for the time worked. This will be used with the units to determine the gross earnings for the time worked.\n\nIf blank, the rate of pay will be determined within Avanti.",
            "format": "double"
          },
          "rateCode": {
            "type": "string"
          },
          "effectiveDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RateSource": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "ReporterDateRangeTypes": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "format": "int32"
      },
      "ReporterPayRunTypes": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "ReportOptions": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The report ID of the report you would like to get the data for.",
            "nullable": true
          },
          "format": {
            "type": "string",
            "description": "This property is not used at this time.",
            "nullable": true
          },
          "allEmployees": {
            "type": "boolean",
            "description": "True will include all employees in the report. False will only include the employee range. If false, the employee range must be specified in fromEmpNo toEmpNo. \n\nReports only include employees based on the active parameter, role permissions, and pay group access."
          },
          "fromEmpNo": {
            "type": "string",
            "description": "The first employee number in the range of employees employees used to filter the data. This is only used if allEmployees is false. This is required if toEmpNo is defined.",
            "nullable": true
          },
          "toEmpNo": {
            "type": "string",
            "description": "The last employee in the range of employees used to filter the data. This is only used if allEmployees is false. This is required if fromEmpNo is defined.",
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "description": "True will include active employees in the results. False prevents active employees from being included in the results.",
            "nullable": true
          },
          "inactive": {
            "type": "boolean",
            "description": "True will include inactive employees in the results. False prevents inactive employees from being included in the results.",
            "nullable": true
          },
          "allDates": {
            "type": "boolean",
            "description": "True to include all dates in the report. False to include a date range. If false, the date range must be specified in fromDate toDate."
          },
          "fromDate": {
            "type": "string",
            "description": "The first date in the range of dates used to filter the data. This is only used if allDates is false. This is required if toDate is defined.",
            "format": "date-time",
            "nullable": true
          },
          "toDate": {
            "type": "string",
            "description": "The last date in the range of dates used to filter the data. This is only used if allDates is false. This is required if fromDate is defined.",
            "format": "date-time",
            "nullable": true
          },
          "dateType": {
            "$ref": "#/components/schemas/ReporterDateRangeTypes"
          },
          "payRunType": {
            "$ref": "#/components/schemas/ReporterPayRunTypes"
          },
          "printThisReportOnly": {
            "type": "boolean",
            "description": "This property is not used at this time."
          },
          "overrideReportSelection": {
            "type": "boolean",
            "description": "This property is not used at this time."
          },
          "allPayGroups": {
            "type": "boolean",
            "description": "True will include employees in the report regardless of pay group. False will only include the pay groups indicated in the selectedPayGroups parameter."
          },
          "selectedPayGroups": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The pay groups of employees that will be included in the report. This will only be used if parameter allPayGroups is false.\nEx: selectedPayGroups: [\"001\", \"002\"] will only include employees in group 001 or 002 in the report.",
            "nullable": true
          },
          "allLocations": {
            "type": "boolean",
            "description": "True will include all employees in the report regardless of their location. False will only include the employees in the locations indicated in the selectedLocations parameter."
          },
          "selectedLocations": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The location codes of employees that will be included in the report. This will only be used if parameter allLocations is false.\nEx: selectedLocations: [\"001\", \"002\"] will only include employees in location 001 or 002 in the report.",
            "nullable": true
          },
          "isEmployeeReport": {
            "type": "boolean",
            "description": "If true, only the results for the current employee will be returned."
          },
          "title": {
            "type": "string",
            "description": "This property is not used at this time.",
            "nullable": true
          },
          "footer": {
            "type": "string",
            "description": "This property is not used at this time.",
            "nullable": true
          },
          "landscape": {
            "type": "boolean",
            "description": "This property is not used at this time."
          },
          "marginTop": {
            "type": "number",
            "description": "This property is not used at this time.",
            "format": "double",
            "nullable": true
          },
          "marginRight": {
            "type": "number",
            "description": "This property is not used at this time.",
            "format": "double",
            "nullable": true
          },
          "marginBottom": {
            "type": "number",
            "description": "This property is not used at this time.",
            "format": "double",
            "nullable": true
          },
          "marginLeft": {
            "type": "number",
            "description": "This property is not used at this time.",
            "format": "double",
            "nullable": true
          },
          "suppressBlankLines": {
            "type": "boolean",
            "description": "This property is not used at this time."
          },
          "suppressHeadings": {
            "type": "boolean",
            "description": "This property is not used at this time."
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter"
            },
            "nullable": true
          },
          "paperSize": {
            "$ref": "#/components/schemas/PaperSize"
          },
          "merge": {
            "type": "boolean",
            "description": "If true, the options set on the report definition will be used. If false, the options on the report definition will be ignored."
          },
          "isValidated": {
            "type": "boolean",
            "description": "This property is not used at this time.",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "Result": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RuntimeFieldHandle": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/IntPtr"
          }
        },
        "additionalProperties": false
      },
      "RuntimeMethodHandle": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/IntPtr"
          }
        },
        "additionalProperties": false
      },
      "RuntimeTypeHandle": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/IntPtr"
          }
        },
        "additionalProperties": false
      },
      "SafetyNetRequest": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "nullable": true
          },
          "licenseData": {
            "type": "string",
            "nullable": true
          },
          "licenseSignature": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ScheduleInfo": {
        "type": "object",
        "properties": {
          "scheduleEntryId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "startTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "units": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "unitCode": {
            "type": "string",
            "nullable": true
          },
          "useUnits": {
            "type": "boolean"
          },
          "descriptionLine1": {
            "type": "string",
            "nullable": true
          },
          "descriptionLine2": {
            "type": "string",
            "nullable": true
          },
          "poolDescription": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SchemaSerializationMode": {
        "enum": [
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "SearchResult": {
        "type": "object",
        "properties": {
          "header": {
            "type": "string",
            "description": "The description of the menu.",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "description": "The unique identifier for the menu.",
            "format": "int32"
          },
          "path": {
            "type": "string",
            "description": "The URL of the menu.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SecretAnswer": {
        "type": "object",
        "properties": {
          "questionId": {
            "type": "integer",
            "format": "int32"
          },
          "question": {
            "type": "string",
            "nullable": true
          },
          "answer": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SecretQuestionsRequest": {
        "type": "object",
        "properties": {
          "answers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SecretAnswer"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SecurityRuleSet": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "Segment": {
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/components/schemas/Account"
          },
          "no": {
            "type": "integer",
            "format": "int32"
          },
          "desc": {
            "type": "string",
            "nullable": true
          },
          "start": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "segDefault": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "integer",
            "format": "int32"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "allowWildcards": {
            "type": "boolean"
          },
          "segmentTypeDescription": {
            "type": "string",
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SerializationFormat": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "format": "int32"
      },
      "Settings": {
        "type": "object",
        "properties": {
          "notificationSettings": {
            "$ref": "#/components/schemas/NotificationSettings"
          },
          "payStatementsSettings": {
            "$ref": "#/components/schemas/PayStatementsSettings"
          },
          "personalInfoSettings": {
            "$ref": "#/components/schemas/PersonalInfoSettings"
          },
          "webPunchSettings": {
            "$ref": "#/components/schemas/WebPunchSettings"
          },
          "timeManagementSettings": {
            "$ref": "#/components/schemas/TimeManagementSettings"
          },
          "hrSettings": {
            "$ref": "#/components/schemas/HrSettings"
          },
          "entitlementsSettings": {
            "$ref": "#/components/schemas/EntitlementsSettings"
          },
          "emergencyContactSettings": {
            "$ref": "#/components/schemas/EmergencyContactSettings"
          },
          "dependentsSettings": {
            "$ref": "#/components/schemas/DependentsSettings"
          },
          "taxStatementsSettings": {
            "$ref": "#/components/schemas/TaxStatementsSettings"
          },
          "employeeDocumentSettings": {
            "$ref": "#/components/schemas/EmployeeDocumentSettings"
          },
          "companySettings": {
            "$ref": "#/components/schemas/CompanySettings"
          }
        },
        "additionalProperties": false
      },
      "ShowEmpOption": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "SortDefinition": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string",
            "description": "Display the codes in order by ID or description. By default, codes will display in order by ID. \n\nCode will return the codes in order by ID. Description will return the codes in order of the code's description.",
            "nullable": true
          },
          "dir": {
            "type": "string",
            "description": "Display the codes in order. By default, codes will display in ascending order. \n\nAsc will return the codes in ascending order, from smallest to largest or A to Z. Des will return the codes in descending order, from largest to smallest or Z to A.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SortDirection": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "format": "int32"
      },
      "SortVersion": {
        "type": "object",
        "properties": {
          "fullVersion": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "sortId": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "StatementOption": {
        "enum": [
          0,
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "format": "int32"
      },
      "StructLayoutAttribute": {
        "type": "object",
        "properties": {
          "typeId": {
            "nullable": true,
            "readOnly": true
          },
          "value": {
            "$ref": "#/components/schemas/LayoutKind"
          }
        },
        "additionalProperties": false
      },
      "TakeOption": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "TermsConditions": {
        "type": "object",
        "properties": {
          "agreed": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "TextInfo": {
        "type": "object",
        "properties": {
          "ansiCodePage": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "oemCodePage": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "macCodePage": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "ebcdicCodePage": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "lcid": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "cultureName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "isReadOnly": {
            "type": "boolean",
            "readOnly": true
          },
          "listSeparator": {
            "type": "string",
            "nullable": true
          },
          "isRightToLeft": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "TextValuePair": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "The ID, Description or a combination of the two depending on the lookup setting.",
            "nullable": true
          },
          "value": {
            "type": "string",
            "description": "The ID of the code.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TimeCardOverride": {
        "type": "object",
        "properties": {
          "apply": {
            "type": "boolean"
          },
          "type": {
            "$ref": "#/components/schemas/TimeCardOverrideType"
          },
          "ruleId": {
            "type": "string",
            "nullable": true
          },
          "typeDescription": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TimeCardOverrideType": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "format": "int32"
      },
      "TimeEntry": {
        "type": "object",
        "properties": {
          "source": {
            "$ref": "#/components/schemas/TimeEntrySource"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "empNo": {
            "type": "string",
            "description": "The employee number of the employee. When not provided the employee number assigned to the current user will be used if available.",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "originalDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "dates": {
            "type": "string",
            "nullable": true
          },
          "unit": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "unitCode": {
            "type": "string",
            "nullable": true
          },
          "unitCodeDescription": {
            "type": "string",
            "nullable": true
          },
          "fromTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "toTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "originalFromTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "isApproved": {
            "type": "boolean"
          },
          "approvalLevel": {
            "type": "integer",
            "format": "int32"
          },
          "maxApprovalLevel": {
            "type": "integer",
            "format": "int32"
          },
          "approvedBy": {
            "type": "string",
            "nullable": true
          },
          "approvedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "positionCode": {
            "type": "string",
            "nullable": true
          },
          "positionCodeDescription": {
            "type": "string",
            "nullable": true
          },
          "comments": {
            "type": "string",
            "nullable": true
          },
          "shiftId": {
            "type": "string",
            "nullable": true
          },
          "shiftIdDescription": {
            "type": "string",
            "nullable": true
          },
          "attendanceCode": {
            "type": "string",
            "nullable": true
          },
          "attendanceCodeDescription": {
            "type": "string",
            "nullable": true
          },
          "taskId": {
            "type": "string",
            "description": "The ID of the task for the time worked. \n\nFor a list of tasks set up in the company, use the 'Get TaskIds' endpoint.",
            "nullable": true
          },
          "taskIdDescription": {
            "type": "string",
            "nullable": true
          },
          "unionOverride": {
            "type": "string",
            "nullable": true
          },
          "unionOverrideDescription": {
            "type": "string",
            "nullable": true
          },
          "vacOverride": {
            "type": "string",
            "nullable": true
          },
          "vacOverrideDescription": {
            "type": "string",
            "nullable": true
          },
          "wcbOverride": {
            "type": "string",
            "nullable": true
          },
          "wcbOverrideDescription": {
            "type": "string",
            "nullable": true
          },
          "provEmployedOverride": {
            "type": "string",
            "nullable": true
          },
          "provEmployedOverrideDescription": {
            "type": "string",
            "nullable": true
          },
          "location": {
            "type": "string",
            "nullable": true
          },
          "locationDescription": {
            "type": "string",
            "nullable": true
          },
          "gl": {
            "type": "string",
            "nullable": true
          },
          "glSegment": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GlSegmentValue"
            },
            "nullable": true
          },
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeEntryDocument"
            },
            "nullable": true
          },
          "deletedDocuments": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "userApprovalLevel": {
            "type": "integer",
            "format": "int32"
          },
          "allowInsert": {
            "type": "boolean"
          },
          "allowModify": {
            "type": "boolean"
          },
          "allowDelete": {
            "type": "boolean"
          },
          "viewAmounts": {
            "type": "boolean"
          },
          "unitEnabled": {
            "type": "boolean"
          },
          "unitCodeEnabled": {
            "type": "boolean"
          },
          "fromTimeEnabled": {
            "type": "boolean"
          },
          "toTimeEnabled": {
            "type": "boolean"
          },
          "shiftIdEnabled": {
            "type": "boolean"
          },
          "details": {
            "type": "string",
            "nullable": true
          },
          "isDirty": {
            "type": "boolean"
          },
          "isValid": {
            "type": "boolean"
          },
          "status": {
            "$ref": "#/components/schemas/TimeEntryStatus"
          },
          "readOnly": {
            "type": "boolean",
            "readOnly": true
          },
          "isProcessed": {
            "type": "boolean",
            "description": "Indicates whether the punch has been used to generate a Time Card. Default is false. If True is entered, this punch will not be used to generate punches in Avanti. \n\nThis fields will not be returned when doing a get."
          },
          "processedBy": {
            "type": "string",
            "nullable": true
          },
          "processedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "inExceptionCode": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "recordSource": {
            "type": "integer",
            "format": "int32"
          },
          "punchRuleId": {
            "type": "string",
            "nullable": true
          },
          "breakRuleId": {
            "type": "string",
            "nullable": true
          },
          "rate": {
            "type": "number",
            "description": "The dollar rate of pay for the time worked. This will be used with the units to determine the gross earnings for the time worked.\n\nIf blank, the rate of pay will be determined within Avanti.",
            "format": "double",
            "nullable": true
          },
          "earnDeductCode": {
            "type": "string",
            "nullable": true
          },
          "earnDeductCodeDescription": {
            "type": "string",
            "nullable": true
          },
          "workOrder": {
            "type": "string",
            "nullable": true
          },
          "gridCode": {
            "type": "string",
            "nullable": true
          },
          "gridPercent": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "glSource": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "glType": {
            "type": "string",
            "nullable": true
          },
          "glGroup": {
            "type": "string",
            "nullable": true
          },
          "glGroupDescription": {
            "type": "string",
            "nullable": true
          },
          "benGroup": {
            "type": "string",
            "nullable": true
          },
          "isUnscheduled": {
            "type": "boolean"
          },
          "outExceptionCode": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "nullable": true
          },
          "createdDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "modifiedBy": {
            "type": "string",
            "nullable": true
          },
          "modifiedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "recordSourceId": {
            "type": "integer",
            "format": "int32"
          },
          "isBreakRuleApplied": {
            "type": "boolean"
          },
          "isOtherRuleApplied": {
            "type": "boolean"
          },
          "isInBatch": {
            "type": "boolean"
          },
          "rateLevel": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "otOption": {
            "type": "boolean"
          },
          "payPrimaryPosRate": {
            "type": "boolean"
          },
          "payCode": {
            "type": "string",
            "nullable": true
          },
          "payCodeDescription": {
            "type": "string",
            "nullable": true
          },
          "createdFromTimeCardId": {
            "type": "integer",
            "format": "int32"
          },
          "exceptionCodes": {
            "type": "integer",
            "format": "int32"
          },
          "exceptions": {
            "type": "string",
            "nullable": true
          },
          "timeCardOverrides": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeCardOverride"
            },
            "nullable": true
          },
          "timeCardEdits": {
            "type": "string",
            "nullable": true
          },
          "modificationCodes": {
            "type": "integer",
            "format": "int32"
          },
          "scheduleFromTime": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "scheduleToTime": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "scheduleCode": {
            "type": "string",
            "nullable": true
          },
          "scheduleUnits": {
            "type": "number",
            "format": "double"
          },
          "scheduleUnitCode": {
            "type": "string",
            "nullable": true
          },
          "scheduled": {
            "type": "string",
            "nullable": true
          },
          "isCancelled": {
            "type": "boolean"
          },
          "punchIn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "punchOut": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "punched": {
            "type": "string",
            "nullable": true
          },
          "fromRawDataId": {
            "type": "integer",
            "format": "int32"
          },
          "toRawDataId": {
            "type": "integer",
            "format": "int32"
          },
          "fromRawDataIsBreak": {
            "type": "boolean"
          },
          "toRawDataIsBreak": {
            "type": "boolean"
          },
          "toRawEventTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "fromRawEventTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "scheduleId": {
            "type": "integer",
            "format": "int32"
          },
          "breakStart1": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "breakStart2": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "breakStart3": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "breakStart4": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "breakStart5": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "breakDuration1": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "breakDuration2": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "breakDuration3": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "breakDuration4": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "breakDuration5": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "timeSourceId": {
            "type": "integer",
            "format": "int32"
          },
          "batchNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "week": {
            "type": "string",
            "nullable": true
          },
          "earnType": {
            "type": "integer",
            "format": "int32"
          },
          "rateSource": {
            "type": "integer",
            "format": "int32"
          },
          "earningAmount": {
            "type": "number",
            "format": "double"
          },
          "deductionAmount": {
            "type": "number",
            "format": "double"
          },
          "benefitAmount": {
            "type": "number",
            "format": "double"
          },
          "payGroup": {
            "type": "string",
            "nullable": true
          },
          "entryRejected": {
            "type": "boolean"
          },
          "leaveBenefitCode": {
            "type": "string",
            "nullable": true
          },
          "leaveUnit": {
            "type": "number",
            "format": "double"
          },
          "leaveUnitCode": {
            "type": "string",
            "nullable": true
          },
          "runNumber": {
            "type": "integer",
            "format": "int32"
          },
          "processedRunNumber": {
            "type": "integer",
            "format": "int32"
          },
          "isUpdated": {
            "type": "boolean"
          },
          "enteredBy": {
            "type": "string",
            "nullable": true
          },
          "reduceSalary": {
            "type": "boolean"
          },
          "workGroupId": {
            "type": "string",
            "nullable": true
          },
          "payEndingDate": {
            "type": "string",
            "description": "The last day of the pay period in ISO 8601 format.",
            "format": "date-time",
            "nullable": true
          },
          "availabilityType": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "availabilityTypeDescription": {
            "type": "string",
            "nullable": true
          },
          "entrySourceId": {
            "type": "integer",
            "format": "int32"
          },
          "entrySourceType": {
            "type": "integer",
            "format": "int32"
          },
          "allDay": {
            "type": "boolean"
          },
          "allDayEnabled": {
            "type": "boolean"
          },
          "poolPickupRuleId": {
            "type": "string",
            "nullable": true
          },
          "poolEntryId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "poolCreatedBy": {
            "type": "string",
            "nullable": true
          },
          "poolCreatedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "poolIsCancelled": {
            "type": "boolean"
          },
          "poolExpiryDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "postSwapStatus": {
            "type": "string",
            "nullable": true
          },
          "allowPostSwap": {
            "type": "boolean"
          },
          "poolRuleExists": {
            "type": "boolean",
            "readOnly": true
          },
          "isPooled": {
            "type": "boolean",
            "readOnly": true
          },
          "breaks": {
            "type": "string",
            "nullable": true
          },
          "timeCardExceptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SelectableSummary"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TimeEntryColorReference": {
        "enum": [
          0,
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "format": "int32"
      },
      "TimeEntryDocument": {
        "type": "object",
        "properties": {
          "documentId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "contentType": {
            "type": "string",
            "nullable": true
          },
          "typeId": {
            "type": "integer",
            "format": "int32"
          },
          "typeIdDescription": {
            "type": "string",
            "nullable": true
          },
          "fileName": {
            "type": "string",
            "nullable": true
          },
          "content": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "summary": {
            "type": "string",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "isDirty": {
            "type": "boolean"
          },
          "readOnly": {
            "type": "boolean"
          },
          "allowInsert": {
            "type": "boolean"
          },
          "allowModify": {
            "type": "boolean"
          },
          "allowDelete": {
            "type": "boolean"
          },
          "allowView": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "TimeEntrySource": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5
        ],
        "type": "integer",
        "format": "int32"
      },
      "TimeEntryStatus": {
        "enum": [
          0,
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "format": "int32"
      },
      "TimeEntryTemplate": {
        "type": "object",
        "properties": {
          "templateId": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "nameFr": {
            "type": "string",
            "nullable": true
          },
          "priority": {
            "type": "integer",
            "format": "int32"
          },
          "source": {
            "$ref": "#/components/schemas/TimeEntrySource"
          },
          "copyUnits": {
            "type": "boolean"
          },
          "doNotSpanDays": {
            "type": "boolean"
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeEntryTemplateField"
            },
            "nullable": true
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter"
            },
            "nullable": true
          },
          "criteria": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter"
            },
            "nullable": true
          },
          "validation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeEntryTemplateValidation"
            },
            "nullable": true
          },
          "userGroups": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "payGroupEntitlementValidation": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/EntitlementValidationType"
            },
            "nullable": true
          },
          "entitlementThreshold": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            },
            "nullable": true
          },
          "allowInvalidGlAccount": {
            "type": "boolean"
          },
          "showEntitlements": {
            "type": "boolean"
          },
          "dateExpression": {
            "type": "string",
            "nullable": true
          },
          "calendarColor": {
            "$ref": "#/components/schemas/TimeEntryColorReference"
          },
          "calendarMonthExpression": {
            "type": "string",
            "nullable": true
          },
          "calendarMonthDescExpression": {
            "type": "string",
            "nullable": true
          },
          "calendarWeekExpression": {
            "type": "string",
            "nullable": true
          },
          "calendarWeekDescExpression": {
            "type": "string",
            "nullable": true
          },
          "calendarDayExpression": {
            "type": "string",
            "nullable": true
          },
          "calendarDayDescExpression": {
            "type": "string",
            "nullable": true
          },
          "allowPooling": {
            "type": "boolean"
          },
          "filterGlSegments": {
            "type": "boolean",
            "readOnly": true
          },
          "glSegmentFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeEntryTemplateField"
            },
            "nullable": true,
            "readOnly": true
          },
          "viewId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TimeEntryTemplateField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "index": {
            "type": "integer",
            "format": "int32"
          },
          "key": {
            "type": "string",
            "nullable": true
          },
          "isDetail": {
            "type": "boolean"
          },
          "isVisible": {
            "type": "boolean"
          },
          "isReadOnly": {
            "type": "boolean"
          },
          "isRequired": {
            "type": "boolean"
          },
          "sortOrder": {
            "type": "integer",
            "format": "int32"
          },
          "defaultValue": {
            "nullable": true
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeEntryTemplateFieldFilter"
            },
            "nullable": true
          },
          "header": {
            "type": "string",
            "nullable": true
          },
          "headerFr": {
            "type": "string",
            "nullable": true
          },
          "customHeader": {
            "type": "string",
            "nullable": true
          },
          "customHeaderFr": {
            "type": "string",
            "nullable": true
          },
          "customSetting": {
            "type": "string",
            "nullable": true
          },
          "isDateField": {
            "type": "boolean",
            "readOnly": true
          },
          "validation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeEntryTemplateFieldValidation"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TimeEntryTemplateFieldFilter": {
        "type": "object",
        "properties": {
          "codes": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TimeEntryTemplateValidation": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/TimeEntryValidationType"
          },
          "onLoad": {
            "type": "boolean"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "messageFr": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TimeEntryValidationType": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "TimeManagementSettings": {
        "type": "object",
        "properties": {
          "schedulesClassCReadOnly": {
            "type": "boolean"
          },
          "overrideModifyPermissions": {
            "type": "boolean"
          },
          "poolingEnabled": {
            "type": "boolean"
          },
          "allowPostingAsExchange": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Type": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "isInterface": {
            "type": "boolean",
            "readOnly": true
          },
          "memberType": {
            "$ref": "#/components/schemas/MemberTypes"
          },
          "namespace": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "assemblyQualifiedName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "fullName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "assembly": {
            "$ref": "#/components/schemas/Assembly"
          },
          "module": {
            "$ref": "#/components/schemas/Module"
          },
          "isNested": {
            "type": "boolean",
            "readOnly": true
          },
          "declaringType": {
            "$ref": "#/components/schemas/Type"
          },
          "declaringMethod": {
            "$ref": "#/components/schemas/MethodBase"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/Type"
          },
          "underlyingSystemType": {
            "$ref": "#/components/schemas/Type"
          },
          "isTypeDefinition": {
            "type": "boolean",
            "readOnly": true
          },
          "isArray": {
            "type": "boolean",
            "readOnly": true
          },
          "isByRef": {
            "type": "boolean",
            "readOnly": true
          },
          "isPointer": {
            "type": "boolean",
            "readOnly": true
          },
          "isConstructedGenericType": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericParameter": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericTypeParameter": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericMethodParameter": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericType": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericTypeDefinition": {
            "type": "boolean",
            "readOnly": true
          },
          "isSZArray": {
            "type": "boolean",
            "readOnly": true
          },
          "isVariableBoundArray": {
            "type": "boolean",
            "readOnly": true
          },
          "isByRefLike": {
            "type": "boolean",
            "readOnly": true
          },
          "hasElementType": {
            "type": "boolean",
            "readOnly": true
          },
          "genericTypeArguments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Type"
            },
            "nullable": true,
            "readOnly": true
          },
          "genericParameterPosition": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "genericParameterAttributes": {
            "$ref": "#/components/schemas/GenericParameterAttributes"
          },
          "attributes": {
            "$ref": "#/components/schemas/TypeAttributes"
          },
          "isAbstract": {
            "type": "boolean",
            "readOnly": true
          },
          "isImport": {
            "type": "boolean",
            "readOnly": true
          },
          "isSealed": {
            "type": "boolean",
            "readOnly": true
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true
          },
          "isClass": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedFamANDAssem": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedFamily": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedFamORAssem": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedPrivate": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isNotPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isAutoLayout": {
            "type": "boolean",
            "readOnly": true
          },
          "isExplicitLayout": {
            "type": "boolean",
            "readOnly": true
          },
          "isLayoutSequential": {
            "type": "boolean",
            "readOnly": true
          },
          "isAnsiClass": {
            "type": "boolean",
            "readOnly": true
          },
          "isAutoClass": {
            "type": "boolean",
            "readOnly": true
          },
          "isUnicodeClass": {
            "type": "boolean",
            "readOnly": true
          },
          "isCOMObject": {
            "type": "boolean",
            "readOnly": true
          },
          "isContextful": {
            "type": "boolean",
            "readOnly": true
          },
          "isEnum": {
            "type": "boolean",
            "readOnly": true
          },
          "isMarshalByRef": {
            "type": "boolean",
            "readOnly": true
          },
          "isPrimitive": {
            "type": "boolean",
            "readOnly": true
          },
          "isValueType": {
            "type": "boolean",
            "readOnly": true
          },
          "isSignatureType": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecurityCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecuritySafeCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecurityTransparent": {
            "type": "boolean",
            "readOnly": true
          },
          "structLayoutAttribute": {
            "$ref": "#/components/schemas/StructLayoutAttribute"
          },
          "typeInitializer": {
            "$ref": "#/components/schemas/ConstructorInfo"
          },
          "typeHandle": {
            "$ref": "#/components/schemas/RuntimeTypeHandle"
          },
          "guid": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "baseType": {
            "$ref": "#/components/schemas/Type"
          },
          "isSerializable": {
            "type": "boolean",
            "readOnly": true
          },
          "containsGenericParameters": {
            "type": "boolean",
            "readOnly": true
          },
          "isVisible": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "TypeAttributes": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          16,
          24,
          32,
          128,
          256,
          1024,
          2048,
          4096,
          8192,
          16384,
          65536,
          131072,
          196608,
          262144,
          264192,
          1048576,
          12582912
        ],
        "type": "integer",
        "format": "int32"
      },
      "TypeInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "isInterface": {
            "type": "boolean",
            "readOnly": true
          },
          "memberType": {
            "$ref": "#/components/schemas/MemberTypes"
          },
          "namespace": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "assemblyQualifiedName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "fullName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "assembly": {
            "$ref": "#/components/schemas/Assembly"
          },
          "module": {
            "$ref": "#/components/schemas/Module"
          },
          "isNested": {
            "type": "boolean",
            "readOnly": true
          },
          "declaringType": {
            "$ref": "#/components/schemas/Type"
          },
          "declaringMethod": {
            "$ref": "#/components/schemas/MethodBase"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/Type"
          },
          "underlyingSystemType": {
            "$ref": "#/components/schemas/Type"
          },
          "isTypeDefinition": {
            "type": "boolean",
            "readOnly": true
          },
          "isArray": {
            "type": "boolean",
            "readOnly": true
          },
          "isByRef": {
            "type": "boolean",
            "readOnly": true
          },
          "isPointer": {
            "type": "boolean",
            "readOnly": true
          },
          "isConstructedGenericType": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericParameter": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericTypeParameter": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericMethodParameter": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericType": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericTypeDefinition": {
            "type": "boolean",
            "readOnly": true
          },
          "isSZArray": {
            "type": "boolean",
            "readOnly": true
          },
          "isVariableBoundArray": {
            "type": "boolean",
            "readOnly": true
          },
          "isByRefLike": {
            "type": "boolean",
            "readOnly": true
          },
          "hasElementType": {
            "type": "boolean",
            "readOnly": true
          },
          "genericTypeArguments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Type"
            },
            "nullable": true,
            "readOnly": true
          },
          "genericParameterPosition": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "genericParameterAttributes": {
            "$ref": "#/components/schemas/GenericParameterAttributes"
          },
          "attributes": {
            "$ref": "#/components/schemas/TypeAttributes"
          },
          "isAbstract": {
            "type": "boolean",
            "readOnly": true
          },
          "isImport": {
            "type": "boolean",
            "readOnly": true
          },
          "isSealed": {
            "type": "boolean",
            "readOnly": true
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true
          },
          "isClass": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedFamANDAssem": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedFamily": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedFamORAssem": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedPrivate": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isNotPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isAutoLayout": {
            "type": "boolean",
            "readOnly": true
          },
          "isExplicitLayout": {
            "type": "boolean",
            "readOnly": true
          },
          "isLayoutSequential": {
            "type": "boolean",
            "readOnly": true
          },
          "isAnsiClass": {
            "type": "boolean",
            "readOnly": true
          },
          "isAutoClass": {
            "type": "boolean",
            "readOnly": true
          },
          "isUnicodeClass": {
            "type": "boolean",
            "readOnly": true
          },
          "isCOMObject": {
            "type": "boolean",
            "readOnly": true
          },
          "isContextful": {
            "type": "boolean",
            "readOnly": true
          },
          "isEnum": {
            "type": "boolean",
            "readOnly": true
          },
          "isMarshalByRef": {
            "type": "boolean",
            "readOnly": true
          },
          "isPrimitive": {
            "type": "boolean",
            "readOnly": true
          },
          "isValueType": {
            "type": "boolean",
            "readOnly": true
          },
          "isSignatureType": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecurityCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecuritySafeCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecurityTransparent": {
            "type": "boolean",
            "readOnly": true
          },
          "structLayoutAttribute": {
            "$ref": "#/components/schemas/StructLayoutAttribute"
          },
          "typeInitializer": {
            "$ref": "#/components/schemas/ConstructorInfo"
          },
          "typeHandle": {
            "$ref": "#/components/schemas/RuntimeTypeHandle"
          },
          "guid": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "baseType": {
            "$ref": "#/components/schemas/Type"
          },
          "isSerializable": {
            "type": "boolean",
            "readOnly": true
          },
          "containsGenericParameters": {
            "type": "boolean",
            "readOnly": true
          },
          "isVisible": {
            "type": "boolean",
            "readOnly": true
          },
          "genericTypeParameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Type"
            },
            "nullable": true,
            "readOnly": true
          },
          "declaredConstructors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConstructorInfo"
            },
            "nullable": true,
            "readOnly": true
          },
          "declaredEvents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventInfo"
            },
            "nullable": true,
            "readOnly": true
          },
          "declaredFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldInfo"
            },
            "nullable": true,
            "readOnly": true
          },
          "declaredMembers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MemberInfo"
            },
            "nullable": true,
            "readOnly": true
          },
          "declaredMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MethodInfo"
            },
            "nullable": true,
            "readOnly": true
          },
          "declaredNestedTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TypeInfo"
            },
            "nullable": true,
            "readOnly": true
          },
          "declaredProperties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyInfo"
            },
            "nullable": true,
            "readOnly": true
          },
          "implementedInterfaces": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Type"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "UnitOfMeasure": {
        "enum": [
          "A",
          "D",
          "H",
          "M",
          "P",
          "U",
          "W",
          "Y"
        ],
        "type": "string",
        "description": "The unit of measure for the units indicated. \nA is an Amount. \nD is in Days. \nH is in Hours. \nM is in Minutes. \nP is in Periods.\nU is in Units. \nW is in Weeks. \nY is in Years. \n\nIf you're importing time data, this is required if clockIn/clouckOut is blank. If unitOfMeasure this is blank, the is hours. "
      },
      "UserDefinedDates": {
        "type": "object",
        "properties": {
          "date1": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "date2": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "date3": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "date4": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "date5": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "date6": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "date7": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "date8": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "date9": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "date10": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "date11": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "date12": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "date1Name": {
            "type": "string",
            "nullable": true
          },
          "date2Name": {
            "type": "string",
            "nullable": true
          },
          "date3Name": {
            "type": "string",
            "nullable": true
          },
          "date4Name": {
            "type": "string",
            "nullable": true
          },
          "date5Name": {
            "type": "string",
            "nullable": true
          },
          "date6Name": {
            "type": "string",
            "nullable": true
          },
          "date7Name": {
            "type": "string",
            "nullable": true
          },
          "date8Name": {
            "type": "string",
            "nullable": true
          },
          "date9Name": {
            "type": "string",
            "nullable": true
          },
          "date10Name": {
            "type": "string",
            "nullable": true
          },
          "date11Name": {
            "type": "string",
            "nullable": true
          },
          "date12Name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserDefinedValues": {
        "type": "object",
        "properties": {
          "dedFig1": {
            "type": "number",
            "description": "The Profile Field M1. It is a number between -999,999,999.99 and 999,999,999.99 and up to two decimal places.",
            "format": "double"
          },
          "dedFig2": {
            "type": "number",
            "description": "The Profile Field M2. It is a number between -999,999,999.99 and 999,999,999.99 and up to two decimal places.",
            "format": "double"
          },
          "dedFig3": {
            "type": "number",
            "description": "The Profile Field M3. It is a number between -999,999,999.99 and 999,999,999.99 and up to two decimal places.",
            "format": "double"
          },
          "dedFig4": {
            "type": "number",
            "description": "The Profile Field M4. It is a number between -999,999,999.99 and 999,999,999.99 and up to two decimal places.",
            "format": "double"
          },
          "dedFig5": {
            "type": "number",
            "description": "The Profile Field M5. It is a number between -999,999,999.99 and 999,999,999.99 and up to two decimal places.",
            "format": "double"
          },
          "dedFig6": {
            "type": "number",
            "description": "The Profile Field M6. It is a number between -999,999,999.99 and 999,999,999.99 and up to two decimal places.",
            "format": "double"
          },
          "dedFig7": {
            "type": "number",
            "description": "The Profile Field M7. It is a number between -999,999,999.99 and 999,999,999.99 and up to two decimal places.",
            "format": "double"
          },
          "dedFig8": {
            "type": "number",
            "description": "The Profile Field M8. It is a number between -999,999,999.99 and 999,999,999.99 and up to two decimal places.",
            "format": "double"
          },
          "dedFig9": {
            "type": "number",
            "description": "The Profile Field M9. It is a number between -999,999,999.99 and 999,999,999.99 and up to two decimal places.",
            "format": "double"
          },
          "dedFig10": {
            "type": "number",
            "description": "The Profile Field M30. It is a number between -999,999,999.99 and 999,999,999.99 and up to two decimal places.",
            "format": "double"
          },
          "dedFig11": {
            "type": "number",
            "description": "The Profile Field M31. It is a number between -999,999,999.99 and 999,999,999.99 and up to two decimal places.",
            "format": "double"
          },
          "dedFig12": {
            "type": "number",
            "description": "The Profile Field M32. It is a number between -999,999,999.99 and 999,999,999.99 and up to two decimal places.",
            "format": "double"
          },
          "dedFig13": {
            "type": "number",
            "description": "The Profile Field M33. It is a number between -999,999,999.99 and 999,999,999.99 and up to two decimal places.",
            "format": "double"
          },
          "dedFig14": {
            "type": "number",
            "description": "The Profile Field M34. It is a number between -999,999,999.99 and 999,999,999.99 and up to two decimal places.",
            "format": "double"
          },
          "dedFig15": {
            "type": "number",
            "description": "The Profile Field M35. It is a number between -999,999,999.99 and 999,999,999.99 and up to two decimal places.",
            "format": "double"
          },
          "otherText1": {
            "type": "string",
            "description": "Profile Field T1. Text which can be up to 126 characters. \nIf the T1 Text Type in Payroll Parameters is anything other than Text or Required Text, the value match the ID of the selected Type.",
            "nullable": true
          },
          "otherText2": {
            "type": "string",
            "description": "Profile Field T2. Text which can be up to 126 characters. \nIf the T2 Text Type in Payroll Parameters is anything other than Text or Required Text, the value match the ID of the selected Type.",
            "nullable": true
          },
          "otherText3": {
            "type": "string",
            "description": "Profile Field T3. Text which can be up to 126 characters. \nIf the T3 Text Type in Payroll Parameters is anything other than Text or Required Text, the value match the ID of the selected Type.",
            "nullable": true
          },
          "otherText4": {
            "type": "string",
            "description": "Profile Field T4. Text which can be up to 126 characters. \nIf the T4 Text Type in Payroll Parameters is anything other than Text or Required Text, the value match the ID of the selected Type.",
            "nullable": true
          },
          "otherText5": {
            "type": "string",
            "description": "Profile Field T5. Text which can be up to 126 characters. \nIf the T5 Text Type in Payroll Parameters is anything other than Text or Required Text, the value match the ID of the selected Type.",
            "nullable": true
          },
          "otherText6": {
            "type": "string",
            "description": "Profile Field T6. Text which can be up to 126 characters. \nIf the T6 Text Type in Payroll Parameters is anything other than Text or Required Text, the value match the ID of the selected Type.",
            "nullable": true
          },
          "otherText7": {
            "type": "string",
            "description": "Profile Field T7. Text which can be up to 126 characters. \nIf the T7 Text Type in Payroll Parameters is anything other than Text or Required Text, the value match the ID of the selected Type.",
            "nullable": true
          },
          "otherText8": {
            "type": "string",
            "description": "Profile Field T8. Text which can be up to 126 characters. \nIf the T8 Text Type in Payroll Parameters is anything other than Text or Required Text, the value match the ID of the selected Type.",
            "nullable": true
          },
          "otherText9": {
            "type": "string",
            "description": "Profile Field T9. Text which can be up to 126 characters. \nIf the T9 Text Type in Payroll Parameters is anything other than Text or Required Text, the value match the ID of the selected Type.",
            "nullable": true
          },
          "otherText10": {
            "type": "string",
            "description": "Profile Field T10. Text which can be up to 126 characters. \nIf the T10 Text Type in Payroll Parameters is anything other than Text or Required Text, the value match the ID of the selected Type.",
            "nullable": true
          },
          "otherText11": {
            "type": "string",
            "description": "Profile Field T11. Text which can be up to 126 characters. \nIf the T11 Text Type in Payroll Parameters is anything other than Text or Required Text, the value match the ID of the selected Type.",
            "nullable": true
          },
          "otherText12": {
            "type": "string",
            "description": "Profile Field T12. Text which can be up to 126 characters. \nIf the T12 Text Type in Payroll Parameters is anything other than Text or Required Text, the value match the ID of the selected Type.",
            "nullable": true
          },
          "otherText13": {
            "type": "string",
            "description": "Profile Field T13. Text which can be up to 126 characters. \nIf the T13 Text Type in Payroll Parameters is anything other than Text or Required Text, the value match the ID of the selected Type.",
            "nullable": true
          },
          "otherText14": {
            "type": "string",
            "description": "Profile Field T14. Text which can be up to 126 characters. \nIf the T14 Text Type in Payroll Parameters is anything other than Text or Required Text, the value match the ID of the selected Type.",
            "nullable": true
          },
          "otherText15": {
            "type": "string",
            "description": "Profile Field T15. Text which can be up to 126 characters. \nIf the T15 Text Type in Payroll Parameters is anything other than Text or Required Text, the value match the ID of the selected Type.",
            "nullable": true
          },
          "otherText16": {
            "type": "string",
            "description": "Profile Field T16. Text which can be up to 126 characters. \nIf the T16 Text Type in Payroll Parameters is anything other than Text or Required Text, the value match the ID of the selected Type.",
            "nullable": true
          },
          "otherText17": {
            "type": "string",
            "nullable": true
          },
          "otherText18": {
            "type": "string",
            "description": "Profile Field T18. Text which can be up to 126 characters. \nIf the T18 Text Type in Payroll Parameters is anything other than Text or Required Text, the value match the ID of the selected Type.",
            "nullable": true
          },
          "otherText19": {
            "type": "string",
            "description": "Profile Field T19. Text which can be up to 126 characters. \nIf the T19 Text Type in Payroll Parameters is anything other than Text or Required Text, the value match the ID of the selected Type.",
            "nullable": true
          },
          "otherText20": {
            "type": "string",
            "description": "Profile Field T20. Text which can be up to 126 characters. \nIf the T20 Text Type in Payroll Parameters is anything other than Text or Required Text, the value match the ID of the selected Type.",
            "nullable": true
          },
          "dedFigName1": {
            "type": "string",
            "nullable": true
          },
          "dedFigName2": {
            "type": "string",
            "nullable": true
          },
          "dedFigName3": {
            "type": "string",
            "nullable": true
          },
          "dedFigName4": {
            "type": "string",
            "nullable": true
          },
          "dedFigName5": {
            "type": "string",
            "nullable": true
          },
          "dedFigName6": {
            "type": "string",
            "nullable": true
          },
          "dedFigName7": {
            "type": "string",
            "nullable": true
          },
          "dedFigName8": {
            "type": "string",
            "nullable": true
          },
          "dedFigName9": {
            "type": "string",
            "nullable": true
          },
          "dedFigName10": {
            "type": "string",
            "nullable": true
          },
          "dedFigName11": {
            "type": "string",
            "nullable": true
          },
          "dedFigName12": {
            "type": "string",
            "nullable": true
          },
          "dedFigName13": {
            "type": "string",
            "nullable": true
          },
          "dedFigName14": {
            "type": "string",
            "nullable": true
          },
          "dedFigName15": {
            "type": "string",
            "nullable": true
          },
          "textFieldName1": {
            "type": "string",
            "nullable": true
          },
          "textFieldName2": {
            "type": "string",
            "nullable": true
          },
          "textFieldName3": {
            "type": "string",
            "nullable": true
          },
          "textFieldName4": {
            "type": "string",
            "nullable": true
          },
          "textFieldName5": {
            "type": "string",
            "nullable": true
          },
          "textFieldName6": {
            "type": "string",
            "nullable": true
          },
          "textFieldName7": {
            "type": "string",
            "nullable": true
          },
          "textFieldName8": {
            "type": "string",
            "nullable": true
          },
          "textFieldName9": {
            "type": "string",
            "nullable": true
          },
          "textFieldName10": {
            "type": "string",
            "nullable": true
          },
          "textFieldName11": {
            "type": "string",
            "nullable": true
          },
          "textFieldName12": {
            "type": "string",
            "nullable": true
          },
          "textFieldName13": {
            "type": "string",
            "nullable": true
          },
          "textFieldName14": {
            "type": "string",
            "nullable": true
          },
          "textFieldName15": {
            "type": "string",
            "nullable": true
          },
          "textFieldName16": {
            "type": "string",
            "nullable": true
          },
          "textFieldName17": {
            "type": "string",
            "nullable": true
          },
          "textFieldName18": {
            "type": "string",
            "nullable": true
          },
          "textFieldName19": {
            "type": "string",
            "nullable": true
          },
          "textFieldName20": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserGroup": {
        "type": "object",
        "properties": {
          "groupName": {
            "type": "string",
            "nullable": true
          },
          "accessType": {
            "$ref": "#/components/schemas/AccessType"
          },
          "machine": {
            "type": "string",
            "nullable": true
          },
          "responsibility": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserSetup": {
        "type": "object",
        "properties": {
          "empNo": {
            "type": "string",
            "description": "The employee number of the employee. When not provided the employee number assigned to the current user will be used if available.",
            "nullable": true
          },
          "username": {
            "type": "string",
            "description": "The Avanti User Name that the employee uses to log into ASSP, Avanti Go, and the Avanti Desktop Application, if applicable. Must be a valid Avanti User Name.",
            "nullable": true
          },
          "givenName": {
            "type": "string",
            "description": "The employee's first name.",
            "nullable": true
          },
          "preferedName": {
            "type": "string",
            "nullable": true
          },
          "surname": {
            "type": "string",
            "description": "The employee's last name.",
            "nullable": true
          },
          "initial": {
            "type": "string",
            "description": "The middle initial of the employee's name.",
            "nullable": true
          },
          "position": {
            "type": "string",
            "nullable": true
          },
          "positionName": {
            "type": "string",
            "nullable": true
          },
          "empNameFormat": {
            "type": "integer",
            "format": "int32"
          },
          "dateTimeFormat": {
            "type": "string",
            "nullable": true
          },
          "dateFormat": {
            "type": "string",
            "nullable": true
          },
          "menu": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MenuItem"
            },
            "nullable": true
          },
          "antiForgeryToken": {
            "type": "string",
            "nullable": true
          },
          "sessionTimeout": {
            "type": "integer",
            "format": "int32"
          },
          "settings": {
            "$ref": "#/components/schemas/Settings"
          },
          "userClass": {
            "$ref": "#/components/schemas/UserClass"
          },
          "serialNo": {
            "type": "string",
            "nullable": true
          },
          "minimumAvantiGoVersion": {
            "type": "string",
            "nullable": true
          },
          "province": {
            "type": "string",
            "nullable": true
          },
          "payGroup": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VacationGroup": {
        "type": "object",
        "properties": {
          "vacGrp": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "basis": {
            "type": "string",
            "nullable": true
          },
          "startMonth": {
            "type": "integer",
            "format": "int32"
          },
          "percent": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "double"
            },
            "nullable": true
          },
          "anniv": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "nextVacGrp": {
            "type": "string",
            "nullable": true
          },
          "nextVacGrpName": {
            "type": "string",
            "nullable": true
          },
          "benCode": {
            "type": "string",
            "nullable": true
          },
          "benCodeName": {
            "type": "string",
            "nullable": true
          },
          "benCodeNameFr": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Validation": {
        "type": "object",
        "properties": {
          "value": {
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ValidationSchema": {
        "type": "object",
        "properties": {
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyValidationSchema"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "WebPunch": {
        "type": "object",
        "properties": {
          "empNo": {
            "type": "string",
            "description": "The employee number of the employee. When not provided the employee number assigned to the current user will be used if available.",
            "nullable": true
          },
          "isInPunch": {
            "type": "boolean",
            "description": "Indicates whether the punch is a punch in or punch out. If true, it is an in punch. If false, it is an out punch. Default is false."
          },
          "isBreak": {
            "type": "boolean",
            "description": "Indicates whether the punch is for a break. If true, it is for a break. If false, it is not for a break. Default is false."
          },
          "punchDateTime": {
            "type": "string",
            "description": "The time of the punch is the current time on the SQL Server, adjusted by the time zone specified on Web Punch Employee Setup on the Desktop Application. If there is no setup for the employee, the time will be adjusted by the Province of Employment on the Tax Factors tab of the Employee Profile.\n\nThis will be generated on a Post and should not be included in the body.",
            "format": "date-time"
          },
          "latitude": {
            "type": "number",
            "description": "Indicates the latitude of the employees location when they punched. This is required if company web setting MobileSettings.WebPunchSettings.RequireLocationServices is true. \n\nThis will not be returned when doing a get.",
            "format": "double",
            "nullable": true
          },
          "longitude": {
            "type": "number",
            "description": "Indicates the longitude of the employee's location when they punched. This is required if company web setting MobileSettings.WebPunchSettings.RequireLocationServices is true. \n\nThis will not be returned when doing a get.",
            "format": "double",
            "nullable": true
          },
          "punchDateTimeUtc": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WebPunchSettings": {
        "type": "object",
        "properties": {
          "enableWebLocationServices": {
            "type": "boolean"
          },
          "requireWebLocationServices": {
            "type": "boolean"
          },
          "enableMobileLocationServices": {
            "type": "boolean"
          },
          "requireMobileLocationServices": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "WhatsNew": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "description": "This property is not used at this time.",
            "nullable": true
          },
          "body": {
            "$ref": "#/components/schemas/BodyView"
          },
          "metadata": {
            "$ref": "#/components/schemas/MetaData"
          },
          "history": {
            "$ref": "#/components/schemas/History"
          }
        },
        "additionalProperties": false
      },
      "YtdLtdPositionUnits": {
        "type": "object",
        "properties": {
          "position": {
            "type": "string",
            "nullable": true
          },
          "positionName": {
            "type": "string",
            "nullable": true
          },
          "rateLevel": {
            "type": "integer",
            "format": "int32"
          },
          "ytdUnits": {
            "type": "number",
            "format": "double"
          },
          "ytdUOM": {
            "type": "string",
            "nullable": true
          },
          "ltdUnits": {
            "type": "number",
            "format": "double"
          },
          "ltdUOM": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PositionUserDefinedLabels": {
        "type": "object",
        "properties": {
          "positionFigName1": {
            "type": "string",
            "nullable": true
          },
          "positionFigName2": {
            "type": "string",
            "nullable": true
          },
          "positionFigName3": {
            "type": "string",
            "nullable": true
          },
          "positionFigName4": {
            "type": "string",
            "nullable": true
          },
          "positionFigName5": {
            "type": "string",
            "nullable": true
          },
          "positionFigName6": {
            "type": "string",
            "nullable": true
          },
          "positionFigName7": {
            "type": "string",
            "nullable": true
          },
          "positionFigName8": {
            "type": "string",
            "nullable": true
          },
          "positionFigName9": {
            "type": "string",
            "nullable": true
          },
          "positionFigName10": {
            "type": "string",
            "nullable": true
          },
          "positionDateName1": {
            "type": "string",
            "nullable": true
          },
          "positionDateName2": {
            "type": "string",
            "nullable": true
          },
          "positionDateName3": {
            "type": "string",
            "nullable": true
          },
          "positionDateName4": {
            "type": "string",
            "nullable": true
          },
          "positionDateName5": {
            "type": "string",
            "nullable": true
          },
          "positionDateName6": {
            "type": "string",
            "nullable": true
          },
          "positionDateName7": {
            "type": "string",
            "nullable": true
          },
          "positionDateName8": {
            "type": "string",
            "nullable": true
          },
          "positionDateName9": {
            "type": "string",
            "nullable": true
          },
          "positionDateName10": {
            "type": "string",
            "nullable": true
          },
          "positionTextName1": {
            "type": "string",
            "nullable": true
          },
          "positionTextName2": {
            "type": "string",
            "nullable": true
          },
          "positionTextName3": {
            "type": "string",
            "nullable": true
          },
          "positionTextName4": {
            "type": "string",
            "nullable": true
          },
          "positionTextName5": {
            "type": "string",
            "nullable": true
          },
          "positionTextName6": {
            "type": "string",
            "nullable": true
          },
          "positionTextName7": {
            "type": "string",
            "nullable": true
          },
          "positionTextName8": {
            "type": "string",
            "nullable": true
          },
          "positionTextName9": {
            "type": "string",
            "nullable": true
          },
          "positionTextName10": {
            "type": "string",
            "nullable": true
          },
          "positionBoolName1": {
            "type": "string",
            "nullable": true
          },
          "positionBoolName2": {
            "type": "string",
            "nullable": true
          },
          "positionBoolName3": {
            "type": "string",
            "nullable": true
          },
          "positionBoolName4": {
            "type": "string",
            "nullable": true
          },
          "positionBoolName5": {
            "type": "string",
            "nullable": true
          },
          "positionBoolName6": {
            "type": "string",
            "nullable": true
          },
          "positionBoolName7": {
            "type": "string",
            "nullable": true
          },
          "positionBoolName8": {
            "type": "string",
            "nullable": true
          },
          "positionBoolName9": {
            "type": "string",
            "nullable": true
          },
          "positionBoolName10": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ConsentForm": {
        "type": "object",
        "properties": {
          "termsOfServiceId": {
            "type": "integer",
            "format": "int32"
          },
          "company": {
            "type": "string",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "nullable": true
          },
          "hasRead": {
            "type": "boolean"
          },
          "hasAccepted": {
            "type": "boolean"
          },
          "signature": {
            "type": "string",
            "nullable": true
          },
          "signatureDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "TermsOfService": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "contract": {
            "type": "string",
            "nullable": true
          },
          "contractDate": {
            "type": "string",
            "format": "date-time"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "hasRead": {
            "type": "boolean",
            "nullable": true
          },
          "hasAgreed": {
            "type": "boolean",
            "nullable": true
          },
          "signature": {
            "type": "string",
            "nullable": true
          },
          "signatureDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "nullable": true
          },
          "company": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Setup": {
        "type": "object",
        "properties": {
          "userGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            },
            "nullable": true
          },
          "roleTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextValuePair"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserClass": {
        "enum": [
          0,
          1,
          2,
          3,
          99
        ],
        "type": "integer",
        "format": "int32"
      },
      "AttendanceDataRequest": {
        "required": [
          "fromTime",
          "toTime",
          "earnDeductCode"
        ],
        "type": "object",
        "properties": {
          "fromTime": {
            "type": "string",
            "description": "The From Date and Time in iSO 8601 format. Only entries after this are returned. ",
            "format": "date-time"
          },
          "toTime": {
            "type": "string",
            "description": "The To Date and Time in iSO 8601 format. Only entries before this date are returned. ",
            "format": "date-time"
          },
          "earnDeductCode": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "The three-digit earning, deduction or benefit code. Only entries with code are returned."
          },
          "employeeNumbers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Entries are only returned for the employees listed. If blank, entries are returned for all employees.",
            "nullable": true
          },
          "payGroups": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The three digit ID of the pay groups. Entries are only returned for employees in the pay groups. ",
            "nullable": true
          },
          "attendanceCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The ID of the attendance codes. Only entries with these attendance codes are returned. ",
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "description": "Enter true to return entries for active employees. If blank or false, entries are only returned for inactive employees."
          }
        },
        "additionalProperties": false,
        "x-examples": {
          "example-1": {
            "value": {
              "fromTime": "2019-08-24T14:15:22.0000000+00:00",
              "toTime": "2019-08-24T14:15:22.0000000+00:00",
              "earnDeductCode": "str",
              "employeeNumbers": [
                "string"
              ],
              "payGroups": [
                "string"
              ],
              "attendanceCodes": [
                "string"
              ],
              "active": true
            }
          }
        }
      },
      "PayStatementsList": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "payStatements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayStatement"
            },
            "nullable": true
          },
          "years": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "nextPaymentDate": {
            "type": "string",
            "nullable": true
          },
          "enableEmail": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Entitlement": {
        "type": "object",
        "properties": {
          "empNo": {
            "type": "string",
            "nullable": true
          },
          "entitlementCode": {
            "type": "string",
            "nullable": true
          },
          "entitlementCodeDesc": {
            "type": "string",
            "nullable": true
          },
          "entitlementCodeDescFr": {
            "type": "string",
            "nullable": true
          },
          "carriedFwd": {
            "type": "number",
            "format": "double"
          },
          "carriedFwdUnit": {
            "type": "number",
            "format": "double"
          },
          "uom": {
            "type": "string"
          },
          "displayUOM": {
            "type": "string"
          },
          "accrued": {
            "type": "number",
            "format": "double"
          },
          "accruedUnit": {
            "type": "number",
            "format": "double"
          },
          "pendingAccrued": {
            "type": "number",
            "format": "double"
          },
          "pendingAccruedUnit": {
            "type": "number",
            "format": "double"
          },
          "taken": {
            "type": "number",
            "format": "double"
          },
          "takenUnit": {
            "type": "number",
            "format": "double"
          },
          "pendingTaken": {
            "type": "number",
            "format": "double"
          },
          "pendingTakenUnit": {
            "type": "number",
            "format": "double"
          },
          "available": {
            "type": "number",
            "format": "double"
          },
          "availableUnit": {
            "type": "number",
            "format": "double"
          },
          "availableWithPending": {
            "type": "number",
            "format": "double"
          },
          "availableUnitWithPending": {
            "type": "number",
            "format": "double"
          },
          "icon": {
            "type": "integer",
            "format": "int32"
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "isActive": {
            "type": "boolean"
          },
          "type": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "EntitlementsSettings": {
        "type": "object",
        "properties": {
          "disclaimerText": {
            "type": "string",
            "nullable": true
          },
          "disclaimerTextFr": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EntitlementEntry": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "earningCode": {
            "type": "string",
            "nullable": true
          },
          "earningCodeName": {
            "type": "string",
            "nullable": true
          },
          "earningCodeShortName": {
            "type": "string",
            "nullable": true
          },
          "earningCodeNameFr": {
            "type": "string",
            "nullable": true
          },
          "earningCodeShortNameFr": {
            "type": "string",
            "nullable": true
          },
          "isPending": {
            "type": "boolean"
          },
          "units": {
            "type": "number",
            "format": "double"
          },
          "uom": {
            "type": "string"
          },
          "fromTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "toTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CategoryType": {
        "enum": [
          66,
          68,
          69
        ],
        "type": "integer",
        "format": "int32"
      },
      "CompensationCategory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "nameFr": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/CategoryType"
          },
          "colour": {
            "type": "string",
            "nullable": true
          },
          "icon": {
            "type": "integer",
            "format": "int32"
          },
          "earningDeductCodePairs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextValuePair"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EmployeeEntitlementsSetupResponse": {
        "type": "object",
        "properties": {
          "settings": {
            "$ref": "#/components/schemas/EntitlementsSettings"
          }
        },
        "additionalProperties": false
      },
      "AttendanceData": {
        "type": "object",
        "properties": {
          "empNo": {
            "type": "string",
            "nullable": true
          },
          "location": {
            "type": "string",
            "nullable": true
          },
          "empName": {
            "type": "string",
            "nullable": true
          },
          "payGroup": {
            "type": "string",
            "nullable": true
          },
          "attendanceDescription": {
            "type": "string",
            "nullable": true
          },
          "earnDeductCode": {
            "type": "string",
            "nullable": true
          },
          "unit": {
            "type": "number",
            "format": "double"
          },
          "dedFig10": {
            "type": "number",
            "format": "double"
          },
          "entryDate": {
            "type": "string",
            "format": "date-time"
          },
          "dayOfWeek": {
            "type": "string",
            "nullable": true
          },
          "timeDataId": {
            "type": "integer",
            "format": "int32"
          },
          "comments": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GlProjectSegment": {
        "type": "object",
        "properties": {
          "project": null,
          "phases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhaseIdentifier"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GlProjectSegmentBasicSetup": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "If left blank, defaut is True. The project account must be active to use the GL account. Inactive accounts cannot be used for new account validation, and are used for reporting."
          },
          "effectiveDate": {
            "type": "string",
            "description": "If specified, the entry date must be on or after the effective date for the account to be used. The effective date is in ISO 8601 format.",
            "format": "date-time",
            "nullable": true
          },
          "expiryDate": {
            "type": "string",
            "description": "If specified, the entry date must be before or on the expiry date for the account to be used. The effective expiry is in ISO 8601 format.",
            "format": "date-time",
            "nullable": true
          },
          "type": {
            "maxLength": 1,
            "minLength": 0,
            "type": "string",
            "description": "The ID of the project's type. ",
            "nullable": true
          },
          "validationMask": {
            "maxLength": 60,
            "minLength": 0,
            "type": "string",
            "description": "Enter the GL account format, with the account in the correct segment. For additional GL validation, replace other aspects of the account. Accounts must match the replaced aspect to pass validation.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "A longer description of the project.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GlProjectSegmentRequest": {
        "required": [
          "account",
          "name",
          "basicSetup"
        ],
        "type": "object",
        "properties": {
          "account": {
            "maxLength": 15,
            "minLength": 0,
            "type": "string",
            "description": "The project account. This must match the format of the project segment."
          },
          "name": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The description of project account, which can be up to 50 characters."
          },
          "abbreviation": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "A short name for the project, which can be up to 10 characters.",
            "nullable": true
          },
          "basicSetup": {
            "$ref": "#/components/schemas/GlProjectSegmentBasicSetup"
          },
          "phases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhaseIdentifier"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PhaseIdentifier": {
        "required": [
          "segmentNo",
          "phase"
        ],
        "type": "object",
        "properties": {
          "segmentNo": {
            "type": "integer",
            "description": "The GL segment number for the phase. ",
            "format": "int32"
          },
          "phase": {
            "maxLength": 15,
            "minLength": 0,
            "type": "string",
            "description": "The phase's GL account. "
          }
        },
        "additionalProperties": false,
        "description": "Sets which phases can be used with the Project."
      },
      "PayCode": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Returns the pay code's ID. ",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Returns the pay code's description.",
            "nullable": true
          },
          "useAttendReason": {
            "type": "string",
            "description": "Returns Y if the pay code uses attendance codes. Returns N if the pay code doesn't. \nOnly applicable if the pay code has an earning code. ",
            "nullable": true
          },
          "useShifts": {
            "type": "integer",
            "description": "Returns whether shifts are used, optional or required for the pay code. \nReturns 0 if a shifts code isn't allowed. \nReturns 1 if a shifts code is  optional.\nReturns 2 if a shift code is required. ",
            "format": "int32"
          },
          "earnCode": {
            "type": "string",
            "description": "The three-digit earning or deduction code for the entry. Earning Codes are from 001 to 499. ",
            "nullable": true
          },
          "useUnits": {
            "type": "boolean",
            "description": "Returns True if the pay code uses units and units of measure. Returns False if the pay code uses from/to times. "
          },
          "defaultUnits": {
            "type": "number",
            "description": "The default number of units if the pay code is selected when inserting an entry. \nOnly applicable if useUnits is True. ",
            "format": "double"
          },
          "defaultUnitCode": {
            "type": "string",
            "description": "The default unit of measure if the pay code is selected when inserting an entry. Only applicable if useUnits is True. \nH is hours.\nD is days. \nU is units.",
            "nullable": true
          },
          "useOnlyInSchedules": {
            "type": "boolean",
            "description": "Returns True if the pay code is only used in Schedules, false if it's used elsewhere in Time & Attendance. "
          },
          "excludeFromTotals": {
            "type": "boolean",
            "description": "Returns True if entries are excluded from schedule totals. Returns False if entries are included in schedule totals. "
          },
          "r": {
            "type": "integer",
            "description": "Returns the r value used to create the rgb color. Only used if useColor is true. ",
            "format": "int32"
          },
          "g": {
            "type": "integer",
            "description": "Returns the g value used to create the rgb color. Only used if useColor is true. ",
            "format": "int32"
          },
          "b": {
            "type": "integer",
            "description": "Returns the B value used to create the rgb color. Only used if useColor is true. ",
            "format": "int32"
          },
          "useColor": {
            "type": "boolean",
            "description": "Returns True if a color displays on cells with an entry with the pay code. Uses the rgb color."
          },
          "active": {
            "type": "boolean",
            "description": "Returns True if the pay code is active, false if it's inactive. "
          },
          "allowOverlappingTimes": {
            "type": "boolean",
            "description": "Returns True if entries can overlap with other schedules entries. Returns Fase if schedule entries cannot overlap."
          },
          "overlappingFromTime": {
            "type": "integer",
            "description": "Sets the overlapping from time.\nOnly used if useUnits is True and allowOverlappingTimes is false. ",
            "format": "int32",
            "nullable": true
          },
          "overlappingToTime": {
            "type": "integer",
            "description": "Returns the overlapping to time.\nOnly used if useUnits is True and allowOverlappingTimes is false. ",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StringTextValuePairListKeyValuePair": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextValuePair"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "RoleAssignmentPermission": {
        "type": "object",
        "properties": {
          "roleId": {
            "type": "string",
            "nullable": true
          },
          "roleType": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "expiryDate": {
            "type": "string",
            "format": "date-time"
          },
          "approvalLevel": {
            "type": "integer",
            "format": "int32"
          },
          "insertData": {
            "type": "boolean"
          },
          "modifyData": {
            "type": "boolean"
          },
          "viewData": {
            "type": "boolean"
          },
          "deleteData": {
            "type": "boolean"
          },
          "viewAmounts": {
            "type": "boolean"
          },
          "createTime": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "WorkTechExport": {
        "required": [
          "batchNo",
          "employeeNo",
          "exportedBy",
          "hours",
          "payRate",
          "status",
          "transactionNo",
          "workDateTime",
          "workTechActivity",
          "workTechJob"
        ],
        "type": "object",
        "properties": {
          "exportNo": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "transactionNo": {
            "type": "integer",
            "format": "int32"
          },
          "employeeNo": {
            "maxLength": 9,
            "minLength": 0,
            "type": "string"
          },
          "batchNo": {
            "type": "integer",
            "format": "int32"
          },
          "workDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "hours": {
            "type": "number",
            "format": "double"
          },
          "payCode": {
            "maxLength": 9,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "position": {
            "maxLength": 12,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "shiftId": {
            "maxLength": 9,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "workTechJob": {
            "maxLength": 15,
            "minLength": 0,
            "type": "string"
          },
          "workTechActivity": {
            "maxLength": 15,
            "minLength": 0,
            "type": "string"
          },
          "taskId": {
            "maxLength": 9,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "payRate": {
            "type": "number",
            "format": "double"
          },
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "exportedBy": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string"
          },
          "exportedDate": {
            "type": "string",
            "format": "date-time"
          },
          "glAccount": {
            "maxLength": 60,
            "minLength": 0,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WorkTechImport": {
        "required": [
          "batchNo",
          "employeeNo",
          "glAccount",
          "hours",
          "importedBy",
          "otOption",
          "status",
          "transactionNo",
          "workDateTime",
          "workTechActivity",
          "workTechJob"
        ],
        "type": "object",
        "properties": {
          "transactionNo": {
            "type": "integer",
            "format": "int32"
          },
          "batchNo": {
            "type": "integer",
            "format": "int32"
          },
          "employeeNo": {
            "maxLength": 9,
            "minLength": 0,
            "type": "string"
          },
          "workDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "hours": {
            "type": "number",
            "format": "double"
          },
          "payCode": {
            "maxLength": 9,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "position": {
            "maxLength": 12,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "shiftId": {
            "maxLength": 9,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "workTechJob": {
            "maxLength": 15,
            "minLength": 0,
            "type": "string"
          },
          "workTechActivity": {
            "maxLength": 15,
            "minLength": 0,
            "type": "string"
          },
          "taskId": {
            "maxLength": 9,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "otOption": {
            "type": "integer",
            "format": "int32"
          },
          "glAccount": {
            "maxLength": 60,
            "minLength": 0,
            "type": "string"
          },
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "importedBy": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string"
          },
          "importedDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Beneficiary": {
        "title": "",
        "required": [
          "givenName",
          "surname"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The Deduction/Benefit codes for the beneficiary.",
            "nullable": true
          },
          "givenName": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "description": "The first name of the employee's beneficiary."
          },
          "surname": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "description": "The last name of the employee's beneficiary."
          },
          "initial": {
            "maxLength": 1,
            "minLength": 0,
            "type": "string",
            "description": "The middle name initial of the employee's beneficiary.",
            "nullable": true
          },
          "percentage": {
            "type": "number",
            "description": "The percentage amount that the beneficiary is entitled to.",
            "format": "double"
          },
          "revocable": {
            "type": "string",
            "description": "Returns Y if the beneficiary is revocable. Returns N if the beneficiary is irrevocable.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChangeLog": {
        "required": [
          "description",
          "employeeNo",
          "fileName",
          "logDate",
          "logIndex",
          "logtime",
          "userId"
        ],
        "type": "object",
        "properties": {
          "logIndex": {
            "type": "integer",
            "format": "int32"
          },
          "userId": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string"
          },
          "logDate": {
            "type": "string",
            "format": "date-time"
          },
          "logtime": {
            "maxLength": 5,
            "minLength": 0,
            "type": "string"
          },
          "fileName": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string"
          },
          "employeeNo": {
            "maxLength": 9,
            "minLength": 0,
            "type": "string"
          },
          "description": {
            "maxLength": 7,
            "minLength": 0,
            "type": "string"
          },
          "changeFrom": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "changeTo": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "columnName": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "changeReason": {
            "maxLength": 9,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "changeComment": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "valueChangeFrom": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "valueChangeTo": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "extensionColumnName": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "extensionDescription": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EmployeeBenefitDetails": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Returns the three-digit code for the benefit code.",
            "nullable": true
          },
          "codeDescription": {
            "type": "string",
            "description": "Returns the benefit's English description.",
            "nullable": true
          },
          "codeDescriptionFr": {
            "type": "string",
            "description": "Returns the benefit's French description.",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "coverageAmount": {
            "type": "number",
            "format": "double"
          },
          "expiryDate": {
            "type": "string",
            "description": "The date the benefit ends in ISO 8601 format.",
            "format": "date",
            "nullable": true
          },
          "expiryDateString": {
            "type": "string",
            "description": "This property is not used at this time.",
            "nullable": true
          },
          "coverageOverride": {
            "type": "string",
            "description": "Returns Y if the coverage amount is different for the employee than the benefit code. ",
            "nullable": true
          },
          "waived": {
            "type": "string",
            "description": "Returns Y if the employee declined the benefit, N if the benefit if they opted in for the benefit. ",
            "nullable": true
          },
          "certificate": {
            "type": "string",
            "description": "The certificate number that is assigned to the employee by the benefit provider. ",
            "nullable": true
          },
          "coverageEffectiveDate": {
            "type": "string",
            "description": "The date the benefit begins in ISO 8601 format.",
            "format": "date",
            "nullable": true
          },
          "coverageEffectiveDateString": {
            "type": "string",
            "description": "This property is not used at this time.",
            "nullable": true
          },
          "dependents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Dependent"
            },
            "nullable": true,
            "readOnly": true
          },
          "dependentsFormatted": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The format of the dependant's name. The options are in the description above. ",
            "nullable": true,
            "readOnly": true
          },
          "beneficiaries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Beneficiary"
            },
            "nullable": true,
            "readOnly": true
          },
          "beneficiariesFormatted": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The format of the beneficiaries' name. The options are in the description above. ",
            "nullable": true,
            "readOnly": true
          },
          "nameFormat": {
            "type": "integer",
            "description": "The format of the employees's name. The options are in the description above. ",
            "format": "int32"
          },
          "displayPercentages": {
            "type": "boolean",
            "description": "Returns true/false based on company web setting BenefitsSettings.DisplayPercentages. \n\nThis setting determines whether administrators want to display the beneficiaries' percentage in the Avanti Self-Service Portal. "
          },
          "daysBeforeEffective": {
            "type": "integer",
            "description": "Returns a number based on company web setting BenefitsSettings.BenefitsSettings.DisplayDaysBeforeEffective. \n\nThis setting determines when the benefit starts displaying on the Avanti Self-Service Portal, based on the days before the benefit's effective date. \n\nFor example, if this is seven, the benefit displays on the Avanti Self-Service Portal a week before the effective date.",
            "format": "int32"
          },
          "daysAfterExpiry": {
            "type": "integer",
            "description": "Returns a number based on company web setting BenefitsSettings.BenefitsSettings.DisplayDaysAfterExpiry. \n\nThis setting determines when the benefit stops displaying on the Avanti Self-Service Portal, based on the number of days after the benefits' expiry date. \n\nFor example, if this is 14, the benefit displays on the Avanti Self-Service Portal for two weeks after the expiry date. ",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ImportPayrollDataResult": {
        "type": "object",
        "properties": {
          "importedPayrollData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayrollData"
            },
            "nullable": true
          },
          "invalidPayrollData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayrollData"
            },
            "nullable": true
          },
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PayrollData": {
        "required": [
          "empNo",
          "entryDate",
          "earnDeductCode",
          "units",
          "unitOfMeasure"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "This gets included in the response. You can use this to map error messages to invalid entries. \n\nWhen making a post request, leave this blank.",
            "nullable": true
          },
          "empNo": {
            "maxLength": 9,
            "minLength": 0,
            "type": "string",
            "description": "The employee number assigned to the employee."
          },
          "entryDate": {
            "type": "string",
            "description": "The date of the payroll data entry in ISO 8601 format.",
            "format": "date-time"
          },
          "earnDeductCode": {
            "maxLength": 3,
            "minLength": 0,
            "pattern": "[0-9]*",
            "type": "string",
            "description": "The three-digit earning or deduction code for the entry. Earning Codes are from 001 to 499. Deduction Codes are from 500 to 999."
          },
          "positionCode": {
            "maxLength": 12,
            "minLength": 0,
            "type": "string",
            "description": "The ID of the position worked. If the position is left blank, the employee's primary position will be used if required for rates.\n\nIf ‘Only allow defined Employee Positions in time data entry’ is selected on the Time Data Entry tab in Payroll Parameters, the position must be on the employee’s profile.",
            "nullable": true
          },
          "units": {
            "type": "number",
            "description": "The units for the payroll data entry.",
            "format": "double"
          },
          "unitOfMeasure": {
            "$ref": "#/components/schemas/UnitOfMeasure"
          },
          "dollarRate": {
            "type": "number",
            "description": "The dollar rate of pay. This will only be used for earnings if earnDeductCode is 001 to 499.\n\nIf left blank, the rate of pay will be determined within Avanti.",
            "format": "double"
          },
          "earningAmount": {
            "type": "number",
            "description": "Enter the earning amount for the entry. If you're using dollarRate, this must match the total for the units by dollarRate.\n\nThis is only used if the earnDeductCode is between 001-499.",
            "format": "double"
          },
          "benefitAmount": {
            "type": "number",
            "description": "The total benefit amount for the entry. This is only used if the earnDeductCode is between 500-999.",
            "format": "double"
          },
          "deductionAmount": {
            "type": "number",
            "description": "The total deduction amount for the entry. This is only used if the earnDeductCode is between 500-999.",
            "format": "double"
          },
          "glType": {
            "$ref": "#/components/schemas/GlOption"
          },
          "glGroup": {
            "maxLength": 4,
            "minLength": 0,
            "type": "string",
            "description": "The GL group for the worked time. This is required when parameter glType is 'g'.\n\nMust be a valid GL group. 'List GL Groups' will return the valid GL Groups.",
            "nullable": true
          },
          "glAccount": {
            "maxLength": 60,
            "minLength": 0,
            "type": "string",
            "description": "\"The GL account for the worked time. This is required when parameter glType is 'a'.\n\nMust be a valid account. 'List GL Accounts' will return the valid accounts for each segment. A combination of segments can be used to create the valid account.",
            "nullable": true
          },
          "glBenefitGroup": {
            "maxLength": 4,
            "minLength": 0,
            "pattern": "[0-9]*",
            "type": "string",
            "description": "The GL group for the worked time. This is required when parameter glType is 'g'.\n\nMust be a valid GL group. 'List GL Groups' will return the valid GL Groups.",
            "nullable": true
          },
          "wcbOverrideCode": {
            "maxLength": 3,
            "minLength": 3,
            "pattern": "[0-9]*",
            "type": "string",
            "description": "The ID of the WCB Group. If left blank, the time will apply to the WCB group selected on the employee's profile.\n\nMust be a valid WCB group. 'List WCB Groups' will return a list of all the valid groups.",
            "nullable": true
          },
          "attendanceCode": {
            "maxLength": 9,
            "minLength": 0,
            "type": "string",
            "description": "The attendance code for the worked time.\n\nMust be a valid attendance code. 'Get Attendance Codes' will return the valid codes.",
            "nullable": true
          },
          "attendanceReason": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string",
            "description": "Up to 1024 alphanumeric characters that will populate the comments on the payroll data entry.",
            "nullable": true
          },
          "taskId": {
            "maxLength": 9,
            "minLength": 0,
            "type": "string",
            "description": "The ID of the task for the time worked.\n\nFor a list of tasks set up in the company, use the 'Get TaskIds' endpoint.",
            "nullable": true
          },
          "locationCode": {
            "type": "string",
            "description": "The location code for the worked time.\n\nMust be a valid location code. 'List Locations' will return the valid codes.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PayrollDataImport": {
        "required": [
          "payrollData"
        ],
        "type": "object",
        "properties": {
          "batchDescription": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string",
            "description": "An alphanumeric description for the payroll batch, which can be up to 1024 characters. This is required when importToStagingTable is False.\n\nThis isn't used if importToStagingTable is True.",
            "nullable": true
          },
          "batchCompleted": {
            "type": "boolean",
            "description": "Enter True if the batch is complete. Default is False. This isn't used when importToStagingTable is True."
          },
          "payrollData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayrollData"
            }
          },
          "stopImportOnAnyError": {
            "type": "boolean",
            "description": "If True, no entries will import if one of the entries is invalid. Default is False."
          },
          "importToStagingTable": {
            "type": "boolean",
            "description": "If True, payroll data will import into a staging table. If False, a new batch is created each time the endpoint is used. Default is False."
          }
        },
        "additionalProperties": false
      },
      "WorkTechEmpEntlExport": {
        "required": [
          "earnDeductCode",
          "empNo",
          "leaveAccrUnit",
          "leaveTaknUnit"
        ],
        "type": "object",
        "properties": {
          "empNo": {
            "maxLength": 9,
            "minLength": 0,
            "type": "string"
          },
          "earnDeductCode": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string"
          },
          "leaveAccrUnit": {
            "maximum": 99999999999.99,
            "minimum": 0,
            "type": "number",
            "format": "double"
          },
          "leaveTaknUnit": {
            "maximum": 99999999999.99,
            "minimum": 0,
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "WorkTechEmpExport": {
        "required": [
          "birthDate",
          "empNo",
          "givenName",
          "lastHireDate",
          "surname"
        ],
        "type": "object",
        "properties": {
          "empNo": {
            "maxLength": 9,
            "minLength": 0,
            "type": "string"
          },
          "surname": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string"
          },
          "givenName": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string"
          },
          "initial": {
            "maxLength": 1,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "address1": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "address2": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "city": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "province": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "country": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "postal": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "phoneType1": {
            "maxLength": 15,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "phoneNumber1": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "phoneType2": {
            "maxLength": 15,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "phoneNumber2": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "phoneType3": {
            "maxLength": 15,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "phoneNumber3": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "phoneType4": {
            "maxLength": 15,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "phoneNumber4": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "birthDate": {
            "type": "string",
            "format": "date-time"
          },
          "lastHireDate": {
            "type": "string",
            "format": "date-time"
          },
          "active": {
            "type": "boolean"
          },
          "class": {
            "type": "integer",
            "format": "int32"
          },
          "payGrp": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "hoursPerDay": {
            "maximum": 999999.999,
            "minimum": 0,
            "type": "number",
            "format": "double"
          },
          "hoursPerPeriod": {
            "maximum": 999999.999,
            "minimum": 0,
            "type": "number",
            "format": "double"
          },
          "locn": {
            "maxLength": 4,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "jobStatus": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "employStatus": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "unionCode": {
            "maxLength": 6,
            "minLength": 0,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WorkTechEmpPosExport": {
        "required": [
          "active",
          "empNo",
          "position",
          "positionDesc",
          "primaryPosition"
        ],
        "type": "object",
        "properties": {
          "empNo": {
            "maxLength": 9,
            "minLength": 0,
            "type": "string"
          },
          "position": {
            "maxLength": 12,
            "minLength": 0,
            "type": "string"
          },
          "positionDesc": {
            "maxLength": 60,
            "minLength": 0,
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "effectiveDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "expiryDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "primaryPosition": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "TimeEntryTemplateFieldValidation": {
        "type": "object",
        "properties": {
          "validation": {
            "type": "string",
            "nullable": true
          },
          "validationMessage": {
            "type": "string",
            "nullable": true
          },
          "validationMessageFr": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TimeEntryUpdateResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "prompts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "errorPrompts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "promptHeading": {
            "type": "string",
            "nullable": true
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeEntryUpdateResult"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TimeEntryUpdateResult": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "added": {
            "type": "integer",
            "format": "int32"
          },
          "successes": {
            "type": "integer",
            "format": "int32"
          },
          "failures": {
            "type": "integer",
            "format": "int32"
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          },
          "timeEntryViewModel": {
            "$ref": "#/components/schemas/TimeEntryViewModel"
          },
          "isNew": {
            "type": "boolean"
          },
          "validation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeEntryValidationError"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "TimeEntryValidationError": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TimeEntryViewModel": {
        "type": "object",
        "properties": {
          "viewId": {
            "type": "string",
            "nullable": true
          },
          "templateId": {
            "type": "string",
            "nullable": true
          },
          "timeEntries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeEntry"
            },
            "nullable": true
          },
          "entryIndex": {
            "type": "integer",
            "format": "int32"
          },
          "allowApprove": {
            "type": "boolean",
            "readOnly": true
          },
          "allowReject": {
            "type": "boolean",
            "readOnly": true
          },
          "allowUnreject": {
            "type": "boolean",
            "readOnly": true
          },
          "allowWithdraw": {
            "type": "boolean",
            "readOnly": true
          },
          "allowUnapprove": {
            "type": "boolean",
            "readOnly": true
          },
          "allowCancel": {
            "type": "boolean",
            "readOnly": true
          },
          "allowUncancel": {
            "type": "boolean",
            "readOnly": true
          },
          "allowDelete": {
            "type": "boolean",
            "readOnly": true
          },
          "readOnly": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "EmployeeAdditionalInfo": {
        "type": "object",
        "properties": {
          "empNo": {
            "type": "string",
            "description": "The employee number assigned to the employee.",
            "nullable": true
          },
          "dedFig": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeductionFigure"
            },
            "description": "The text portion corresponds to the figureFieldLabels and the value is the employees information for the figure field. ",
            "nullable": true
          },
          "otherDate": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OtherDate"
            },
            "description": "The text portion corresponds to the dateFieldLabels and the value is the employees information for the date field. ",
            "nullable": true
          },
          "otherText": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OtherText"
            },
            "description": "The text portion corresponds to the textFieldLabels and the value is the employees information for the text field. ",
            "nullable": true
          },
          "textFieldLabels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextValuePair"
            },
            "description": "Returns the display label with the associated value.\n\nThe value only returns the numeric portion, so the if the text field is T19, this returns 19.",
            "nullable": true
          },
          "dateFieldLabels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextValuePair"
            },
            "description": "Returns the date label with the value of the the date field. The value only returns the numeric portion, so the if the date is M15, this returns 15.",
            "nullable": true
          },
          "figureFieldLabels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextValuePair"
            },
            "description": "Returns the figure label with the value of the the figure field. The value only returns the numeric portion, so the if the figure ID is M30, 30 returns.",
            "nullable": true
          },
          "otherTextDisplay": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OtherText"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EmployeeAdditionalInfoSetupResponse": {
        "type": "object",
        "properties": {
          "disabledDedFiguresForEmployees": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Returns the figures that employees can't update. \n\nThis only returns the numeric portion, so the if the figure is M30, this returns 30. ",
            "nullable": true
          },
          "disabledOtherTextsForEmployees": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Returns the other text information that employees can't update. \n\nThis only returns the numeric portion, so the if the text field is T19, this returns 19.",
            "nullable": true
          },
          "disabledOtherDatesForEmployees": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Returns the dates that employees can't update. \n\nThis only returns the numeric portion, so the if the date is M15, this returns 15.",
            "nullable": true
          },
          "disabledDedFiguresForManagers": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Returns the figures that managers can't update for other employees. \nThis only returns the numeric portion, so the if the figure ID is M30, 30 returns. ",
            "nullable": true
          },
          "disabledOtherTextsForManagers": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Returns the other text information that managers can't update for other employees.\n\nThis only returns the numeric portion, so the if the text field is T19, this returns 19.",
            "nullable": true
          },
          "disabledOtherDatesForManagers": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Returns the dates that managers can't update for other employees. \nThis only returns the numeric portion, so the if the date is M15, this returns 15.",
            "nullable": true
          },
          "disabledDedFiguresForManagerSelf": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Returns the figures that managers can't update for their employee. \nThis only returns the numeric portion, so the if the figure ID is M30, 30 returns. ",
            "nullable": true
          },
          "disabledOtherTextsForManagerSelf": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Returns the other text information that managers can't update for their employee.\n\nThis only returns the numeric portion, so the if the text field is T19, this returns 19.",
            "nullable": true
          },
          "disabledOtherDatesForManagerSelf": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Returns the dates that managers can't update for their employee. \n\nThis only returns the numeric portion, so the if the date is M15, this returns 15.",
            "nullable": true
          },
          "textFieldData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StringTextValuePairListKeyValuePair"
            },
            "description": "The key indicates is the text field ID. The text returns the description that appears in the dropdown, the value is the the ID. ",
            "nullable": true
          },
          "textFieldLabels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextValuePair"
            },
            "description": "Returns the display label with the associated value. \n\nThe value only returns the numeric portion, so the if the text field is T19, this returns 19.",
            "nullable": true
          },
          "dateFieldLabels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextValuePair"
            },
            "description": "Returns the date label with the value of the the date field. \nThe value only returns the numeric portion, so the if the date is M15, this returns 15.",
            "nullable": true
          },
          "figureFieldLabels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextValuePair"
            },
            "description": "Returns the figure label with the value of the the figure field. \nThe value only returns the numeric portion, so the if the figure ID is M30, 30 returns. ",
            "nullable": true
          },
          "textFieldTypes": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "ScheduleEntryRequest": {
        "required": [
          "employeeNumber",
          "scheduleDate",
          "payCode"
        ],
        "type": "object",
        "properties": {
          "employeeNumber": {
            "maxLength": 9,
            "minLength": 0,
            "type": "string",
            "description": "The employee number assigned to the employee."
          },
          "scheduleDate": {
            "type": "string",
            "description": "The date the employee is scheduled worked in ISO 8601 format.",
            "format": "date-time"
          },
          "payCode": {
            "maxLength": 9,
            "minLength": 0,
            "type": "string",
            "description": "The pay code for the scheduled time.\nIt must be a valid pay code. 'List Pay Codes' will return the valid codes."
          },
          "fromTime": {
            "maximum": 1440,
            "minimum": 0,
            "type": "integer",
            "description": "The time the employee is scheduled to start work, in minutes since midnight. \nIf the pay code's entry type is From To Times, this is required. ",
            "format": "int32",
            "nullable": true
          },
          "toTime": {
            "maximum": 1440,
            "minimum": 0,
            "type": "integer",
            "description": "The time the employee is scheduled to end work, in minutes since midnight. \nIf you don't including amount and unitOfMeasure, this is required. ",
            "format": "int32",
            "nullable": true
          },
          "amount": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "number",
            "description": "The amount of time the employee is scheduled to work. This corresponds to the unitOfMeasure. \nThis is required if the pay code's entry type is Units and Unit Code. ",
            "format": "double",
            "nullable": true
          },
          "unitOfMeasure": {
            "type": "string",
            "description": "The unit of measure for the units indicated. D is in Days. H is in Hours. U is in Units. \nThis is required if the pay code's entry type is Units and Unit Code. ",
            "nullable": true
          },
          "shiftId": {
            "maxLength": 9,
            "minLength": 0,
            "type": "string",
            "description": "The ID of the scheduled shift. If left blank, premium rules and break rules will not apply to the time worked.\n\nMust be a valid shift ID. 'Get Shift Codes' will return a list of all the valid shifts.",
            "nullable": true
          },
          "locationCode": {
            "maxLength": 4,
            "minLength": 0,
            "type": "string",
            "description": "The location code for the scheduled time.\n\nIt must be a valid location code. 'List Locations' will return the valid codes.",
            "nullable": true
          },
          "positionCode": {
            "maxLength": 12,
            "minLength": 0,
            "type": "string",
            "description": "The ID of the position the employee is scheduled to work. If left blank, the employee's primary position is used for rates, if required.\n\nIf ‘Only allow defined Employee Positions in time data entry’ is selected on the Payroll Parameter's Time Data Entry tab, the position must be on the employee’s profile.",
            "nullable": true
          },
          "payPrimaryPosition": {
            "type": "boolean",
            "description": "If true, the employee is paid their primary position rate, regardless of the position on the schedule. \nIf left blank, this is false. ",
            "nullable": true
          },
          "attendanceCode": {
            "maxLength": 9,
            "minLength": 0,
            "type": "string",
            "description": "The attendance code for the scheduled time.\n\nMust be a valid attendance code. 'Get Attendance Codes' will return the valid codes.",
            "nullable": true
          },
          "comment": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string",
            "description": "Up to 1024 alphanumeric characters populates the schedule entry comments.",
            "nullable": true
          },
          "taskId": {
            "maxLength": 9,
            "minLength": 0,
            "type": "string",
            "description": "The ID of the task for the schedule.\n\nFor a list of tasks set up in the company, use the 'Get Task Ids' endpoint.",
            "nullable": true
          },
          "referenceNumber": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "description": "This ensures the same schedule is not accidentally added twice.\nIf replaceExisting is True, added schedules with a duplicate reference number won't be added. \nIf replaceExisting is False, added schedules with a duplicate reference number replace the existing schedule. ",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DependentsSettings": {
        "type": "object",
        "properties": {
          "hiddenFields": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "showSinOnEmployeeDependents": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EmergencyContactSettings": {
        "type": "object",
        "properties": {
          "managerReadOnly": {
            "type": "boolean"
          },
          "managerReadOnlySelf": {
            "type": "boolean"
          },
          "employeeReadOnly": {
            "type": "boolean"
          },
          "hiddenFields": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "emergencyContactFieldDisplayName": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EmployeePersonalInfo": {
        "type": "object",
        "properties": {
          "empNo": {
            "type": "string",
            "nullable": true
          },
          "givenName": {
            "type": "string",
            "nullable": true
          },
          "surname": {
            "type": "string",
            "nullable": true
          },
          "initial": {
            "type": "string",
            "nullable": true
          },
          "address1": {
            "type": "string",
            "nullable": true
          },
          "address2": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "province": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "postal": {
            "type": "string",
            "nullable": true
          },
          "birthDate": {
            "type": "string",
            "format": "date-time"
          },
          "firstLanguage": {
            "type": "string"
          },
          "gender": {
            "type": "string"
          },
          "phoneType1": {
            "type": "integer",
            "format": "int32"
          },
          "phoneNumber1": {
            "type": "string",
            "nullable": true
          },
          "phoneType2": {
            "type": "integer",
            "format": "int32"
          },
          "phoneNumber2": {
            "type": "string",
            "nullable": true
          },
          "phoneType3": {
            "type": "integer",
            "format": "int32"
          },
          "phoneNumber3": {
            "type": "string",
            "nullable": true
          },
          "phoneType4": {
            "type": "integer",
            "format": "int32"
          },
          "phoneNumber4": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "emailType1": {
            "type": "integer",
            "format": "int32"
          },
          "email1": {
            "type": "string",
            "nullable": true
          },
          "emailType2": {
            "type": "integer",
            "format": "int32"
          },
          "email2": {
            "type": "string",
            "nullable": true
          },
          "emailType3": {
            "type": "integer",
            "format": "int32"
          },
          "email3": {
            "type": "string",
            "nullable": true
          },
          "emailType4": {
            "type": "integer",
            "format": "int32"
          },
          "email4": {
            "type": "string",
            "nullable": true
          },
          "emailType5": {
            "type": "integer",
            "format": "int32"
          },
          "email5": {
            "type": "string",
            "nullable": true
          },
          "preferredName": {
            "type": "string",
            "nullable": true
          },
          "previousSurname": {
            "type": "string",
            "nullable": true
          },
          "marital": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Posting": {
        "type": "object",
        "properties": {
          "poolEntryId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "entrySourceType": null,
          "poolOption": {
            "$ref": "#/components/schemas/PoolOption"
          },
          "expiryDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "poolUntilDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "pickupPayCode": {
            "type": "string",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "nullable": true
          },
          "isCancelled": {
            "type": "boolean"
          },
          "isApproved": {
            "type": "boolean"
          },
          "approvedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "approvedBy": {
            "type": "string",
            "nullable": true
          },
          "pickupEntryId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "approvalLevel": {
            "type": "integer",
            "format": "int32"
          },
          "groupingCount": {
            "type": "integer",
            "format": "int32"
          },
          "pickupRequestedCount": {
            "type": "integer",
            "format": "int32"
          },
          "selectedEntries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScheduleEntry"
            },
            "nullable": true
          },
          "currentUserRequestedPickupId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "commentCount": {
            "type": "integer",
            "format": "int32"
          },
          "scheduleStart": {
            "type": "string",
            "format": "date-time"
          },
          "scheduleEnd": {
            "type": "string",
            "format": "date-time"
          },
          "isAllDay": {
            "type": "boolean"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "cancelledDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "cancelledBy": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/PostType"
          },
          "pickupRequestedEmpNos": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "showEmpOption": {
            "$ref": "#/components/schemas/ShowEmpOption"
          }
        },
        "additionalProperties": false
      },
      "ScheduleEntry": {
        "type": "object",
        "properties": {
          "entrySourceType": null,
          "scheduleEntryId": {
            "type": "integer",
            "format": "int32"
          },
          "scheduleId": {
            "type": "integer",
            "format": "int32"
          },
          "scheduleDate": {
            "type": "string",
            "format": "date-time"
          },
          "fromTime": {
            "type": "integer",
            "format": "int32"
          },
          "toTime": {
            "type": "integer",
            "format": "int32"
          },
          "units": {
            "type": "number",
            "format": "double"
          },
          "unitCode": {
            "type": "string",
            "nullable": true
          },
          "empNo": {
            "type": "string",
            "nullable": true
          },
          "employeeName": {
            "type": "string",
            "nullable": true
          },
          "payCode": {
            "type": "string",
            "nullable": true
          },
          "useUnits": {
            "type": "boolean"
          },
          "positionCode": {
            "type": "string",
            "nullable": true
          },
          "positionName": {
            "type": "string",
            "nullable": true
          },
          "locationCode": {
            "type": "string",
            "nullable": true
          },
          "locationName": {
            "type": "string",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "nullable": true
          },
          "shiftId": {
            "type": "string",
            "nullable": true
          },
          "shiftDescription": {
            "type": "string",
            "nullable": true
          },
          "hasModifiedTimeCard": {
            "type": "boolean"
          },
          "hasApprovedTimeCard": {
            "type": "boolean"
          },
          "isCancelled": {
            "type": "boolean"
          },
          "allowPooling": {
            "type": "boolean"
          },
          "approvedLevel": {
            "type": "integer",
            "format": "int32"
          },
          "poolPickupRuleId": {
            "type": "string",
            "nullable": true
          },
          "existingPoolEntryId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "existingPoolEntryIsCancelled": {
            "type": "boolean"
          },
          "assignedToEmp": {
            "type": "boolean"
          },
          "showEmpOption": {
            "type": "boolean"
          },
          "conflictCode": {
            "$ref": "#/components/schemas/ScheduleEntryConflictCode"
          },
          "assignmentComment": {
            "type": "string",
            "nullable": true
          },
          "conflictLevel": {
            "$ref": "#/components/schemas/ShiftConflictLevel"
          },
          "poolingEntrySourceType": {
            "$ref": "#/components/schemas/PoolingEntrySourceType"
          },
          "assignedToEmpno": {
            "type": "string",
            "nullable": true
          },
          "assignedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "assignedBy": {
            "type": "string",
            "nullable": true
          },
          "defaultEmpno": {
            "type": "string",
            "nullable": true
          },
          "defaultEmployeeName": {
            "type": "string",
            "nullable": true
          },
          "assignedToScheduleEntryId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "attendanceCode": {
            "type": "string",
            "nullable": true
          },
          "payCodeDescription": {
            "type": "string",
            "nullable": true
          },
          "positionNameFr": {
            "type": "string",
            "nullable": true
          },
          "locationNameFr": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ScheduleEntryConflictCode": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11
        ],
        "type": "integer",
        "format": "int32"
      },
      "ShiftConflictLevel": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "WorkTechExportStatus": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "WorkTechImportStatus": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "PostAction": {
        "required": [
          "poolEntryId"
        ],
        "type": "object",
        "properties": {
          "poolEntryId": {
            "type": "integer",
            "format": "int32"
          },
          "comment": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BasicPoolFilter": {
        "type": "object",
        "properties": {
          "positions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextValuePair"
            },
            "nullable": true
          },
          "locations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextValuePair"
            },
            "nullable": true
          },
          "payCodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextValuePair"
            },
            "nullable": true
          },
          "shifts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextValuePair"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PostStatus": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "SavedFilter": {
        "required": [
          "filter",
          "key",
          "name",
          "programName",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "programName": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/SavedFilterType"
          },
          "filter": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "SavedFilterType": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "format": "int32"
      },
      "AvailableEmployee": {
        "type": "object",
        "properties": {
          "available": {
            "type": "boolean"
          },
          "empNo": {
            "type": "string",
            "nullable": true
          },
          "employeeName": {
            "type": "string",
            "nullable": true
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "givenName": {
            "type": "string",
            "nullable": true
          },
          "surname": {
            "type": "string",
            "nullable": true
          },
          "intial": {
            "type": "string",
            "nullable": true
          },
          "preferredName": {
            "type": "string",
            "nullable": true
          },
          "positionName": {
            "type": "string",
            "nullable": true
          },
          "positionCode": {
            "type": "string",
            "nullable": true
          },
          "availableComment": {
            "type": "string",
            "nullable": true
          },
          "conflictLevel": {
            "$ref": "#/components/schemas/ShiftConflictLevel"
          },
          "seniorityDate": {
            "type": "string",
            "format": "date-time"
          },
          "ltdHours": {
            "type": "number",
            "format": "double"
          },
          "periodHours": {
            "type": "number",
            "format": "double"
          },
          "accumServHrs": {
            "type": "number",
            "format": "double"
          },
          "jobStatus": {
            "type": "string",
            "nullable": true
          },
          "employStatus": {
            "type": "string",
            "nullable": true
          },
          "payGroup": {
            "type": "string",
            "nullable": true
          },
          "location": {
            "type": "string",
            "nullable": true
          },
          "unionCode": {
            "type": "string",
            "nullable": true
          },
          "schedStartDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "schedEndDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "terminationDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "offered": {
            "type": "number",
            "format": "double"
          },
          "declined": {
            "type": "number",
            "format": "double"
          },
          "employeeWorkGroupId": {
            "type": "string",
            "nullable": true
          },
          "scheduleId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "otherDate1": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "otherDate2": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "otherDate3": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "otherDate4": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "otherDate5": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "otherDate6": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "otherDate7": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "otherDate8": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "otherDate9": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "otherDate10": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "otherDate11": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "otherDate12": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "otherDate13": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "otherDate14": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "otherDate15": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "otherDate16": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "otherDate17": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "otherDate18": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "otherDate19": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "otherDate20": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "pickupEntryId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "pickupOption": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "pickupCreatedDate": {
            "type": "string",
            "format": "date-time"
          },
          "isPoolEmpApproved": {
            "type": "integer",
            "format": "int32"
          },
          "poolUntilDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "exchangeOffer": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScheduleEntry"
            },
            "nullable": true
          },
          "photoRevision": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "dedFig1": {
            "type": "number",
            "format": "double"
          },
          "dedFig2": {
            "type": "number",
            "format": "double"
          },
          "dedFig3": {
            "type": "number",
            "format": "double"
          },
          "dedFig4": {
            "type": "number",
            "format": "double"
          },
          "dedFig5": {
            "type": "number",
            "format": "double"
          },
          "dedFig6": {
            "type": "number",
            "format": "double"
          },
          "dedFig7": {
            "type": "number",
            "format": "double"
          },
          "dedFig8": {
            "type": "number",
            "format": "double"
          },
          "dedFig9": {
            "type": "number",
            "format": "double"
          },
          "dedFig10": {
            "type": "number",
            "format": "double"
          },
          "dedFig11": {
            "type": "number",
            "format": "double"
          },
          "dedFig12": {
            "type": "number",
            "format": "double"
          },
          "dedFig13": {
            "type": "number",
            "format": "double"
          },
          "dedFig14": {
            "type": "number",
            "format": "double"
          },
          "dedFig15": {
            "type": "number",
            "format": "double"
          },
          "otherText1": {
            "type": "string",
            "nullable": true
          },
          "otherText2": {
            "type": "string",
            "nullable": true
          },
          "otherText3": {
            "type": "string",
            "nullable": true
          },
          "otherText4": {
            "type": "string",
            "nullable": true
          },
          "otherText5": {
            "type": "string",
            "nullable": true
          },
          "otherText6": {
            "type": "string",
            "nullable": true
          },
          "otherText7": {
            "type": "string",
            "nullable": true
          },
          "otherText8": {
            "type": "string",
            "nullable": true
          },
          "otherText9": {
            "type": "string",
            "nullable": true
          },
          "otherText10": {
            "type": "string",
            "nullable": true
          },
          "otherText11": {
            "type": "string",
            "nullable": true
          },
          "otherText12": {
            "type": "string",
            "nullable": true
          },
          "otherText13": {
            "type": "string",
            "nullable": true
          },
          "otherText14": {
            "type": "string",
            "nullable": true
          },
          "otherText15": {
            "type": "string",
            "nullable": true
          },
          "otherText16": {
            "type": "string",
            "nullable": true
          },
          "otherText17": {
            "type": "string",
            "nullable": true
          },
          "otherText18": {
            "type": "string",
            "nullable": true
          },
          "otherText19": {
            "type": "string",
            "nullable": true
          },
          "otherText20": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ClientBillingDetail": {
        "type": "object",
        "properties": {
          "employeeName": {
            "type": "string",
            "nullable": true
          },
          "empNo": {
            "type": "string",
            "nullable": true
          },
          "payGroup": {
            "type": "string",
            "nullable": true
          },
          "employeeBillingStatus": {
            "type": "string",
            "nullable": true
          },
          "employeeLastHireDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "ClientBillingSummary": {
        "type": "object",
        "properties": {
          "billingId": {
            "type": "integer",
            "format": "int32"
          },
          "billingDate": {
            "type": "string",
            "nullable": true
          },
          "invoicedEmployees": {
            "type": "integer",
            "format": "int32"
          },
          "changeInEmployees": {
            "type": "string",
            "nullable": true
          },
          "minimumEmployees": {
            "type": "integer",
            "format": "int32"
          },
          "useMinimumEmployees": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EditPosting": {
        "type": "object",
        "properties": {
          "poolEntryId": {
            "type": "integer",
            "format": "int32"
          },
          "poolUntilDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "expiryDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "pickupPayCode": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EmployeeDocument": {
        "required": [
          "empNo",
          "description",
          "fileData"
        ],
        "type": "object",
        "properties": {
          "empNo": {
            "type": "string",
            "description": "The employee number for the employee document was added to. "
          },
          "description": {
            "type": "string",
            "description": "The description of the employee's document."
          },
          "typeId": {
            "type": "integer",
            "description": "The ID of the document type.",
            "format": "int32"
          },
          "summary": {
            "type": "string",
            "description": "The document's summary. ",
            "nullable": true
          },
          "fileData": {
            "type": "string",
            "description": "The document's binary data.",
            "format": "binary"
          },
          "documentRevision": {
            "type": "integer",
            "description": "The document's revision number. ",
            "format": "int32"
          },
          "documentId": {
            "type": "integer",
            "format": "int32"
          },
          "allowModify": {
            "type": "boolean"
          },
          "allowInsert": {
            "type": "boolean"
          },
          "allowDelete": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EmployeeFilter": {
        "type": "object",
        "properties": {
          "skip": {
            "type": "integer",
            "format": "int32"
          },
          "take": {
            "type": "integer",
            "format": "int32"
          },
          "empNoReference": {
            "type": "string",
            "nullable": true
          },
          "search": {
            "type": "string",
            "nullable": true
          },
          "total": {
            "type": "boolean"
          },
          "active": {
            "$ref": "#/components/schemas/ActiveStatus"
          },
          "sortOrder": {
            "$ref": "#/components/schemas/EmployeeSortOrder"
          },
          "sortDirection": {
            "$ref": "#/components/schemas/SortDirection"
          },
          "takeOption": {
            "$ref": "#/components/schemas/TakeOption"
          },
          "locations": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "employmentStatus": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "positions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "sortDefinitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SortDefinition"
            },
            "nullable": true
          },
          "givenName": {
            "type": "string",
            "nullable": true
          },
          "surname": {
            "type": "string",
            "nullable": true
          },
          "preferredName": {
            "type": "string",
            "nullable": true
          },
          "empNoFilter": {
            "type": "string",
            "nullable": true
          },
          "primaryPositionCode": {
            "type": "string",
            "nullable": true
          },
          "primaryPositionDesc": {
            "type": "string",
            "nullable": true
          },
          "payGroupCode": {
            "type": "string",
            "nullable": true
          },
          "payGroupDesc": {
            "type": "string",
            "nullable": true
          },
          "locationCode": {
            "type": "string",
            "nullable": true
          },
          "locationDesc": {
            "type": "string",
            "nullable": true
          },
          "employStatusCode": {
            "type": "string",
            "nullable": true
          },
          "employStatusDesc": {
            "type": "string",
            "nullable": true
          },
          "jobStatusCode": {
            "type": "string",
            "nullable": true
          },
          "jobStatusDesc": {
            "type": "string",
            "nullable": true
          },
          "fromFte": {
            "type": "number",
            "format": "double"
          },
          "toFte": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "EmployeeUserVariables": {
        "required": [
          "effectiveDate",
          "empNo",
          "variable"
        ],
        "type": "object",
        "properties": {
          "empNo": {
            "type": "string"
          },
          "variable": {
            "type": "string"
          },
          "effectiveDate": {
            "type": "string",
            "format": "date-time"
          },
          "expiryDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "comment": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "value": {
            "maximum": 99999999.99999,
            "minimum": -99999999.99999,
            "type": "number",
            "format": "double"
          },
          "active": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EmployeeUserVariablesSortOrder": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "EntrySource": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10
        ],
        "type": "integer",
        "format": "int32"
      },
      "PoolingEntrySourceType": {
        "enum": [
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "PostHistory": {
        "type": "object",
        "properties": {
          "poolEntryId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "entrySourceType": {
            "$ref": "#/components/schemas/PoolingEntrySourceType"
          },
          "poolOption": {
            "$ref": "#/components/schemas/PoolOption"
          },
          "expiryDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "poolUntilDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "pickupPayCode": {
            "type": "string",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "nullable": true
          },
          "isCancelled": {
            "type": "boolean"
          },
          "cancelledDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "cancelledBy": {
            "type": "string",
            "nullable": true
          },
          "isApproved": {
            "type": "boolean"
          },
          "approvedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "approvedBy": {
            "type": "string",
            "nullable": true
          },
          "pickupEntryId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "approvalLevel": {
            "type": "integer",
            "format": "int32"
          },
          "groupingCount": {
            "type": "integer",
            "format": "int32"
          },
          "pickupRequestedCount": {
            "type": "integer",
            "format": "int32"
          },
          "currentUserRequestedPickupId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "commentCount": {
            "type": "integer",
            "format": "int32"
          },
          "selectedEntries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScheduleEntry"
            },
            "nullable": true
          },
          "scheduleStart": {
            "type": "string",
            "format": "date-time"
          },
          "scheduleEnd": {
            "type": "string",
            "format": "date-time"
          },
          "isAllDay": {
            "type": "boolean"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/PostType"
          },
          "status": {
            "$ref": "#/components/schemas/PostStatus"
          },
          "pickupApprovedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "newOwnerName": {
            "type": "string",
            "nullable": true
          },
          "lastActionedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "pickupRequestedEmpNos": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "showEmpOption": {
            "$ref": "#/components/schemas/ShowEmpOption"
          }
        },
        "additionalProperties": false
      },
      "PostType": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "ReassignViewModel": {
        "type": "object",
        "properties": {
          "selectedEmployee": {
            "type": "string",
            "nullable": true
          },
          "reAssignedPayCode": {
            "type": "string",
            "nullable": true
          },
          "reAssignedShift": {
            "type": "string",
            "nullable": true
          },
          "reAssignedAttendanceCode": {
            "type": "string",
            "nullable": true
          },
          "reAssignedComment": {
            "type": "string",
            "nullable": true
          },
          "assignedToPayCode": {
            "type": "string",
            "nullable": true
          },
          "assignedToShift": {
            "type": "string",
            "nullable": true
          },
          "assignedToAttendanceCode": {
            "type": "string",
            "nullable": true
          },
          "assignedToComment": {
            "type": "string",
            "nullable": true
          },
          "reAssignedDeleted": {
            "type": "boolean"
          },
          "pickupEntryId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "reAssignedCancelled": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EmployeeDetail": {
        "type": "object",
        "properties": {
          "empNo": {
            "type": "string",
            "nullable": true
          },
          "givenName": {
            "type": "string",
            "nullable": true
          },
          "surname": {
            "type": "string",
            "nullable": true
          },
          "preferredName": {
            "type": "string",
            "nullable": true
          },
          "initial": {
            "type": "string",
            "nullable": true
          },
          "primaryPositionCode": {
            "type": "string",
            "nullable": true
          },
          "positionName": {
            "type": "string",
            "nullable": true
          },
          "positionNameFr": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExchangeViewModel": {
        "type": "object",
        "properties": {
          "exchangedFromEmployee": {
            "type": "string",
            "nullable": true
          },
          "exchangedFromPayCode": {
            "type": "string",
            "nullable": true
          },
          "exchangedFromShift": {
            "type": "string",
            "nullable": true
          },
          "exchangedFromAttendanceCode": {
            "type": "string",
            "nullable": true
          },
          "exchangedFromComment": {
            "type": "string",
            "nullable": true
          },
          "deleteExchangedFromEntry": {
            "type": "boolean"
          },
          "cancelledExchangedFromAttendance": {
            "type": "string",
            "nullable": true
          },
          "cancelledExchangedFromComments": {
            "type": "string",
            "nullable": true
          },
          "exchangedWithEmployee": {
            "type": "string",
            "nullable": true
          },
          "exchangedWithPayCode": {
            "type": "string",
            "nullable": true
          },
          "exchangedWithShift": {
            "type": "string",
            "nullable": true
          },
          "exchangedWithAttendanceCode": {
            "type": "string",
            "nullable": true
          },
          "exchangedWithComment": {
            "type": "string",
            "nullable": true
          },
          "deleteExchangedWithEntry": {
            "type": "boolean"
          },
          "cancelledExchangedWithAttendance": {
            "type": "string",
            "nullable": true
          },
          "cancelledExchangedWithComments": {
            "type": "string",
            "nullable": true
          },
          "pickupEntryId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "cancelledExchangedFromPayCode": {
            "type": "string",
            "nullable": true
          },
          "cancelledExchangedWithPayCode": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EmployeeInfoDetails": {
        "type": "object",
        "properties": {
          "photoRevision": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "nullable": true
          },
          "givenName": {
            "type": "string",
            "nullable": true
          },
          "surname": {
            "type": "string",
            "nullable": true
          },
          "initial": {
            "type": "string",
            "nullable": true
          },
          "preferredName": {
            "type": "string",
            "nullable": true
          },
          "address1": {
            "type": "string",
            "nullable": true
          },
          "address2": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "province": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "postal": {
            "type": "string",
            "nullable": true
          },
          "birthDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "seniorityDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "firstLanguage": {
            "type": "string"
          },
          "gender": {
            "type": "string",
            "nullable": true
          },
          "marital": {
            "type": "string"
          },
          "sin": {
            "type": "string",
            "nullable": true
          },
          "previousSurname": {
            "type": "string",
            "nullable": true
          },
          "sinExpiryDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "temporarySin": {
            "type": "boolean"
          },
          "phoneType1": {
            "type": "integer",
            "format": "int32"
          },
          "phoneNumber1": {
            "type": "string",
            "nullable": true
          },
          "phoneType2": {
            "type": "integer",
            "format": "int32"
          },
          "phoneNumber2": {
            "type": "string",
            "nullable": true
          },
          "phoneType3": {
            "type": "integer",
            "format": "int32"
          },
          "phoneNumber3": {
            "type": "string",
            "nullable": true
          },
          "phoneType4": {
            "type": "integer",
            "format": "int32"
          },
          "phoneNumber4": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "emailType1": {
            "type": "integer",
            "format": "int32"
          },
          "email1": {
            "type": "string",
            "nullable": true
          },
          "emailType2": {
            "type": "integer",
            "format": "int32"
          },
          "email2": {
            "type": "string",
            "nullable": true
          },
          "emailType3": {
            "type": "integer",
            "format": "int32"
          },
          "email3": {
            "type": "string",
            "nullable": true
          },
          "emailType4": {
            "type": "integer",
            "format": "int32"
          },
          "email4": {
            "type": "string",
            "nullable": true
          },
          "emailType5": {
            "type": "integer",
            "format": "int32"
          },
          "email5": {
            "type": "string",
            "nullable": true
          },
          "otherText1": {
            "type": "string",
            "nullable": true
          },
          "otherText2": {
            "type": "string",
            "nullable": true
          },
          "otherText3": {
            "type": "string",
            "nullable": true
          },
          "otherText4": {
            "type": "string",
            "nullable": true
          },
          "otherText5": {
            "type": "string",
            "nullable": true
          },
          "otherText6": {
            "type": "string",
            "nullable": true
          },
          "otherText7": {
            "type": "string",
            "nullable": true
          },
          "otherText8": {
            "type": "string",
            "nullable": true
          },
          "otherText9": {
            "type": "string",
            "nullable": true
          },
          "otherText10": {
            "type": "string",
            "nullable": true
          },
          "otherText11": {
            "type": "string",
            "nullable": true
          },
          "otherText12": {
            "type": "string",
            "nullable": true
          },
          "otherText13": {
            "type": "string",
            "nullable": true
          },
          "otherText14": {
            "type": "string",
            "nullable": true
          },
          "otherText15": {
            "type": "string",
            "nullable": true
          },
          "otherText16": {
            "type": "string",
            "nullable": true
          },
          "otherText17": {
            "type": "string",
            "nullable": true
          },
          "otherText18": {
            "type": "string",
            "nullable": true
          },
          "otherText19": {
            "type": "string",
            "nullable": true
          },
          "otherText20": {
            "type": "string",
            "nullable": true
          },
          "dedFig1": {
            "type": "number",
            "format": "double"
          },
          "dedFig2": {
            "type": "number",
            "format": "double"
          },
          "dedFig3": {
            "type": "number",
            "format": "double"
          },
          "dedFig4": {
            "type": "number",
            "format": "double"
          },
          "dedFig5": {
            "type": "number",
            "format": "double"
          },
          "dedFig6": {
            "type": "number",
            "format": "double"
          },
          "dedFig7": {
            "type": "number",
            "format": "double"
          },
          "dedFig8": {
            "type": "number",
            "format": "double"
          },
          "dedFig9": {
            "type": "number",
            "format": "double"
          },
          "dedFig10": {
            "type": "number",
            "format": "double"
          },
          "dedFig11": {
            "type": "number",
            "format": "double"
          },
          "dedFig12": {
            "type": "number",
            "format": "double"
          },
          "dedFig13": {
            "type": "number",
            "format": "double"
          },
          "dedFig14": {
            "type": "number",
            "format": "double"
          },
          "dedFig15": {
            "type": "number",
            "format": "double"
          },
          "otherDate1": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "otherDate2": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "otherDate3": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "otherDate4": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "otherDate5": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "otherDate6": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "otherDate7": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "otherDate8": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "otherDate9": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "otherDate10": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "otherDate11": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "otherDate12": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "initialHireDate": {
            "type": "string",
            "format": "date-time"
          },
          "accumServHrs": {
            "type": "number",
            "format": "double"
          },
          "vacDate": {
            "type": "string",
            "format": "date-time"
          },
          "empNo": {
            "type": "string",
            "nullable": true
          },
          "position": {
            "type": "string",
            "nullable": true
          },
          "positionName": {
            "type": "string",
            "nullable": true
          },
          "positionNameFr": {
            "type": "string",
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "nullable": true
          },
          "webStatements": {
            "type": "boolean"
          },
          "payGroup": {
            "type": "string",
            "nullable": true
          },
          "location": {
            "type": "string",
            "nullable": true
          },
          "provinceEmployed": {
            "type": "string",
            "nullable": true
          },
          "fte": {
            "type": "number",
            "format": "double"
          },
          "wcbGroup": {
            "type": "string",
            "nullable": true
          },
          "vacGroup": {
            "type": "string",
            "nullable": true
          },
          "vacCode": {
            "type": "string",
            "nullable": true
          },
          "vacEarnCode": {
            "type": "string",
            "nullable": true
          },
          "unionCode": {
            "type": "string",
            "nullable": true
          },
          "glType": {
            "type": "string",
            "nullable": true
          },
          "glGroup": {
            "type": "string",
            "nullable": true
          },
          "earnGl": {
            "type": "string",
            "nullable": true
          },
          "workGroup": {
            "type": "string",
            "nullable": true
          },
          "jobStatus": {
            "type": "string",
            "nullable": true
          },
          "roleAssignmentPermissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleAssignmentPermission"
            },
            "nullable": true
          },
          "smoker": {
            "type": "string"
          },
          "lastHireDate": {
            "type": "string",
            "format": "date-time"
          },
          "prevVacEarn": {
            "type": "number",
            "format": "double"
          },
          "prevWcbEarn": {
            "type": "number",
            "format": "double"
          },
          "prevMiscEarnAccum1": {
            "type": "number",
            "format": "double"
          },
          "prevMiscEarnAccum2": {
            "type": "number",
            "format": "double"
          },
          "prevMiscEarnAccum3": {
            "type": "number",
            "format": "double"
          },
          "prevMiscEarnAccum4": {
            "type": "number",
            "format": "double"
          },
          "prevMiscEarnAccum5": {
            "type": "number",
            "format": "double"
          },
          "prevMiscEarnAccum6": {
            "type": "number",
            "format": "double"
          },
          "prevMiscEarnAccum7": {
            "type": "number",
            "format": "double"
          },
          "prevMiscEarnAccum8": {
            "type": "number",
            "format": "double"
          },
          "prevVacHrs": {
            "type": "number",
            "format": "double"
          },
          "prevWcbHrs": {
            "type": "number",
            "format": "double"
          },
          "prevWcbPremHrs": {
            "type": "number",
            "format": "double"
          },
          "prevMiscUnitsAccum1": {
            "type": "number",
            "format": "double"
          },
          "prevMiscUnitsAccum2": {
            "type": "number",
            "format": "double"
          },
          "prevMiscAccum16": {
            "type": "number",
            "format": "double"
          },
          "prevMiscAccum17": {
            "type": "number",
            "format": "double"
          },
          "prevMiscAccum18": {
            "type": "number",
            "format": "double"
          },
          "prevMiscAccum19": {
            "type": "number",
            "format": "double"
          },
          "prevMiscAccum20": {
            "type": "number",
            "format": "double"
          },
          "prevMiscAccum21": {
            "type": "number",
            "format": "double"
          },
          "prevMiscAccum22": {
            "type": "number",
            "format": "double"
          },
          "prevMiscAccum23": {
            "type": "number",
            "format": "double"
          },
          "prevMiscAccum24": {
            "type": "number",
            "format": "double"
          },
          "prevMiscAccum25": {
            "type": "number",
            "format": "double"
          },
          "prevMiscAccum26": {
            "type": "number",
            "format": "double"
          },
          "prevMiscAccum27": {
            "type": "number",
            "format": "double"
          },
          "prevMiscAccum28": {
            "type": "number",
            "format": "double"
          },
          "prevMiscAccum29": {
            "type": "number",
            "format": "double"
          },
          "prevMiscAccum30": {
            "type": "number",
            "format": "double"
          },
          "employeeNameFormat": {
            "type": "integer",
            "format": "int32"
          },
          "fullName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "unionName": {
            "type": "string",
            "nullable": true
          },
          "payGroupName": {
            "type": "string",
            "nullable": true
          },
          "locationName": {
            "type": "string",
            "nullable": true
          },
          "locationNameFr": {
            "type": "string",
            "nullable": true
          },
          "wcbGroupName": {
            "type": "string",
            "nullable": true
          },
          "vacGroupName": {
            "type": "string",
            "nullable": true
          },
          "textName1": {
            "type": "string",
            "nullable": true
          },
          "textName2": {
            "type": "string",
            "nullable": true
          },
          "textName3": {
            "type": "string",
            "nullable": true
          },
          "textName4": {
            "type": "string",
            "nullable": true
          },
          "textName5": {
            "type": "string",
            "nullable": true
          },
          "textName6": {
            "type": "string",
            "nullable": true
          },
          "textName7": {
            "type": "string",
            "nullable": true
          },
          "textName8": {
            "type": "string",
            "nullable": true
          },
          "textName9": {
            "type": "string",
            "nullable": true
          },
          "textName10": {
            "type": "string",
            "nullable": true
          },
          "textName11": {
            "type": "string",
            "nullable": true
          },
          "textName12": {
            "type": "string",
            "nullable": true
          },
          "textName13": {
            "type": "string",
            "nullable": true
          },
          "textName14": {
            "type": "string",
            "nullable": true
          },
          "textName15": {
            "type": "string",
            "nullable": true
          },
          "textName16": {
            "type": "string",
            "nullable": true
          },
          "textName17": {
            "type": "string",
            "nullable": true
          },
          "textName18": {
            "type": "string",
            "nullable": true
          },
          "textName19": {
            "type": "string",
            "nullable": true
          },
          "textName20": {
            "type": "string",
            "nullable": true
          },
          "dateName1": {
            "type": "string",
            "nullable": true
          },
          "dateName2": {
            "type": "string",
            "nullable": true
          },
          "dateName3": {
            "type": "string",
            "nullable": true
          },
          "dateName4": {
            "type": "string",
            "nullable": true
          },
          "dateName5": {
            "type": "string",
            "nullable": true
          },
          "dateName6": {
            "type": "string",
            "nullable": true
          },
          "dateName7": {
            "type": "string",
            "nullable": true
          },
          "dateName8": {
            "type": "string",
            "nullable": true
          },
          "dateName9": {
            "type": "string",
            "nullable": true
          },
          "dateName10": {
            "type": "string",
            "nullable": true
          },
          "dateName11": {
            "type": "string",
            "nullable": true
          },
          "dateName12": {
            "type": "string",
            "nullable": true
          },
          "chequeOption": {
            "type": "string"
          },
          "pronouns": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EmployeeInfoSettings": {
        "type": "object",
        "properties": {
          "pictureVisible": {
            "type": "boolean"
          },
          "qualificationsVisible": {
            "type": "boolean"
          },
          "scheduleVisible": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EmployeeQualification": {
        "type": "object",
        "properties": {
          "empNo": {
            "type": "string",
            "nullable": true
          },
          "code": {
            "type": "string",
            "nullable": true
          },
          "qualificationType": {
            "$ref": "#/components/schemas/QualificationType"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "descriptionFr": {
            "type": "string",
            "nullable": true
          },
          "detail1": {
            "type": "string",
            "nullable": true
          },
          "detail2": {
            "type": "string",
            "nullable": true
          },
          "detail3": {
            "type": "string",
            "nullable": true
          },
          "detail4": {
            "type": "string",
            "nullable": true
          },
          "statusDescription": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/QualificationStatus"
          },
          "requirement": {
            "$ref": "#/components/schemas/QualificationRequirement"
          },
          "expiryDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "completedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "renewedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "requiredDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "QualificationRequirement": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "QualificationStatus": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "QualificationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7
        ],
        "type": "integer",
        "format": "int32"
      },
      "PlayIntegrity": {
        "enum": [
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "format": "int32"
      },
      "TaxData": {
        "type": "object",
        "properties": {
          "empNo": {
            "type": "string",
            "nullable": true
          },
          "td1Fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD1Field"
            },
            "nullable": true
          },
          "multipleEmployers": {
            "type": "boolean"
          },
          "taxExempt": {
            "type": "boolean"
          },
          "nonResidentIncomeNotTax": {
            "type": "boolean",
            "nullable": true
          },
          "fedTaxCert": {
            "type": "boolean"
          },
          "province": {
            "type": "string",
            "nullable": true
          },
          "provTaxCert": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "TD1Field": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "maxValue": {
            "type": "number",
            "format": "double"
          },
          "baseValue": {
            "type": "number",
            "format": "double"
          },
          "value": {
            "nullable": true
          },
          "editable": {
            "type": "boolean"
          },
          "index": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DecliningBalancesRequest": {
        "required": [
          "amtPerPeriod",
          "effectiveDate",
          "empno",
          "expiryDate",
          "glType",
          "hourlyRate",
          "hoursPerPeriod",
          "maxAmount",
          "position",
          "salaried",
          "taskId"
        ],
        "type": "object",
        "properties": {
          "empno": {
            "maxLength": 9,
            "minLength": 0,
            "type": "string"
          },
          "position": {
            "maxLength": 12,
            "minLength": 0,
            "type": "string"
          },
          "taskId": {
            "maxLength": 9,
            "minLength": 0,
            "type": "string"
          },
          "effectiveDate": {
            "type": "string",
            "format": "date-time"
          },
          "expiryDate": {
            "type": "string",
            "format": "date-time"
          },
          "amtPerPeriod": {
            "type": "number",
            "format": "double"
          },
          "hoursPerPeriod": {
            "type": "number",
            "format": "double"
          },
          "hourlyRate": {
            "type": "number",
            "format": "double"
          },
          "maxAmount": {
            "type": "number",
            "format": "double"
          },
          "salaried": {
            "type": "boolean"
          },
          "glType": {
            "maxLength": 1,
            "minLength": 0,
            "type": "string"
          },
          "glGrp": {
            "maxLength": 4,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "earnGL": {
            "maxLength": 60,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "benGrp": {
            "maxLength": 4,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "comments": {
            "maxLength": 4096,
            "minLength": 0,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccountInfo": {
        "required": [
          "confirmPassword",
          "password",
          "userName"
        ],
        "type": "object",
        "properties": {
          "userName": {
            "type": "string"
          },
          "readOnlyUserName": {
            "type": "boolean"
          },
          "password": {
            "type": "string"
          },
          "confirmPassword": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "BankingViewInfo": {
        "required": [
          "bank1Account",
          "bank1Number",
          "bank1Transit",
          "bank2Account",
          "bank2Number",
          "bank2Transit",
          "bank3Account",
          "bank3Number",
          "bank3Transit",
          "bank4Account",
          "bank4Number",
          "bank4Transit",
          "bank5Account",
          "bank5Number",
          "bank5Transit"
        ],
        "type": "object",
        "properties": {
          "bank1Number": {
            "type": "string"
          },
          "bank1Transit": {
            "maxLength": 5,
            "minLength": 0,
            "type": "string"
          },
          "bank1Account": {
            "maxLength": 18,
            "minLength": 0,
            "type": "string"
          },
          "bank1Type": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "bank1ChequeFileName": {
            "type": "string",
            "nullable": true
          },
          "bank1DocId": {
            "type": "integer",
            "format": "int32"
          },
          "bank2Selected": {
            "type": "boolean"
          },
          "bank2Number": {
            "type": "string"
          },
          "bank2Transit": {
            "maxLength": 5,
            "minLength": 0,
            "type": "string"
          },
          "bank2Account": {
            "maxLength": 18,
            "minLength": 0,
            "type": "string"
          },
          "bank2Type": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "bank2ChequeFileName": {
            "type": "string",
            "nullable": true
          },
          "bank2DocId": {
            "type": "integer",
            "format": "int32"
          },
          "bank3Selected": {
            "type": "boolean"
          },
          "bank3Number": {
            "type": "string"
          },
          "bank3Transit": {
            "maxLength": 5,
            "minLength": 0,
            "type": "string"
          },
          "bank3Account": {
            "maxLength": 18,
            "minLength": 0,
            "type": "string"
          },
          "bank3Type": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "bank3ChequeFileName": {
            "type": "string",
            "nullable": true
          },
          "bank3DocId": {
            "type": "integer",
            "format": "int32"
          },
          "bank4Selected": {
            "type": "boolean"
          },
          "bank4Number": {
            "type": "string"
          },
          "bank4Transit": {
            "maxLength": 5,
            "minLength": 0,
            "type": "string"
          },
          "bank4Account": {
            "maxLength": 18,
            "minLength": 0,
            "type": "string"
          },
          "bank4Type": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "bank4ChequeFileName": {
            "type": "string",
            "nullable": true
          },
          "bank4DocId": {
            "type": "integer",
            "format": "int32"
          },
          "bank5Selected": {
            "type": "boolean"
          },
          "bank5Number": {
            "type": "string"
          },
          "bank5Transit": {
            "maxLength": 5,
            "minLength": 0,
            "type": "string"
          },
          "bank5Account": {
            "maxLength": 18,
            "minLength": 0,
            "type": "string"
          },
          "bank5Type": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "bank5ChequeFileName": {
            "type": "string",
            "nullable": true
          },
          "bank5DocId": {
            "type": "integer",
            "format": "int32"
          },
          "bank1ChqFile": {
            "$ref": "#/components/schemas/SaveFileModel"
          },
          "bank2ChqFile": {
            "$ref": "#/components/schemas/SaveFileModel"
          },
          "bank3ChqFile": {
            "$ref": "#/components/schemas/SaveFileModel"
          },
          "bank4ChqFile": {
            "$ref": "#/components/schemas/SaveFileModel"
          },
          "bank5ChqFile": {
            "$ref": "#/components/schemas/SaveFileModel"
          },
          "allowMultipleBankAccounts": {
            "type": "boolean"
          },
          "numberOfBanks": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfCheques": {
            "type": "integer",
            "format": "int32"
          },
          "onboardingBankMessageText": {
            "type": "string",
            "nullable": true
          },
          "onboardingBankMessageTextFr": {
            "type": "string",
            "nullable": true
          },
          "fileSizeLimit": {
            "type": "integer",
            "format": "int32"
          },
          "fileSizeLimitSetOnWebServer": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ContactInfo": {
        "required": [
          "address1",
          "city",
          "country",
          "email1",
          "postal",
          "province"
        ],
        "type": "object",
        "properties": {
          "address1": {
            "maxLength": 30,
            "minLength": 0,
            "pattern": "^[^<>]+$",
            "type": "string"
          },
          "address2": {
            "maxLength": 30,
            "minLength": 0,
            "pattern": "^[^<>]+$",
            "type": "string",
            "nullable": true
          },
          "city": {
            "maxLength": 30,
            "minLength": 0,
            "pattern": "^[^<>]+$",
            "type": "string"
          },
          "province": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string"
          },
          "country": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string"
          },
          "postal": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string"
          },
          "phoneType1": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber1": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "phoneType2": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber2": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "phoneType3": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber3": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "phoneType4": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber4": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "emailType1": {
            "type": "integer",
            "format": "int32"
          },
          "email1": {
            "maxLength": 50,
            "minLength": 0,
            "pattern": "^[^<>]+$",
            "type": "string",
            "format": "email"
          },
          "emailType2": {
            "type": "integer",
            "format": "int32"
          },
          "email2": {
            "maxLength": 50,
            "minLength": 0,
            "pattern": "^[^<>]+$",
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "emailType3": {
            "type": "integer",
            "format": "int32"
          },
          "email3": {
            "maxLength": 50,
            "minLength": 0,
            "pattern": "^[^<>]+$",
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "emailType4": {
            "type": "integer",
            "format": "int32"
          },
          "email4": {
            "maxLength": 50,
            "minLength": 0,
            "pattern": "^[^<>]+$",
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "emailType5": {
            "type": "integer",
            "format": "int32"
          },
          "email5": {
            "maxLength": 50,
            "minLength": 0,
            "pattern": "^[^<>]+$",
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EmployeePaymentMethodBanks": {
        "type": "object",
        "properties": {
          "bank1Number": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "bank1Transit": {
            "maxLength": 5,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "bank1Account": {
            "maxLength": 18,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "bank1Type": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "depositFreq1": {
            "type": "string"
          },
          "depositType1": {
            "type": "string"
          },
          "depositAmt1": {
            "type": "number",
            "format": "double"
          },
          "bank2Number": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "bank2Transit": {
            "maxLength": 5,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "bank2Account": {
            "maxLength": 18,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "bank2Type": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "depositFreq2": {
            "type": "string"
          },
          "depositType2": {
            "type": "string"
          },
          "depositAmt2": {
            "type": "number",
            "format": "double"
          },
          "bank3Number": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "bank3Transit": {
            "maxLength": 5,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "bank3Account": {
            "maxLength": 18,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "bank3Type": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "depositFreq3": {
            "type": "string"
          },
          "depositType3": {
            "type": "string"
          },
          "depositAmt3": {
            "type": "number",
            "format": "double"
          },
          "bank4Number": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "bank4Transit": {
            "maxLength": 5,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "bank4Account": {
            "maxLength": 18,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "bank4Type": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "depositFreq4": {
            "type": "string"
          },
          "depositType4": {
            "type": "string"
          },
          "depositAmt4": {
            "type": "number",
            "format": "double"
          },
          "bank5Number": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "bank5Transit": {
            "maxLength": 5,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "bank5Account": {
            "maxLength": 18,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "bank5Type": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "depositFreq5": {
            "type": "string"
          },
          "depositType5": {
            "type": "string"
          },
          "depositAmt5": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "OnboardingInfo": {
        "type": "object",
        "properties": {
          "currentStep": {
            "type": "integer",
            "format": "int32"
          },
          "nextStep": {
            "type": "integer",
            "format": "int32"
          },
          "previousStep": {
            "type": "integer",
            "format": "int32"
          },
          "empNo": {
            "type": "string",
            "nullable": true
          },
          "accountInfo": {
            "$ref": "#/components/schemas/AccountInfo"
          },
          "personalInfo": {
            "$ref": "#/components/schemas/OnboardingPersonalInfo"
          },
          "contactInfo": {
            "$ref": "#/components/schemas/ContactInfo"
          },
          "bankingViewModel": {
            "$ref": "#/components/schemas/BankingViewInfo"
          },
          "personalInfoSettings": {
            "$ref": "#/components/schemas/PersonalInfoSettings"
          },
          "emergencyContactInfo": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmergencyContact"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OnboardingMenuStatus": {
        "enum": [
          1,
          2,
          3,
          4,
          5
        ],
        "type": "integer",
        "format": "int32"
      },
      "OnboardingPersonalInfo": {
        "required": [
          "birthDate",
          "firstLanguage",
          "gender",
          "givenName",
          "marital",
          "sin",
          "surname"
        ],
        "type": "object",
        "properties": {
          "givenName": {
            "maxLength": 30,
            "minLength": 0,
            "pattern": "^[^<>]+$",
            "type": "string"
          },
          "surname": {
            "maxLength": 30,
            "minLength": 0,
            "pattern": "^[^<>]+$",
            "type": "string"
          },
          "initial": {
            "maxLength": 1,
            "minLength": 0,
            "pattern": "^[^<>]+$",
            "type": "string",
            "nullable": true
          },
          "preferredName": {
            "maxLength": 30,
            "minLength": 0,
            "pattern": "^[^<>]+$",
            "type": "string",
            "nullable": true
          },
          "employeeName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "fullName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "birthDate": {
            "type": "string",
            "format": "date-time"
          },
          "firstLanguage": {
            "type": "string"
          },
          "gender": {
            "type": "string"
          },
          "sin": {
            "maxLength": 9,
            "minLength": 0,
            "type": "string"
          },
          "sinDocument": {
            "$ref": "#/components/schemas/SaveFileModel"
          },
          "sinFileName": {
            "type": "string",
            "nullable": true
          },
          "sinDocId": {
            "type": "integer",
            "format": "int32"
          },
          "workPermitDocument": {
            "$ref": "#/components/schemas/SaveFileModel"
          },
          "workPermitFileName": {
            "type": "string",
            "nullable": true
          },
          "workPermitDocId": {
            "type": "integer",
            "format": "int32"
          },
          "workPermitDocumentType": {
            "type": "string",
            "nullable": true
          },
          "workPermitDocumentTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "sinExpiryDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "marital": {
            "maxLength": 1,
            "minLength": 0,
            "type": "string"
          },
          "fileSizeLimit": {
            "type": "integer",
            "format": "int32"
          },
          "fileSizeLimitSetOnWebServer": {
            "type": "boolean"
          },
          "pronouns": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isTemporarySin": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "OnboardingRequirementOption": {
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "OnboardingSettings": {
        "type": "object",
        "properties": {
          "welcomeMessage": {
            "type": "string",
            "nullable": true
          },
          "welcomeMessageFr": {
            "type": "string",
            "nullable": true
          },
          "workPermitDocumentType": {
            "type": "integer",
            "format": "int32"
          },
          "passwordPolicy": {
            "type": "string",
            "nullable": true
          },
          "tempSinDocumentUpload": {
            "type": "string",
            "nullable": true
          },
          "sinDocumentUpload": {
            "type": "string",
            "nullable": true
          },
          "workPermitRequired": {
            "type": "string",
            "nullable": true
          },
          "allowMultipleDocumentTypes": {
            "type": "string",
            "nullable": true
          },
          "completedMessage": {
            "type": "string",
            "nullable": true
          },
          "completedMessageFr": {
            "type": "string",
            "nullable": true
          },
          "bankMessage": {
            "type": "string",
            "nullable": true
          },
          "bankMessageFr": {
            "type": "string",
            "nullable": true
          },
          "documentReviewUserGroups": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "showActiveApplicantsAppliedWithoutRequistion": {
            "type": "boolean"
          },
          "numberOfBankAccounts": {
            "type": "integer",
            "format": "int32"
          },
          "allowMultipleBankAccounts": {
            "type": "boolean"
          },
          "chequeUploadRequired": {
            "type": "boolean"
          },
          "phoneType1": {
            "type": "integer",
            "format": "int32"
          },
          "phoneType2": {
            "type": "integer",
            "format": "int32"
          },
          "phoneType3": {
            "type": "integer",
            "format": "int32"
          },
          "phoneType4": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "OnboardingSetup": {
        "type": "object",
        "properties": {
          "steps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OnboardingStep"
            },
            "nullable": true
          },
          "onboardingSettings": {
            "$ref": "#/components/schemas/OnboardingSettings"
          },
          "emergencyContactSettings": {
            "$ref": "#/components/schemas/EmergencyContactSettings"
          },
          "onboardingInfo": {
            "$ref": "#/components/schemas/OnboardingInfo"
          },
          "provinces": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextValuePair"
            },
            "nullable": true
          },
          "countries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextValuePair"
            },
            "nullable": true
          },
          "phoneTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextValuePair"
            },
            "nullable": true
          },
          "emergencyContactSetupResponse": {
            "nullable": true
          },
          "employeeHomePhone": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OnboardingStep": {
        "type": "object",
        "properties": {
          "onboardingStepId": {
            "type": "integer",
            "format": "int32"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "frenchDescription": {
            "type": "string",
            "nullable": true
          },
          "stepOrder": {
            "type": "integer",
            "format": "int32"
          },
          "requirementOption": {
            "$ref": "#/components/schemas/OnboardingRequirementOption"
          },
          "completedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "menuStatus": {
            "$ref": "#/components/schemas/OnboardingMenuStatus"
          },
          "stepCompleted": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "SaveFileModel": {
        "type": "object",
        "properties": {
          "documentId": {
            "type": "integer",
            "format": "int32"
          },
          "empNo": {
            "type": "string",
            "nullable": true
          },
          "contentType": {
            "type": "string",
            "nullable": true
          },
          "typeId": {
            "type": "integer",
            "format": "int32"
          },
          "fileName": {
            "type": "string",
            "nullable": true
          },
          "filePath": {
            "type": "string",
            "nullable": true
          },
          "documentRevision": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "summary": {
            "type": "string",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "lastModifiedBy": {
            "type": "string",
            "nullable": true
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "StepInfo": {
        "type": "object",
        "properties": {
          "currentStep": {
            "type": "integer",
            "format": "int32"
          },
          "nextStep": {
            "type": "integer",
            "format": "int32"
          },
          "previousStep": {
            "type": "integer",
            "format": "int32"
          },
          "nextStepRequired": {
            "$ref": "#/components/schemas/OnboardingRequirementOption"
          },
          "lastStepStatus": {
            "$ref": "#/components/schemas/OnboardingMenuStatus"
          },
          "onboardingInfo": {
            "$ref": "#/components/schemas/OnboardingInfo"
          }
        },
        "additionalProperties": false
      },
      "TD1FormDates": {
        "type": "object",
        "properties": {
          "fedEffectiveDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "fedCreatedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "provEffectiveDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "provCreatedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "fedTaxYear": {
            "type": "integer",
            "format": "int32"
          },
          "provTaxYear": {
            "type": "integer",
            "format": "int32"
          },
          "provEmployed": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DirectDepositSetupResponse": {
        "type": "object",
        "properties": {
          "banks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextValuePair"
            },
            "nullable": true
          },
          "depositFrequency": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextValuePair"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TaxFactors": {
        "type": "object",
        "properties": {
          "td1Fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD1Field"
            },
            "nullable": true
          },
          "additionalFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD1Field"
            },
            "nullable": true
          },
          "employeeInfo": {
            "$ref": "#/components/schemas/EmployeeInfo"
          }
        },
        "additionalProperties": false
      },
      "AbsentEmployee": {
        "type": "object",
        "properties": {
          "photoRevision": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "empNo": {
            "type": "string",
            "nullable": true
          },
          "employeeName": {
            "type": "string",
            "nullable": true
          },
          "positionName": {
            "type": "string",
            "nullable": true
          },
          "positionNameFr": {
            "type": "string",
            "nullable": true
          },
          "unitsAbsent": {
            "type": "number",
            "format": "double"
          },
          "unitsAbsentUOM": {
            "type": "string",
            "nullable": true
          },
          "reasonColor": {
            "type": "string",
            "nullable": true
          },
          "reasonColorR": {
            "type": "integer",
            "format": "int32"
          },
          "reasonColorG": {
            "type": "integer",
            "format": "int32"
          },
          "reasonColorB": {
            "type": "integer",
            "format": "int32"
          },
          "reasonName": {
            "type": "string",
            "nullable": true
          },
          "reasonNameFr": {
            "type": "string",
            "nullable": true
          },
          "entitlementType": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "fromTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "toTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AllowedNumberOfClientDatabases": {
        "required": [
          "numberOfProductionDatabasesAllowed",
          "numberOfTestDatabasesAllowed"
        ],
        "type": "object",
        "properties": {
          "numberOfProductionDatabasesAllowed": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfTestDatabasesAllowed": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "IContractResolver": {
        "type": "object",
        "additionalProperties": false
      },
      "OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "UpdateEmployeeJobInfoJsonPatchDocument": {
        "type": "object",
        "properties": {
          "operations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateEmployeeJobInfoOperation"
            },
            "nullable": true
          },
          "contractResolver": {
            "$ref": "#/components/schemas/IContractResolver"
          }
        },
        "additionalProperties": false
      },
      "UpdateEmployeeJobInfoOperation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TerminateEmployee": {
        "required": [
          "terminationCode",
          "terminationDate"
        ],
        "type": "object",
        "properties": {
          "terminationDate": {
            "type": "string",
            "format": "date-time"
          },
          "terminationCode": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string"
          },
          "terminationComments": {
            "maxLength": 160,
            "minLength": 0,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GlInfoPatchRequestJsonPatchDocument": {
        "type": "object",
        "properties": {
          "operations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GlInfoPatchRequestOperation"
            },
            "nullable": true
          },
          "contractResolver": {
            "$ref": "#/components/schemas/IContractResolver"
          }
        },
        "additionalProperties": false
      },
      "GlInfoPatchRequestOperation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateEmployeePaymentMethodBanksJsonPatchDocument": {
        "type": "object",
        "properties": {
          "operations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateEmployeePaymentMethodBanksOperation"
            },
            "nullable": true
          },
          "contractResolver": {
            "$ref": "#/components/schemas/IContractResolver"
          }
        },
        "additionalProperties": false
      },
      "UpdateEmployeePaymentMethodBanksOperation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PayDates": {
        "type": "object",
        "properties": {
          "payEndingDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "chequeDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "payPeriods": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "FutureDatedRate": {
        "required": [
          "effectiveDate",
          "rate",
          "uom"
        ],
        "type": "object",
        "properties": {
          "earningCode": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "effectiveDate": {
            "type": "string",
            "format": "date-time"
          },
          "rate": {
            "type": "number",
            "format": "double"
          },
          "uom": {
            "$ref": "#/components/schemas/UnitOfMeasure"
          }
        },
        "additionalProperties": false
      },
      "Geofence": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "descriptionFr": {
            "type": "string",
            "nullable": true
          },
          "radius": {
            "type": "integer",
            "format": "int32"
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "hasFullPositionsAccess": {
            "type": "boolean"
          },
          "employeeMeetsCriteria": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "GeofenceCriteria": {
        "type": "object",
        "properties": {
          "geofenceId": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "integer",
            "format": "int32"
          },
          "code": {
            "type": "string",
            "nullable": true
          },
          "criteriaId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "GeofenceCriteriaFilters": {
        "type": "object",
        "properties": {
          "workGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextValuePair"
            },
            "nullable": true
          },
          "locations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextValuePair"
            },
            "nullable": true
          },
          "positions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextValuePair"
            },
            "nullable": true
          },
          "allPositions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextValuePair"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TaxStatement": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "taxYear": {
            "type": "integer",
            "format": "int32"
          },
          "form": {
            "type": "string",
            "nullable": true
          },
          "company": {
            "type": "string",
            "nullable": true
          },
          "province": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TaxStatementsSettings": {
        "type": "object",
        "properties": {
          "requirePdfPasswordProtection": {
            "type": "boolean"
          },
          "usePdfPasswordProtection": {
            "type": "boolean"
          },
          "enableEmail": {
            "type": "boolean"
          },
          "warningMessage": {
            "type": "string",
            "nullable": true
          },
          "viewOption": {
            "$ref": "#/components/schemas/DocumentViewOption"
          },
          "columnDisplay": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Document": {
        "type": "object",
        "properties": {
          "documentId": {
            "type": "integer",
            "format": "int32"
          },
          "documentRevision": {
            "type": "integer",
            "format": "int32"
          },
          "contentType": {
            "type": "string",
            "nullable": true
          },
          "typeId": {
            "type": "integer",
            "format": "int32"
          },
          "fileName": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "content": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "summary": {
            "type": "string",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastModifiedBy": {
            "type": "string",
            "nullable": true
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "allowInsert": {
            "type": "boolean"
          },
          "allowModify": {
            "type": "boolean"
          },
          "allowDelete": {
            "type": "boolean"
          },
          "isTemplate": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "DocumentType": {
        "type": "object",
        "properties": {
          "typeId": {
            "type": "integer",
            "format": "int32"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "descriptionFr": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EmployeeDocumentSettings": {
        "type": "object",
        "properties": {
          "viewOption": {
            "$ref": "#/components/schemas/DocumentViewOption"
          },
          "columnDisplay": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "documentUpload": {
            "type": "boolean"
          },
          "viewDocumentTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentType"
            },
            "nullable": true
          },
          "uploadDocumentTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentType"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GlBatchSearchSearchOperation": {
        "type": "object",
        "additionalProperties": false
      },
      "GlExportRequest": {
        "required": [
          "setAsProcessed",
          "summarizationOption"
        ],
        "type": "object",
        "properties": {
          "setAsProcessed": {
            "type": "boolean"
          },
          "summarizationOption": {
            "$ref": "#/components/schemas/SummarizationOption"
          }
        },
        "additionalProperties": false
      },
      "SummarizationOption": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "UpdateGlBatchStatusJsonPatchDocument": {
        "type": "object",
        "properties": {
          "operations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateGlBatchStatusOperation"
            },
            "nullable": true
          },
          "contractResolver": {
            "$ref": "#/components/schemas/IContractResolver"
          }
        },
        "additionalProperties": false
      },
      "UpdateGlBatchStatusOperation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DataResultEmployeeListModelValueTuple": {
        "type": "object",
        "additionalProperties": false
      },
      "Summary": {
        "type": "object",
        "properties": {
          "code": {
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "nameFr": {
            "type": "string",
            "nullable": true
          },
          "abbreviation": {
            "type": "string",
            "nullable": true
          },
          "abbreviationFr": {
            "type": "string",
            "nullable": true
          },
          "effectiveDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "expiryDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "additionalInfo": null,
          "shortDescription": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "description": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "descriptionFr": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "lookupType": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TemplateFieldType": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "summaries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Summary"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GlSegmentDto": {
        "type": "object",
        "properties": {
          "segmentNo": {
            "type": "integer",
            "format": "int32"
          },
          "account": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "abbreviation": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "types": {
            "type": "string",
            "nullable": true
          },
          "mask": {
            "type": "string",
            "nullable": true
          },
          "validationTypes": {
            "type": "string",
            "nullable": true
          },
          "effectiveDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "expiryDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "active": {
            "type": "boolean"
          },
          "useProjectAccount": {
            "type": "boolean"
          },
          "statAccount": {
            "type": "string",
            "nullable": true
          },
          "defaultEarnGl": {
            "type": "string",
            "nullable": true
          },
          "exportValue": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GlSegmentRequest": {
        "required": [
          "abbreviation",
          "account",
          "active",
          "description",
          "mask",
          "segmentNo",
          "useProjectAccount"
        ],
        "type": "object",
        "properties": {
          "segmentNo": {
            "type": "integer",
            "format": "int32"
          },
          "account": {
            "maxLength": 15,
            "minLength": 0,
            "type": "string"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string"
          },
          "abbreviation": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string"
          },
          "type": {
            "maxLength": 1,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "types": {
            "type": "string",
            "nullable": true
          },
          "mask": {
            "maxLength": 60,
            "minLength": 0,
            "type": "string"
          },
          "validationTypes": {
            "maxLength": 15,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "effectiveDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "expiryDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "active": {
            "type": "boolean"
          },
          "useProjectAccount": {
            "type": "boolean"
          },
          "statAccount": {
            "maxLength": 15,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "defaultEarnGl": {
            "type": "string",
            "nullable": true
          },
          "exportValue": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GlSegmentResponse": {
        "type": "object",
        "properties": {
          "segmentNo": {
            "type": "integer",
            "format": "int32"
          },
          "account": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "abbreviation": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "types": {
            "type": "string",
            "nullable": true
          },
          "mask": {
            "type": "string",
            "nullable": true
          },
          "validationTypes": {
            "type": "string",
            "nullable": true
          },
          "effectiveDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "expiryDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "active": {
            "type": "boolean"
          },
          "useProjectAccount": {
            "type": "boolean"
          },
          "defaultEarnGl": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SelectableSummary": {
        "type": "object",
        "properties": {
          "code": {
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "nameFr": {
            "type": "string",
            "nullable": true
          },
          "abbreviation": {
            "type": "string",
            "nullable": true
          },
          "abbreviationFr": {
            "type": "string",
            "nullable": true
          },
          "effectiveDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "expiryDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "additionalInfo": null,
          "shortDescription": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "description": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "descriptionFr": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "lookupType": {
            "type": "string",
            "nullable": true
          },
          "isSelected": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EmployeeInfo": {
        "type": "object",
        "properties": {
          "empNo": {
            "type": "string",
            "nullable": true
          },
          "empName": {
            "type": "string",
            "nullable": true
          },
          "empAddress": {
            "type": "string",
            "nullable": true
          },
          "empDOB": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "empSIN": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CompanySettings": {
        "type": "object",
        "properties": {
          "lookupSettings": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/LookupSettings"
            },
            "nullable": true
          },
          "fileSizeLimitInBytes": {
            "type": "integer",
            "format": "int32"
          },
          "allowedTimeEntryDocumentTypes": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "allowedTimeEntryDocumentTypesCollection": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentType"
            },
            "nullable": true
          },
          "allowedDocumentExtensionsCollection": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LookupSettings": {
        "type": "object",
        "properties": {
          "display": {
            "type": "string",
            "nullable": true
          },
          "orderBy": {
            "type": "string",
            "nullable": true
          },
          "desc": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "reference"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ],
  "tags": [
    {
      "name": "Attendance Codes"
    },
    {
      "name": "Attendance Data"
    },
    {
      "name": "Bank Transit"
    },
    {
      "name": "Banks"
    },
    {
      "name": "Benefit Groups"
    },
    {
      "name": "Change Log"
    },
    {
      "name": "Company Info"
    },
    {
      "name": "Data Connector"
    },
    {
      "name": "Declining Balances"
    },
    {
      "name": "Defaults Group"
    },
    {
      "name": "Dependents"
    },
    {
      "name": "Emergency Contacts"
    },
    {
      "name": "Employee Additional Information"
    },
    {
      "name": "Employee Address"
    },
    {
      "name": "Employee Basic Info"
    },
    {
      "name": "Employee Benefit Codes"
    },
    {
      "name": "Employee Benefit Group"
    },
    {
      "name": "Employee Benefits"
    },
    {
      "name": "Employee Compensation"
    },
    {
      "name": "Employee Defaults Group"
    },
    {
      "name": "Employee Earning Codes"
    },
    {
      "name": "Employee Emails"
    },
    {
      "name": "Employee GL Info"
    },
    {
      "name": "Employee Job Data"
    },
    {
      "name": "Employee Job Info"
    },
    {
      "name": "Employee Pay Info"
    },
    {
      "name": "Employee Pay Statements"
    },
    {
      "name": "Employee Personal Info"
    },
    {
      "name": "Employee Phone Number"
    },
    {
      "name": "Employee Position Rates"
    },
    {
      "name": "Employee Vacation Info"
    },
    {
      "name": "Employees"
    },
    {
      "name": "Employment History"
    },
    {
      "name": "Employment Status"
    },
    {
      "name": "GLs"
    },
    {
      "name": "Grid Codes"
    },
    {
      "name": "Job Status"
    },
    {
      "name": "Locations"
    },
    {
      "name": "New Hire"
    },
    {
      "name": "Notification Settings"
    },
    {
      "name": "Notifications"
    },
    {
      "name": "Pay Codes"
    },
    {
      "name": "Pay Groups"
    },
    {
      "name": "Pay Statements"
    },
    {
      "name": "Payroll Data"
    },
    {
      "name": "Positions"
    },
    {
      "name": "Rate Grids"
    },
    {
      "name": "Reporter"
    },
    {
      "name": "Schedule Import"
    },
    {
      "name": "Schedule Templates"
    },
    {
      "name": "Search"
    },
    {
      "name": "Shift Codes"
    },
    {
      "name": "Task IDs"
    },
    {
      "name": "Time Data"
    },
    {
      "name": "Time Management"
    },
    {
      "name": "Union Codes"
    },
    {
      "name": "Vacation Earning Codes"
    },
    {
      "name": "Vacation Groups"
    },
    {
      "name": "Vacation Options"
    },
    {
      "name": "WCB Groups"
    },
    {
      "name": "Web Punch"
    },
    {
      "name": "Whats New"
    },
    {
      "name": "Work Groups"
    },
    {
      "name": "Work Tech"
    }
  ]
}